//----------------------------------------BASE-------------------------

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator fake_data {
    provider = "prisma-generator-fake-data"
    output   = "./fake-data.ts"
}

generator nestgraphql {
    provider                              = "node node_modules/prisma-nestjs-graphql"
    output                                = "../src/@generated"
    reExport                              = Single
    fields_Validator_from                 = "class-validator"
    fields_Validator_input                = true
    requireSingleFieldsInWhereUniqueInput = true
    emitSingle                            = true
    emitCompiled                          = true
    purgeOutput                           = true
    noTypeId                              = true
}

//-----------------------------------------------------------------

model User {
    //-----------------------------scalars-------------------------
    id Int @id @default(autoincrement())

    ///Nama Lengkap
    fullName String

    email String @unique

    emailVerifiedAt DateTime?

    password String

    /// @HideField({ output: false, input: true })
    ///Tgl.Masuk Peserta
    createdAt DateTime @default(now())

    /// @HideField({ output: false, input: true })
    updatedAt DateTime @updatedAt

    deletedAt DateTime? //implement softdelete

    //-------------------------- 1 relations --------------------------------

    role Role @relation(fields: [roleId], references: [id])

    roleId Int

    participant Participant?

    participantId Int?

    //-------------------------- m relations --------------------------------

    claimsInput Claim[]

    claimActions ClaimStatus[]

    @@map("users")
}

model Role {
    id Int @id @default(autoincrement())

    name String // E.g., 'superuser', 'analyst', 'group leader'

    permissions Permission[]

    users User[]

    @@map("roles")
}

enum Permission {
    CREATE_CLAIM
    APPROVE_CLAIM
    REJECT_CLAIM
    READ_CLAIM
    UPDATE_CLAIM

    // Add other permission values as needed
}

model Participant {
    //-------------------------- scalars --------------------------------

    ///Jenis Kelamin
    gender Gender

    ///Tanggal Lahir
    birthDate DateTime

    // age Int //tidak perlu disimpan ke db

    ///Nomer Kartu tanda Penduduk
    nationalID String

    ///Nomer kartu Keluarga
    familyCardNumber String

    ///Nomer NPWP
    taxID String?

    ///Aktif/Non Aktif:	Status Kepesertaan Aktif/non aktif
    isActive Boolean

    // ///Nomer peserta (jika Pensiunan menggunakan -1, Pasangan -2, Yatim -3, 6 bulan -4)
    // participantNumber String

    //-------------------------- 1 relations --------------------------------

    ///Pensiunan,Pasangan, Yatim, Janda/duda 6 bulan
    participantStatus ParticipantStatus

    user User @relation(fields: [userId], references: [id])

    userId Int @id

    ///Anggota keluarga dari
    relation Participant? @relation("ParticipantRelation", fields: [relationId], references: [userId])

    relationId Int?

    //-------------------------- m relations --------------------------------

    claims Claim[]

    employments Employment[]

    contactInfos ContactInfo[]

    bankAccounts BankAccount[]

    programParticipations ProgramParticipation[]

    balances Account[]

    ///Anggota keluarga dari
    Participant Participant[] @relation("ParticipantRelation")
}

enum ParticipantStatus {
    PENSIUNAN
    PASANGAN
    YATIM
    JANDADUDA6BULAN
}

enum Position {
    AMGR
    AVP
    PGD
    MGR
    SASST
    VP
    SAVP
    SMGR
    SAMGR
    ASST
}

model ContactInfo {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    telp String

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

    deletedAt DateTime?

    //-------------------------- 1 relations --------------------------------

    participant Participant @relation(fields: [participantId], references: [userId])

    participantId Int

    address Address @relation(fields: [addressId], references: [id])

    addressId Int
}

model Address {
    id          Int           @id @default(autoincrement())
    alamat      String
    kota        String
    kodePos     String
    contactInfo ContactInfo[]
}

model BankAccount {
    id            Int         @id @default(autoincrement())
    noRekening    String
    rekeningAn    String
    participant   Participant @relation(fields: [participantId], references: [userId])
    participantId Int
}

model Employment {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    //-------------------------- 1 relations --------------------------------

    ///Jenjang Jabatan terakhir
    employmentPosition Position

    participant Participant @relation(fields: [participantId], references: [userId])

    participantId Int

    branch Branch @relation(fields: [branchId], references: [id])

    branchId Int

    group Group? @relation(fields: [groupId], references: [id])

    groupId Int

    region   Region? @relation(fields: [regionId], references: [id])
    regionId Int
}

model Branch {
    id             Int              @id @default(autoincrement())
    name           String
    // Other fields specific to branches
    Employment     Employment[]
    ClaimFinancial ClaimFinancial[]
}

model Group {
    id         Int          @id @default(autoincrement())
    name       String
    // Other fields specific to groups
    Employment Employment[]
}

model Region {
    id         Int          @id @default(autoincrement())
    name       String
    // Other fields specific to regions
    Employment Employment[]
}

model ProgramParticipation {
    //-------------------------- scalars --------------------------------

    ///Nopol:	Nomer Polish
    id Int @id @default(autoincrement())

    ///No.BPJS/ASKES: Nomer kartu BPJS
    bpjsNumber String?

    ///Plan	PlanType = jenis Rawat inap atau disingkat RI
    planType PlanType

    ///Keterangan Non Aktif:	keterangan perihal penonaktifan
    nonActiveReason String?

    ///Tgl. Efektif: Tanggal mulai ikut program Fasilitas Kesehatan
    effectiveDate DateTime

    ///Tgl Non Aktif:	tanggal penonaktifan peserta
    nonActiveDate DateTime?

    //-------------------------- 1 relations --------------------------------

    ///KELAS: Kelas sesuai Jenjab I=Rp.1.250.000 II=Rp.1.000.000  III= Rp.750.000 
    class Class

    participant Participant @relation(fields: [participantId], references: [userId])

    participantId Int

    ///Nomor Dana
    funding Account @relation(fields: [fundingId], references: [id])

    ///Nomor Dana
    fundingId Int
}

enum PlanType {
    RAWAT_INAP
    RAWAT_JALAN
}

///KELAS: Kelas sesuai Jenjab I=Rp.1.250.000 II=Rp.1.000.000  III= Rp.750.000 
enum Class {
    I
    II
    III
}

model Claim {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    //orderNumber  String //tidak perlu nomor urut

    ///Reklaim:	Keterangan untuk klaim ulang
    reclaim String?

    ///TProses Pengajuan:	Tanggal Proses pengajuan
    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

    deletedAt DateTime?

    //-------------------------- 1 relations --------------------------------

    ///Stat. Admedika:	Status Admedika
    admedicaStatus AdmedicaStatus

    ///Prsh:	Perusahaan
    company Company @relation(fields: [companyId], references: [id])

    ///Prsh:	Perusahaan
    companyId Int

    channel ClaimChannel

    participant Participant @relation(fields: [participantId], references: [userId])

    participantId Int

    claimFinancials ClaimFinancial[] @relation(fields: [claimFinancialId], references: [id])

    claimFinancialId Int

    claimProcesses ClaimProcess[] @relation(fields: [claimProcessId], references: [id])

    claimProcessId Int

    claimDiagnoses ClaimDiagnosis[] @relation(fields: [claimDiagnosisId], references: [id])

    claimDiagnosisId Int

    diseases Disease? @relation(fields: [diseaseId], references: [id])

    diseaseId Int?

    clinics Clinic? @relation(fields: [clinicId], references: [id])

    clinicId Int?

    users User? @relation(fields: [userId], references: [id])

    userId Int?

    claimTypes ClaimType? @relation(fields: [claimTypeId], references: [id])

    claimTypeId Int?

    //-------------------------- m relations --------------------------------

    documents Document[]

    tags Tag[]

    claimStatuses ClaimStatus[]
}

enum ClaimChannel {
    REGULER
    WA
    EMAIL
}

model Document {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    name String

    path String

    size Int

    createdAt DateTime @default(now())
    //-------------------------- 1 relations --------------------------------

    // Add more fields as needed, such as uploader information, document type, etc.

    Claim Claim @relation(fields: [claimId], references: [id])

    claimId Int
}

model Tag {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    name String

    color Color

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

    //-------------------------- m relations --------------------------------

    Claims Claim[]
}

enum Color {
    WHITE
    BLUE
    RED
    YELLOW
    GREEN
}

model Company {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    name String

    //-------------------------- m relations --------------------------------

    claims Claim[]

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt
}

model ClaimType {
    id Int @id @default(autoincrement())

    type ApplicationType

    ///Jenis RI:	Hospital Cash Plan
    jenisRI String

    plan String

    maxAllowance Float

    claimPeriod Int // Number of days

    conditions String

    claims Claim[]
}

enum ApplicationType {
    SANTUNAN_HARIAN_RAWAT_INAP
    BANTUAN_BIAYA_CUCI_DARAH
    BANTUAN_KURSI_RODA
    BANTUAN_WALKER
    BANTUAN_IGD_UGD
    BANTUAN_RAWAT_INAP
}

enum AdmedicaStatus {
    NON_ADMEDICA
}

model ClaimFinancial {
    id Int @id @default(autoincrement())

    ///Cabang: Cabang Pembayar Pensiun
    branchPayee Branch @relation(fields: [branchId], references: [id])

    requestedAmount  Float
    paidAmount       Float
    rejectedAmount   Float
    totalClaim       Float
    allowanceCeiling Float
    submissionCount  Int
    remainingCeiling Float
    claim            Claim @relation(fields: [claimId], references: [id])
    claimId          Int
    branchId         Int
}

model ClaimProcess {
    id Int @id @default(autoincrement())

    startTreatment DateTime

    endTreatment DateTime

    treatmentMonth String

    treatmentYear Int

    claimDate DateTime

    expeditionDate DateTime

    transferDate DateTime

    submissionProcessDate DateTime

    transactionProcessDate DateTime

    incomingNumber String

    submissionNote String

    description String

    additionalNote String

    rejectionLetterNumber String?

    rejectionLetterDate DateTime?

    recapNumber String

    guaranteeLetterNumber String

    claim Claim @relation(fields: [claimId], references: [id])

    claimId Int
}

model ClaimStatus {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    rejectionReason String?

    //-------------------------- 1 relations --------------------------------

    status ClaimStatusType

    user User @relation(fields: [userId], references: [id])

    userId Int

    claim Claim @relation(fields: [claimId], references: [id])

    claimId Int

    createdAt DateTime @default(now())
}

model ClaimDiagnosis {
    id Int @id @default(autoincrement())

    disease Disease @relation(fields: [diseaseId], references: [id])

    diseaseId Int

    claim Claim @relation(fields: [claimId], references: [id])

    claimId Int
}

model Disease {
    id Int @id @default(autoincrement())

    kodePenyakit String

    namaPenyakit String

    groupDiagnosa String

    penggolonganDiagnosa String

    claims Claim[]

    ClaimDiagnosis ClaimDiagnosis[]
}

model Clinic {
    id Int @id @default(autoincrement())

    kodeKlinik String

    namaKlinik String

    claims Claim[]
}

model Account {
    id Int @id @default(autoincrement())

    currentBalance Float

    participant Participant @relation(fields: [participantId], references: [userId])

    participantId Int

    transactions         Transaction[]
    ProgramParticipation ProgramParticipation[]
}

model Transaction {
    id Int @id @default(autoincrement())

    amount Float

    transactionType String // 'credit' or 'debit'

    description String?

    date DateTime

    account Account @relation(fields: [accountId], references: [id])

    accountId Int
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum ClaimStatusType {
    INPUT
    PENDING
    APPROVED
    REJECTED
    RELEASE
    PAID
    COMPLETED
    CANCELLED
    REOPEN
}

enum TransactionType {
    CREDIT
    DEBIT
}
