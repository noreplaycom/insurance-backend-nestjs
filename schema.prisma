//----------------------------------------BASE-------------------------

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator fake_data {
    provider = "prisma-generator-fake-data"
    output   = "./fake-data.ts"
}

generator nestgraphql {
    provider                              = "node node_modules/prisma-nestjs-graphql"
    output                                = "../src/@generated"
    reExport                              = Single
    fields_Validator_from                 = "class-validator"
    fields_Validator_input                = true
    requireSingleFieldsInWhereUniqueInput = true
    emitSingle                            = true
    emitCompiled                          = true
    purgeOutput                           = true
    noTypeId                              = true
}

//-----------------------------------------------------------------

model User {
    //-----------------------------scalars-------------------------
    id Int @id @default(autoincrement())

    ///Nama Lengkap
    fullName String

    email String @unique

    emailVerifiedAt DateTime?

    password String

    /// @HideField({ output: false, input: true })
    ///Tgl.Masuk Peserta
    createdAt DateTime @default(now())

    /// @HideField({ output: false, input: true })
    updatedAt DateTime @updatedAt

    deletedAt DateTime? //implement softdelete

    //-------------------------- 1 relations --------------------------------

    role Role @relation(fields: [roleId], references: [id])

    roleId Int

    participant Participant?

    participantId Int?

    //-------------------------- m relations --------------------------------

    claimsInput Claim[]

    claimActions ClaimStatus[]

    @@map("users")
}

model Role {
    id Int @id @default(autoincrement())

    name String // E.g., 'superuser', 'analyst', 'group leader'

    permissions Permission[]

    users User[]

    @@map("roles")
}

enum Permission {
    CREATE_CLAIM
    APPROVE_CLAIM
    REJECT_CLAIM
    READ_CLAIM
    UPDATE_CLAIM
    UPDATE_FINANCIAL_TRANSFER
}

model Participant {
    //-------------------------- scalars --------------------------------

    ///Jenis Kelamin
    gender Gender

    ///Tanggal Lahir
    birthDate DateTime

    // age Int //tidak perlu disimpan ke db

    ///Nomer Kartu tanda Penduduk
    nationalId String

    ///Nomer kartu Keluarga
    familyCardNumber String

    ///Nomer NPWP
    taxId String?

    ///Aktif/Non Aktif:	Status Kepesertaan Aktif/non aktif
    isActive Boolean

    // ///Nomer peserta (jika Pensiunan menggunakan -1, Pasangan -2, Yatim -3, 6 bulan -4)
    // participantNumber String

    //-------------------------- 1 relations --------------------------------

    ///Pensiunan,Pasangan, Yatim, Janda/duda 6 bulan
    status ParticipantStatus

    user User @relation(fields: [userId], references: [id])

    userId Int @id

    ///Anggota keluarga dari
    relation Participant? @relation("ParticipantRelation", fields: [relationId], references: [userId])

    relationId Int?

    bankAccount BankAccount?

    bankAccountId Int

    //-------------------------- m relations --------------------------------

    claims Claim[]

    employments Employment[]

    contactInfos ContactInfo[]

    programParticipations ProgramParticipation[]

    balances Account[]

    ///Anggota keluarga dari
    Participant Participant[] @relation("ParticipantRelation")
}

enum ParticipantStatus {
    PENSIUNAN
    PASANGAN
    YATIM
    JANDADUDA6BULAN
}

enum Position {
    AMGR
    AVP
    PGD
    MGR
    SASST
    VP
    SAVP
    SMGR
    SAMGR
    ASST
}

model ContactInfo {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    telp String

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

    deletedAt DateTime?

    //-------------------------- 1 relations --------------------------------

    participant Participant @relation(fields: [participantId], references: [userId])

    participantId Int

    address Address @relation(fields: [addressId], references: [id])

    addressId Int
}

model Address {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    ///Alamat
    address String

    ///Kota
    city City @relation(fields: [cityId], references: [id])

    ///Kota
    cityId Int

    ///Kode Pos
    postalCode String

    //-------------------------- scalars --------------------------------

    ContactInfo ContactInfo[]
}

model City {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    ///Nama Kota
    name String

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

    //-------------------------- m relations --------------------------------

    address Address[]
}

model BankAccount {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    ///No. Rekening	Nomer Rekening Penerimaan Manfaat Pensiun
    accountNumber Float

    ///Rekening a/n.	Nama pada rekening bank
    accountName String

    //-------------------------- 1 relations --------------------------------

    participant Participant @relation(fields: [participantId], references: [userId])

    participantId Int @unique
}

model Employment {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    //-------------------------- 1 relations --------------------------------

    ///Jenjang Jabatan terakhir
    employmentPosition Position

    participant Participant @relation(fields: [participantId], references: [userId])

    participantId Int

    branch Branch @relation(fields: [branchId], references: [id])

    branchId Int

    group Group? @relation(fields: [groupId], references: [id])

    groupId Int

    region Region? @relation(fields: [regionId], references: [id])

    regionId Int
}

model Branch {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    ///Nama Cabang
    name String

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

    //-------------------------- m relations --------------------------------

    employment Employment[]

    claimFinancial ClaimFinancial[]
}

model Group {
    //-------------------------- scalars --------------------------------
    id Int @id @default(autoincrement())

    name String

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

    //-------------------------- m relations --------------------------------

    employment Employment[]
}

model Region {
    //-------------------------- scalars --------------------------------
    id Int @id @default(autoincrement())

    name String

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

    //-------------------------- m relations --------------------------------
    employment Employment[]
}

model ProgramParticipation {
    //-------------------------- scalars --------------------------------

    ///Nopol:	Nomer Polish
    id Int @id @default(autoincrement())

    ///No.BPJS/ASKES: Nomer kartu BPJS
    bpjsNumber String?

    ///Keterangan Non Aktif:	keterangan perihal penonaktifan
    nonActiveReason String?

    ///Tgl. Efektif: Tanggal mulai ikut program Fasilitas Kesehatan
    effectiveDate DateTime

    ///Tgl Non Aktif:	tanggal penonaktifan peserta
    nonActiveDate DateTime?

    //-------------------------- 1 relations --------------------------------

    participant Participant @relation(fields: [participantId], references: [userId])

    participantId Int

    ///Dana
    funding Account @relation(fields: [fundingId], references: [id])

    ///Nomor Dana
    fundingId Int

    Program Program? @relation(fields: [programId], references: [id])

    programId Int?
}

model Program {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    ///Nama Program
    name ApplicationType

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

    deletedAt DateTime?

    ///Plafon Santunan:	Plafon Santnan Harian Rawat Inap
    allowanceCeiling Float

    //-------------------------- 1 relations --------------------------------

    ///KELAS: Kelas sesuai Jenjab I=Rp.1.250.000 II=Rp.1.000.000  III= Rp.750.000 
    class Class

    ///Plan	PlanType = jenis Rawat inap atau disingkat RI
    planType PlanType

    ///Maksimal biaya perawatan 
    maxAllowance Float

    //-------------------------- m relations --------------------------------

    programParticipations ProgramParticipation[]
}

enum PlanType {
    RAWAT_INAP
    RAWAT_JALAN
}

///KELAS: Kelas sesuai Jenjab I=Rp.1.250.000 II=Rp.1.000.000  III= Rp.750.000 
enum Class {
    I
    II
    III
}

model Claim {
    //-------------------------- scalars --------------------------------

    ///Nok:	Nomer Register Klaim
    id String @id @default(cuid())

    //orderNumber  String //tidak perlu nomor urut

    ///Reklaim:	Keterangan untuk klaim ulang
    reclaim String?

    ///TProses Pengajuan:	Tanggal Proses pengajuan
    processDate DateTime?

    ///Tklaim:	Tanggal Klaim
    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

    deletedAt DateTime?

    //-------------------------- 1 relations --------------------------------

    ///Stat. Admedika:	Status Admedika
    admedicaStatus AdmedicaStatus

    ///Prsh:	Perusahaan
    company Company @relation(fields: [companyId], references: [id])

    ///Prsh:	Perusahaan
    companyId Int

    channel ClaimChannel

    participant Participant @relation(fields: [participantId], references: [userId])

    participantId Int

    claimFinancials ClaimFinancial @relation(fields: [claimFinancialId], references: [id])

    claimFinancialId Int @unique

    claimProcesses ClaimProcess @relation(fields: [claimProcessId], references: [id])

    claimProcessId Int @unique

    claimDiagnoses ClaimDiagnosis @relation(fields: [claimDiagnosisId], references: [id])

    claimDiagnosisId Int @unique

    diseases Disease? @relation(fields: [diseaseId], references: [id])

    diseaseId Int?

    clinics Clinic? @relation(fields: [clinicId], references: [id])

    clinicId Int?

    users User? @relation(fields: [userId], references: [id])

    userId Int?

    claimTypes ClaimType? @relation(fields: [claimTypeId], references: [id])

    claimTypeId Int?

    //-------------------------- m relations --------------------------------

    documents Document[]

    tags Tag[]

    claimStatuses ClaimStatus[]
}

enum ClaimChannel {
    REGULER
    WA
    EMAIL
}

model Document {
    //-------------------------- scalars --------------------------------

    id String @id @default(cuid())

    name String

    path String

    size Int

    printCount Int

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt
    //-------------------------- 1 relations --------------------------------

    source DocumentSource

    type DocumentType

    claim Claim @relation(fields: [claimId], references: [id])

    claimId String
}

enum DocumentSource {
    UPLOADED
    GENERATED
}

enum DocumentType {
    CLAIM_FORM
    REJECTION_LETTER
    GUARANTEE_LETTER
    RECAP
    EXPEDITION
    TRANSFER
}

model Tag {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    name String

    color Color

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt

    //-------------------------- m relations --------------------------------

    Claims Claim[]
}

enum Color {
    WHITE
    BLUE
    RED
    YELLOW
    GREEN
}

model Company {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    name String

    //-------------------------- m relations --------------------------------

    claims Claim[]

    createdAt DateTime @default(now())

    updatedAt DateTime @updatedAt
}

model ClaimType {
    id Int @id @default(autoincrement())

    type ApplicationType

    ///Jenis:	Jenis Produk Bantuan
    jenis String

    ///Jenis RI:	Hospital Cash Plan
    jenisRI String

    ///Plan	Plan = jenis Rawat inap atau disingkat RI
    plan String

    claimPeriod Int // Number of days

    conditions String

    claims Claim[]
}

enum ApplicationType {
    SANTUNAN_HARIAN_RAWAT_INAP
    BANTUAN_BIAYA_CUCI_DARAH
    BANTUAN_KURSI_RODA
    BANTUAN_WALKER
    BANTUAN_IGD_UGD
    BANTUAN_RAWAT_INAP
}

enum AdmedicaStatus {
    NON_ADMEDICA
    ADMEDICA
}

model ClaimFinancial {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    ///Aju:	Jumlah nominal klaim diajukan
    requestedAmount Float

    ///Bayar:	Jumlah nominal klaim dibayar
    paidAmount Float?

    ///Tolak:	Jumlah Nominal Klaim ditolak
    rejectedAmount Float?

    ///TProses Transaksi:	Tanggal Proses Transaksi
    transactionProcessDate DateTime?

    ///Transfer:	Tanggal Transfer
    transferDate DateTime?

    //-------------------------- 1 relations --------------------------------

    ///Cabang: Cabang Pembayar Pensiun
    branchPayee Branch @relation(fields: [branchId], references: [id])

    claim Claim?

    claimId String @unique

    ///Cabang: Cabang Pembayar Pensiun
    branchId Int
}

model ClaimProcess {
    //-------------------------- scalars --------------------------------
    id Int @id @default(autoincrement())

    ///Tmulairawat	Tanggal mulai Rawat
    startTreatment DateTime

    ///Takhirrawat	Tanggal akhir rawat
    endTreatment DateTime

    ///Tekspedisi	Tanggal ekspedisi
    expeditionDate DateTime

    incomingNumber String

    ///Ket.Pengajuan:	Keterangan konfirmasi
    submissionNote String

    ///Keterangan:	isi keterangan 
    description String

    ///Ket.Tambahan	keterangan tambahan
    additionalNote String

    rejectionLetterNumber String?

    rejectionLetterDate DateTime?

    recapNumber String

    guaranteeLetterNumber String

    //-------------------------- 1 relations --------------------------------

    claim Claim?

    claimId String @unique
}

model ClaimStatus {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    rejectionReason String?

    createdAt DateTime @default(now())

    //-------------------------- 1 relations --------------------------------

    status ClaimStatusType

    user User @relation(fields: [userId], references: [id])

    userId Int

    claim Claim @relation(fields: [claimId], references: [id])

    claimId String
}

model ClaimDiagnosis {
    id Int @id @default(autoincrement())

    disease Disease @relation(fields: [diseaseId], references: [id])

    diseaseId Int

    claim Claim?

    claimId Int @unique
}

model Disease {
    id Int @id @default(autoincrement())

    kodePenyakit String

    namaPenyakit String

    groupDiagnosa String

    penggolonganDiagnosa String

    claims Claim[]

    ClaimDiagnosis ClaimDiagnosis[]
}

model Clinic {
    id Int @id @default(autoincrement())

    kodeKlinik String

    namaKlinik String

    claims Claim[]
}

model Account {
    //Nomer Dana
    id Int @id @default(autoincrement())

    ///Sisa Plafon:	Sisa Plafon Santunan Harian Rawat Inap
    currentBalance Float

    participant Participant @relation(fields: [participantId], references: [userId])

    participantId Int

    transactions Transaction[]

    programParticipation ProgramParticipation[]
}

model Transaction {
    id Int @id @default(autoincrement())

    amount Float

    transactionType String // 'credit' or 'debit'

    description String?

    date DateTime

    account Account @relation(fields: [accountId], references: [id])

    accountId Int
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum ClaimStatusType {
    INPUT
    PENDING
    APPROVED
    REJECTED
    RELEASE
    PAID
    COMPLETED
    CANCELLED
    REOPEN
}

enum TransactionType {
    CREDIT
    DEBIT
}
