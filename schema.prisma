//----------------------------------------BASE-------------------------

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator fake_data {
    provider = "prisma-generator-fake-data"
    output   = "./fake-data.ts"
}

generator nestgraphql {
    provider                              = "node node_modules/prisma-nestjs-graphql"
    output                                = "../src/@generated"
    reExport                              = Single
    fields_Validator_from                 = "class-validator"
    fields_Validator_input                = true
    requireSingleFieldsInWhereUniqueInput = true
    emitSingle                            = true
    emitCompiled                          = true
    purgeOutput                           = true
    noTypeId                              = true
}

//-----------------------------------------------------------------

model User {
    //-----------------------------scalars-------------------------
    id Int @id @default(autoincrement())

    fullName String

    email String @unique

    emailVerifiedAt DateTime?

    password String

    /// @HideField({ output: false, input: true })
    ///Tgl.Masuk Peserta
    createdAt DateTime @default(now())

    /// @HideField({ output: false, input: true })
    updatedAt DateTime @updatedAt

    deletedAt DateTime? //implement softdelete

    //-------------------------- 1 relations --------------------------------

    role Role @relation(fields: [roleId], references: [id])

    roleId Int

    participant Participant? @relation(fields: [participantId], references: [userId])

    participantId Int?

    //-------------------------- m relations --------------------------------

    claimsInput Claim[]

    @@map("users")
}

model Role {
    id          Int      @id @default(autoincrement())
    name        String // E.g., 'superuser', 'analyst', 'group leader'
    permissions String[] // Array of permissions like 'create-claim', 'approve-claim'
    users       User[]

    @@map("UserRoles")
}

model Participant {
    //-------------------------- scalars --------------------------------

    ///Nomer peserta (jika Pensiunan menggunakan -1, Pasangan -2, Yatim -3, 6 bulan -4)
    participantNumber String

    gender Gender

    ///Tanggal Lahir
    birthDate DateTime

    // age Int //tidak perlu disimpan ke db

    ///Nomer Kartu tanda Penduduk
    nationalID String

    ///Nomer kartu Keluarga
    familyCardNumber String

    ///Nomer NPWP
    taxID String?

    ///Pensiunan,Pasangan, Yatim, Janda/duda 6 bulan
    participantStatus String

    //-------------------------- 1 relations --------------------------------

    ///Aktif/Non Aktif:	Status Kepesertaan Aktif/non aktif
    isActive Boolean

    user User @relation(fields: [userId], references: [id])

    userId Int @id

    //-------------------------- m relations --------------------------------

    claims Claim[]

    processingSteps ProcessingStep[]

    employments Employment[]

    contactInfos ContactInfo[]

    bankAccounts BankAccount[]

    programParticipations ProgramParticipation[]

    balances Balance[]
}

enum ParticipantStatus {
    PENSIUNAN
    PASANGAN
    YATIM
    JANDADUDA6BULAN
}

enum Position {
    AMGR
    AVP
    PGD
    MGR
    SASST
    VP
    SAVP
    SMGR
    SAMGR
    ASST
}

model Program {
    id                    Int                    @id @default(autoincrement())
    programType           String
    fundingNumber         String
    programParticipations ProgramParticipation[]
}

model ContactInfo {
    id            Int         @id @default(autoincrement())
    telp          String
    participant   Participant @relation(fields: [participantId], references: [userId])
    participantId Int
    address       Address     @relation(fields: [addressId], references: [id])
    addressId     Int
}

model Address {
    id          Int           @id @default(autoincrement())
    alamat      String
    kota        String
    kodePos     String
    contactInfo ContactInfo[]
}

model BankAccount {
    id            Int         @id @default(autoincrement())
    noRekening    String
    rekeningAn    String
    participant   Participant @relation(fields: [participantId], references: [userId])
    participantId Int
}

model Employment {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    //-------------------------- 1 relations --------------------------------

    ///Jenjang Jabatan terakhir
    employmentPosition Position

    participant Participant @relation(fields: [participantId], references: [userId])

    participantId Int

    branch Branch @relation(fields: [branchId], references: [id])

    branchId Int

    group Group? @relation(fields: [groupId], references: [id])

    groupId Int

    region   Region? @relation(fields: [regionId], references: [id])
    regionId Int
}

model Branch {
    id   Int    @id @default(autoincrement())
    name String
    // Other fields specific to branches
}

model Group {
    id   Int    @id @default(autoincrement())
    name String
    // Other fields specific to groups
}

model Region {
    id   Int    @id @default(autoincrement())
    name String
    // Other fields specific to regions
}

model ProgramParticipation {
    ///Nopol:	Nomer Polish
    id Int @id @default(autoincrement())

    plan String

    planPerHari Float

    ///KELAS: Kelas sesuai Jenjab I=Rp.1.250.000 II=Rp.1.000.000  III= Rp.750.000 
    class String

    ///Tgl. Efektif: Tanggal mulai ikut program Fasilitas Kesehatan
    effectiveDate DateTime

    ///No.BPJS/ASKES: Nomer kartu BPJS
    bpjsNumber String?

    participant Participant @relation(fields: [participantId], references: [userId])

    participantId Int

    program Program @relation(fields: [programId], references: [id])

    programId Int

    tanggalNonaktif DateTime?

    ketNonAktif String?
}

model Claim {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    //orderNumber  String //tidak perlu nomor urut

    //-------------------------- 1 relations --------------------------------

    ///Prsh:	Perusahaan
    company Company @relation(fields: [companyId], references: [id])

    ///Prsh:	Perusahaan
    companyId Int

    participant Participant @relation(fields: [participantId], references: [userId])

    participantId Int

    hospitalizations Hospitalization[] @relation(fields: [hospitalizationId], references: [id])

    hospitalizationId Int

    claimStatuses ClaimStatus[] @relation(fields: [claimStatusId], references: [id])

    claimStatusId Int

    claimFinancials ClaimFinancial[] @relation(fields: [claimFinancialId], references: [id])

    claimFinancialId Int

    claimProcesses ClaimProcess[] @relation(fields: [claimProcessId], references: [id])

    claimProcessId Int

    claimDiagnoses ClaimDiagnosis[] @relation(fields: [claimDiagnosisId], references: [id])

    claimDiagnosisId Int

    diseases Disease? @relation(fields: [diseaseId], references: [id])

    diseaseId Int?

    clinics Clinic? @relation(fields: [clinicId], references: [id])

    clinicId Int?

    users User? @relation(fields: [userId], references: [id])

    userId Int?

    claimTypes ClaimType? @relation(fields: [claimTypeId], references: [id])

    claimTypeId Int?

    //-------------------------- m relations --------------------------------

    processingSteps ProcessingStep[]
}

model Company {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    name String

    //-------------------------- m relations --------------------------------

    claims Claim[]
}

model ClaimType {
    id            Int           @id @default(autoincrement())
    type          String // E.g., 'daily hospitalization', 'hemodialysis'
    maxAllowance  Float
    claimPeriod   Int // Number of days
    conditions    String
    participant   Participant   @relation(fields: [participantId], references: [userId])
    participantId Int
    claims        Claim[]
    ClaimStatus   ClaimStatus[]
}

model ClaimStatus {
    id              Int       @id @default(autoincrement())
    admedikaStatus  String
    claimStatus     String
    reclaim         String
    rejectionReason String?
    claimType       ClaimType @relation(fields: [claimTypeId], references: [id])
    claimTypeId     Int
    status          String // E.g., 'pending', 'approved', 'rejected'
    claim           Claim     @relation(fields: [claimId], references: [id])
    claimId         Int
}

model ClaimFinancial {
    id               Int    @id @default(autoincrement())
    ///Cabang: Cabang Pembayar Pensiun
    branchPayee      Branch
    requestedAmount  Float
    paidAmount       Float
    rejectedAmount   Float
    totalClaim       Float
    allowanceCeiling Float
    submissionCount  Int
    remainingCeiling Float
    claim            Claim  @relation(fields: [claimId], references: [id])
    claimId          Int
}

model ClaimProcess {
    id                     Int       @id @default(autoincrement())
    startTreatment         DateTime
    endTreatment           DateTime
    treatmentMonth         String
    treatmentYear          Int
    claimDate              DateTime
    expeditionDate         DateTime
    transferDate           DateTime
    submissionProcessDate  DateTime
    transactionProcessDate DateTime
    incomingNumber         String
    submissionNote         String
    description            String
    additionalNote         String
    rejectionLetterNumber  String?
    rejectionLetterDate    DateTime?
    recapNumber            String
    guaranteeLetterNumber  String
    claim                  Claim     @relation(fields: [claimId], references: [id])
    claimId                Int
}

model ProcessingStep {
    id            Int         @id @default(autoincrement())
    step          String // E.g., 'input', 'completeness check', 'approval'
    role          String // E.g., 'analyst', 'group leader'
    action        String // E.g., 'verify', 'approve', 'reject'
    participant   Participant @relation(fields: [participantId], references: [id])
    participantId Int
    claim         Claim       @relation(fields: [claimId], references: [id])
    claimId       Int
}

model ClaimDiagnosis {
    id        Int     @id @default(autoincrement())
    disease   Disease @relation(fields: [diseaseId], references: [id])
    diseaseId Int
    claim     Claim   @relation(fields: [claimId], references: [id])
    claimId   Int
}

model Hospitalization {
    id      Int    @id @default(autoincrement())
    jenisRI String
    plan    String
    claim   Claim  @relation(fields: [claimId], references: [id])
    claimId Int
}

model Disease {
    id                   Int              @id @default(autoincrement())
    kodePenyakit         String
    namaPenyakit         String
    groupDiagnosa        String
    penggolonganDiagnosa String
    claims               Claim[]
    ClaimDiagnosis       ClaimDiagnosis[]
}

model Clinic {
    id         Int     @id @default(autoincrement())
    kodeKlinik String
    namaKlinik String
    claims     Claim[]
}

model Balance {
    id             Int           @id @default(autoincrement())
    currentBalance Float
    participant    Participant   @relation(fields: [participantId], references: [id])
    participantId  Int
    transactions   Transaction[]
}

model Transaction {
    id              Int      @id @default(autoincrement())
    amount          Float
    transactionType String // 'credit' or 'debit'
    description     String?
    date            DateTime
    balance         Balance  @relation(fields: [balanceId], references: [id])
    balanceId       Int
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum RoleName {
    SUPERUSER
    ANALYST
    GROUP_LEADER
    // Add other roles as necessary
}

enum ClaimStatusType {
    PENDING
    APPROVED
    REJECTED
}

enum TransactionType {
    CREDIT
    DEBIT
}

enum Step {
    INPUT
    COMPLETENESS_CHECK
    APPROVAL
}

enum RoleType {
    SUPERUSER
    ANALYST
    GROUP_LEADER
}

enum ActionType {
    VERIFY
    APPROVE
    REJECT
}
