//Architecture Design By Dikki Setiawan - DSAA Group
//See the visual ER Diagram here https://prisma-erd.simonknott.de/

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator fake_data {
    provider = "prisma-generator-fake-data"
    output   = "./fake-data.ts"
}

generator nestgraphql {
    provider                              = "node node_modules/prisma-nestjs-graphql"
    output                                = "../src/@generated"
    reExport                              = Single
    fields_Validator_from                 = "class-validator"
    fields_Validator_input                = true
    requireSingleFieldsInWhereUniqueInput = true
    emitSingle                            = true
    emitCompiled                          = true
    purgeOutput                           = true
    noTypeId                              = true
}

//-----------------------------------------------------------------

model User {
    //-----------------------------scalars-------------------------
    /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
    id String @id @default(uuid())

    /// @Validator.MinLength(2)
    /// @Validator.MaxLength(20)
    /// @Validator.IsAlpha()
    /// @Validator.IsNotEmpty()
    ///Nama Lengkap
    fullName String

    /// @Validator.IsEmail()
    email String @unique

    /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
    emailVerifiedAt DateTime?

    /// @Validator.MinLength(6)
    /// @Validator.MaxLength(15)
    /// @Validator.IsAlphanumeric()
    password String? @default("123456")

    /// @Validator.IsUrl({ require_protocol: true })
    profilePictureUrl String?

    /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
    ///Tgl.Masuk Peserta
    createdAt DateTime @default(now())

    /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
    updatedAt DateTime @updatedAt

    /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
    deletedAt DateTime? //implement softdelete

    //-------------------------- 1 relations --------------------------------

    ///catatan untuk web frontend, jangan menggunakan role.name sebagai identifikasi role, melainkan gunakan role.rolepermissions untuk melihat izin apa aja yang diberikan kepada user
    role Role @relation(fields: [roleId], references: [id], onDelete: SetDefault)

    /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
    roleId Int @default(0) //default participant

    participant Participant?

    //-------------------------- m relations --------------------------------

    /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
    claimsInput Claim[]

    /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
    claimActions ClaimStatus[] @relation("statusUpdatedBy")

    /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
    announcementCreated Announcement[]

    /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
    notification Notification[]

    /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
    ///claim-claim yang menunggu aksi dari user
    claimsOnWait Claim[] @relation("waitingfor")

    /// @HideField({ match: ['UserCreate*Input','UserUpdate*Input']})
    documentPrints Document[] @relation("printedby")

    @@map("users")
}

model Role {
    //-------------------------- scalars --------------------------------
    id Int @id @default(autoincrement())

    /// E.g., 'superuser', 'analyst', 'group leader'
    name String

    description String?

    // ///Jika orderLevel dia adalah 9999 maka     dia adalah superuser
    // orderLevel Int @default(0)

    higherLevelThan Role? @relation("level", fields: [higherLevelThanId], references: [id])

    higherLevelThanId Int?

    roleType RoleType? @default(PARTICIPANT)

    //-------------------------- m relations --------------------------------

    rolePermissions RolePermission[]

    users User[]

    lowerLevelThan Role[] @relation("level")

    @@map("roles")
}

enum RoleType {
    SUPERUSER
    PARTICIPANT
    ADMIN
}

model RolePermission {
    id     Int  @id @default(autoincrement())
    //-------------------------- scalars --------------------------------
    roleId Int?

    //-------------------------- 1 relations --------------------------------
    role Role? @relation(fields: [roleId], references: [id])

    permission Permission
}

enum Permission {
    CREATE_CLAIM
    UPDATE_CLAIM
    UPDATE_CLAIM_STATUS_TO_APPROVED
    UPDATE_CLAIM_STATUS_TO_CONDITIONAL_REJECT
    UPDATE_CLAIM_STATUS_TO_UNCONDITIONAL_REJECT
    UPDATE_CLAIM_STATUS_TO_RELEASED
    UPDATE_CLAIM_STATUS_TO_PAID
    UPDATE_CLAIM_STATUS_TO_COMPLETED
    DELETE_CLAIM_DOCUMENT
    CREATE_CLAIM_DOCUMENT
    IMPORT_CLAIM
    EXPORT_CLAIM
    CREATE_PARTICIPANT
    UPDATE_PARTICIPANT
    IMPORT_PARTICIPANT
    EXPORT_PARTICIPANT
}

model Participant {
    //-------------------------- scalars --------------------------------

    ///Jenis Kelamin
    gender Gender

    ///Tanggal Lahir
    birthDate DateTime

    // age Int //tidak perlu disimpan ke db

    ///Nomer Kartu tanda Penduduk
    // nationalId String

    // ///Nomer kartu Keluarga
    // familyCardNumber String

    // ///Nomer NPWP
    // taxId String?

    ///Aktif/Non Aktif:	Status Kepesertaan Aktif/non aktif
    isActive Boolean

    // ///Nomer peserta (jika Pensiunan menggunakan -1, Pasangan -2, Yatim -3, 6 bulan -4)
    // participantNumber String

    //-------------------------- 1 relations --------------------------------

    ///Pensiunan,Pasangan, Yatim, Janda/duda 6 bulan
    status ParticipantStatus

    user User @relation(fields: [userId], references: [id])

    userId String @id

    ///Anggota keluarga dari
    relation Participant? @relation("ParticipantRelation", fields: [relationId], references: [userId])

    relationId String?

    employment Employment @relation(fields: [employmentId], references: [id])

    employmentId Int @unique

    bankAccount BankAccount @relation(fields: [bankAccountId], references: [id])

    bankAccountId Int @unique

    contactInfo ContactInfo @relation(fields: [contactInfoId], references: [id])

    contactInfoId Int @unique

    programParticipation ProgramParticipation @relation(fields: [programParticipationId], references: [id])

    programParticipationId Int @unique

    //-------------------------- m relations --------------------------------

    /// @HideField({ match: ['ParticipantCreate*Input','ParticipantUpdate*Input']})
    claims Claim[]

    ///Anggota keluarga dari
    relations Participant[] @relation("ParticipantRelation")

    @@map("participants")
}

enum ParticipantStatus {
    PENSIUNAN
    PASANGAN
    YATIM
    JANDADUDA6BULAN
}

enum Position {
    AMGR
    AVP
    PGD
    MGR
    SASST
    VP
    SAVP
    SMGR
    SAMGR
    ASST
}

model ContactInfo {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    phones phone[]

    /// @HideField({ match: ['ContactInfoCreate*Input','ContactInfoUpdate*Input']})
    createdAt DateTime @default(now())

    /// @HideField({ match: ['ContactInfoCreate*Input','ContactInfoUpdate*Input']})
    updatedAt DateTime @updatedAt

    /// @HideField({ match: ['ContactInfoCreate*Input','ContactInfoUpdate*Input']})
    deletedAt DateTime?

    //-------------------------- 1 relations --------------------------------

    participant Participant?

    address Address @relation(fields: [addressId], references: [id])

    addressId Int
}

model phone {
    //-------------------------- scalars --------------------------------

    /// @Validator.IsNotEmpty()
    /// @Validator.MinLength(5)
    number Float @id

    //-------------------------- 1 relations --------------------------------

    /// @HideField({ match: ['phoneNumberCreate*Input','phoneNumberUpdate*Input']})
    contactInfo ContactInfo @relation(fields: [contactInfoId], references: [id])

    /// @HideField({ match: ['phoneNumberCreate*Input','phoneNumberUpdate*Input']})
    contactInfoId Int
}

///Provinsi
model Province {
    id     Int    @id @default(autoincrement())
    /// @Validator.MinLength(2)
    /// @Validator.IsNotEmpty()
    name   String @unique
    /// @HideField()   
    cities City[]
}

//Make CRUD Available
///Kota
model City {
    id         Int        @id @default(autoincrement())
    /// @Validator.MinLength(2)
    /// @Validator.IsNotEmpty()
    /// Nama Kota
    name       String
    province   Province   @relation(fields: [provinceId], references: [id])
    provinceId Int
    districts  District[]
}

//Make CRUD Available
///Kecamatan
model District {
    id           Int           @id @default(autoincrement())
    /// @Validator.MinLength(2)
    /// @Validator.IsNotEmpty()
    /// Nama Kecamatan
    name         String
    city         City          @relation(fields: [cityId], references: [id])
    cityId       Int
    subdistricts Subdistrict[]
}

///Kelurahan
model Subdistrict {
    id         Int       @id @default(autoincrement())
    ///Nama Kelurahan
    name       String
    district   District  @relation(fields: [districtId], references: [id])
    districtId Int
    /// @Validator.MinLength(3)
    /// @Validator.IsPostalCode('ID')
    /// Kode Pos
    postalCode String
    /// @HideField()
    address    Address[] @relation("SubdistrictAddress")
}

model Address {
    //-------------------------- scalars --------------------------------
    /// @HideField({ match: ['AddressCreate*Input','AddressUpdate*Input']})
    id Int @id @default(autoincrement())

    ///Alamat
    address String

    /// @Validator.IsNotEmpty()
    subdistrict   Subdistrict @relation("SubdistrictAddress", fields: [subdistrictId], references: [id])
    // @HideField({ match: 'AddressCreate*Input' })
    subdistrictId Int

    //-------------------------- scalars --------------------------------

    ContactInfo ContactInfo[]
}

model BankAccount {
    //-------------------------- scalars --------------------------------

    /// @HideField({ match: ['BankAccountCreate*Input','BankAccountUpdate*Input']})
    id Int @id @default(autoincrement())

    ///No. Rekening	Nomer Rekening Penerimaan Manfaat Pensiun
    accountNumber Float

    ///Rekening a/n.	Nama pada rekening bank
    accountName String

    //-------------------------- 1 relations --------------------------------
    /// @HideField({ match: ['BankAccountCreate*Input','BankAccountUpdate*Input']})
    participant Participant?
}

model Employment {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    //-------------------------- 1 relations --------------------------------

    ///Jenjang Jabatan terakhir
    employmentPosition Position

    /// @HideField({ match: ['EmploymentCreate*Input','EmploymentUpdate*Input']})
    participant Participant?

    branch Branch @relation(fields: [branchId], references: [id])

    branchId Int

    group Group? @relation(fields: [groupId], references: [id])

    groupId Int?

    region Region? @relation(fields: [regionId], references: [id])

    regionId Int?
}

model Branch {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    ///Nama Cabang
    name String

    /// @HideField({ match: ['BranchCreate*Input','BranchUpdate*Input']})
    createdAt DateTime @default(now())

    /// @HideField({ match: ['BranchCreate*Input','BranchUpdate*Input']})
    updatedAt DateTime @updatedAt

    //-------------------------- m relations --------------------------------

    employment Employment[]

    claimFinancial ClaimFinancial[]
}

model Group {
    //-------------------------- scalars --------------------------------
    id Int @id @default(autoincrement())

    name String

    /// @HideField({ match: ['GroupCreate*Input','GroupUpdate*Input']})
    createdAt DateTime @default(now())

    /// @HideField({ match: ['GroupCreate*Input','GroupUpdate*Input']})
    updatedAt DateTime @updatedAt

    //-------------------------- m relations --------------------------------

    employment Employment[]
}

model Region {
    //-------------------------- scalars --------------------------------
    id Int @id @default(autoincrement())

    name String

    /// @HideField({ match: ['RegionCreate*Input','RegionUpdate*Input']})
    createdAt DateTime @default(now())

    /// @HideField({ match: ['RegionCreate*Input','RegionUpdate*Input']})
    updatedAt DateTime @updatedAt

    //-------------------------- m relations --------------------------------
    employment Employment[]
}

model Announcement {
    //-------------------------- scalars --------------------------------
    id Int @id @default(autoincrement())

    title String

    content String

    imageUrl String?

    /// @HideField({ match: ['AnnouncementCreate*Input','AnnouncementUpdate*Input']})
    createdAt DateTime @default(now())

    /// @HideField({ match: ['AnnouncementCreate*Input','AnnouncementUpdate*Input']})
    updatedAt DateTime @updatedAt

    //-------------------------- 1 relations --------------------------------

    createdBy User @relation(fields: [createdById], references: [id])

    createdById String
}

model Notification {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    /// @HideField({ output: false, input: true })
    /// @Validator.IsNotEmpty()
    title String

    /// @HideField({ output: false, input: true })
    subtitle String

    /// @HideField({ output: false, input: true })
    /// @Validator.IsNotEmpty()
    content String

    isRead Boolean @default(false)

    isCleared Boolean @default(false)

    /// @HideField({ output: false, input: true })
    deepLink String?

    /// @HideField({ output: false, input: true })
    fcmToken String?

    /// @HideField({ match: ['NotificationCreate*Input','NotificationUpdate*Input']})
    createdAt DateTime @default(now())

    /// @HideField({ match: ['NotificationCreate*Input','NotificationUpdate*Input']})
    updatedAt DateTime @updatedAt

    //-------------------------- 1 relations --------------------------------
    /// @HideField({ match: ['NotificationCreate*Input','NotificationUpdate*Input']})
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    /// @HideField({ output: false, input: true })
    userId String
}

model ProgramParticipation {
    //-------------------------- scalars --------------------------------

    ///Nopol:	Nomer Polish
    id Int @id @default(autoincrement())

    ///No.BPJS/ASKES: Nomer kartu BPJS
    bpjsNumber String?

    ///Keterangan Non Aktif:	keterangan perihal penonaktifan
    nonActiveReason String?

    ///Tgl. Efektif: Tanggal mulai ikut program Fasilitas Kesehatan
    effectiveDate DateTime

    ///Tgl Non Aktif:	tanggal penonaktifan peserta
    nonActiveDate DateTime?

    santunanHarianRawatInapPlan SantunanHarianRawatInapPlan

    //-------------------------- 1 relations --------------------------------

    participant Participant?

    /// @HideField({ match: ['ProgramParticipationCreate*Input','ProgramParticipationUpdate*Input']})
    ///Dana
    funding Account? @relation(fields: [fundingId], references: [id])

    /// @HideField({ match: ['ProgramParticipationCreate*Input','ProgramParticipationUpdate*Input']})
    ///Nomor Dana
    fundingId Int?

    /// @HideField({ match: ['ProgramParticipationCreate*Input','ProgramParticipationUpdate*Input']})
    programParticipationToPrograms ProgramParticipationToPrograms[]
}

model ProgramParticipationToPrograms {
    //-------------------------- scalars --------------------------------
    description String?

    /// @HideField({ match: ['ProgramParticipationToProgramsCreate*Input','ProgramParticipationToProgramsUpdate*Input']})
    isAvailable Boolean

    /// @HideField({ match: ['ProgramParticipationToProgramsCreate*Input','ProgramParticipationToProgramsUpdate*Input']})
    ///Sisa penggunaan plafon saat ini
    allowanceCeilingRemaining Float

    /// @HideField({ match: ['ProgramParticipationToProgramsCreate*Input','ProgramParticipationToProgramsUpdate*Input']})
    allowanceCeilingRemainingLastResetDate DateTime?

    /// @HideField({ match: ['ProgramParticipationToProgramsCreate*Input','ProgramParticipationToProgramsUpdate*Input']})
    ///Sisa kesempatan klaim saat ini, namun tidak semua program memberlakukan quota penggunaan klaim
    allowanceQuotaRemaining Int?

    /// @HideField({ match: ['ProgramParticipationToProgramsCreate*Input','ProgramParticipationToProgramsUpdate*Input']})
    allowanceQuotaRemainingLastResetDate DateTime?

    /// @HideField({ match: ['ProgramParticipationToProgramsCreate*Input','ProgramParticipationToProgramsUpdate*Input']})
    /// allowanceCeiling & Quota Remaining LastUpdate
    updatedAt DateTime @updatedAt

    //-------------------------- 1 relations --------------------------------
    programParticipation ProgramParticipation @relation(fields: [programParticipationId], references: [id])

    /// @HideField({ match: ['ProgramParticipationToProgramsCreate*Input','ProgramParticipationToProgramsUpdate*Input']})
    programParticipationId Int

    /// @HideField({ match: ['ProgramParticipationToProgramsCreate*Input','ProgramParticipationToProgramsUpdate*Input']})
    program Program @relation(fields: [programId], references: [id])

    /// @HideField({ match: ['ProgramParticipationToProgramsCreate*Input','ProgramParticipationToProgramsUpdate*Input']})
    programId Int @unique

    claimPrograms ClaimProgram?

    //-------------------------- m relations --------------------------------

    @@id([programParticipationId, programId])
}

///Reference Document: https://rebrand.ly/d6i9uem
model Program {
    //-------------------------- scalars --------------------------------

    id Int @id @default(autoincrement())

    ///Nama Program/jenis program
    type ProgramType

    santunanHarianRawatInapPlan SantunanHarianRawatInapPlan?

    tambahanBantuanRawatInapType TambahanBantuanRawatInapType?

    // ///Jenis:	Jenis Produk Bantuan
    // jenis String

    // ///Jenis RI:	Hospital Cash Plan
    // jenisRI String

    ///misal 50% dari biaya UGD/IGD, Plafon per pasangan maksimal Rp. 1.500.000 /tahun 
    maxAllowancePercentage Int?

    ///Plafon Santunan, contoh KELAS: Kelas sesuai Jenjab I=Rp.1.250.000 II=Rp.1.000.000  III= Rp.750.000 
    allowanceCeiling Float

    ///Periode Santunan
    allowanceCeilingPeriod Period?

    ///Berapa kali? contoh: Plafon per orang maksimal Rp. 2.000.000 eenmaleg (hanya 1 kali) 
    ///contoh: Plafon per orang perminggu maksimal 2 kali kunjungan, per kunjunan maksimal Rp.700.000 
    allowanceQuota Int?

    ///Maksimal santunan [60] hari rawat inap/tahun/orang
    allowanceQuotaPeriod Period?

    ///Masa klaim [60] hari sejak keluar rumah sakit/tanggal kuitansi
    claimPeriodMax Int?

    ///Klaim ulang maksimal [60] hari sejak tanggal pemberitahuan
    reclaimPeriodMax Int?

    /// @HideField({ match: ['ProgramCreate*Input','ProgramUpdate*Input']})
    createdAt DateTime @default(now())

    /// @HideField({ match: ['ProgramCreate*Input','ProgramUpdate*Input']})
    updatedAt DateTime @updatedAt

    /// @HideField({ match: ['ProgramCreate*Input','ProgramUpdate*Input']})
    deletedAt DateTime?

    //-------------------------- 1 relations --------------------------------

    //-------------------------- m relations --------------------------------

    programParticipations ProgramParticipationToPrograms[]
}

enum TambahanBantuanRawatInapType {
    BPJS
    NON_BPJS
}

enum Period {
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
    ///Setiap dua tahun sekali
    BIENNIALLY
    ALLTIME
    EVENT
}

model Claim {
    //-------------------------- scalars --------------------------------

    /// @HideField({ match: ['ClaimCreate*Input','ClaimUpdate*Input']})
    ///Nok:	Nomer Register Klaim
    ///Nomor Sm	nomer register Surat masuk (Klaim melalui WA/Reguler/Exception/Email)
    id String @id @default(cuid())

    //orderNumber  String //tidak perlu nomor urut

    /// @HideField({ match: ['ClaimCreate*Input','ClaimUpdate*Input']})
    ///Tklaim:	Tanggal Klaim atau TProses Pengajuan:	Tanggal Proses pengajuan 
    createdAt DateTime @default(now())

    /// @HideField({ match: ['ClaimCreate*Input','ClaimUpdate*Input']})
    updatedAt DateTime @updatedAt

    /// @HideField({ match: ['ClaimCreate*Input','ClaimUpdate*Input']})
    deletedAt DateTime?

    //-------------------------- 1 relations --------------------------------

    ///Metode Klaim:	WA,E-mail,Reguler, Telepon
    channel ClaimChannel

    ///Stat. Admedika:	Status Admedika
    admedicaStatus AdmedicaStatus

    ///Prsh:	Perusahaan
    company String

    // ///Prsh:	Perusahaan
    // companyId Int

    /// @HideField({ match: ['ClaimUpdate*Input']})
    participant Participant @relation(fields: [participantId], references: [userId])

    /// @HideField({ match: ['ClaimUpdate*Input']})
    participantId String

    claimFinancials ClaimFinancial @relation(fields: [claimFinancialId], references: [id])

    claimFinancialId Int @unique

    claimProgram ClaimProgram @relation(fields: [claimProgramId], references: [id])

    claimProgramId Int @unique

    /// @HideField({ match: ['ClaimCreate*Input','ClaimUpdate*Input']})
    inputedBy User? @relation(fields: [inputedById], references: [id])

    /// @HideField({ match: ['ClaimCreate*Input','ClaimUpdate*Input']})
    inputedById String?

    /// @HideField({ match: ['ClaimCreate*Input','ClaimUpdate*Input']})    
    waitingFor User? @relation("waitingfor", fields: [waitingForId], references: [id])

    /// @HideField({ match: ['ClaimCreate*Input','ClaimUpdate*Input']})
    waitingForId String?

    //-------------------------- m relations --------------------------------

    tags Tag[]

    /// @HideField({ match: ['ClaimCreate*Input','ClaimUpdate*Input']})
    claimStatuses ClaimStatus[]
}

enum ClaimChannel {
    REGULER
    WA
    EMAIL
}

model Document {
    //-------------------------- scalars --------------------------------

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    ///Nodok:	Nomer Dokumen
    id String @id @default(cuid())

    ///Masukkan url file dokumen yang telah diupload
    uploadedFileUrl String?

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    ///Path:	Path file dokumen versi pdf, Hanya bisa satu kali input path tidak bisa diupdate
    pdfPath String?

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    ///Path:	Path file dokumen versi pdf, Hanya bisa satu kali input path tidak bisa diupdate
    docxPath String?

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    ///Ukuran:	Ukuran dokumen
    size Int

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    createdAt DateTime @default(now())

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    updatedAt DateTime @updatedAt
    //-------------------------- 1 relations --------------------------------

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    /// Sumber Dokumen
    source DocumentSource

    /// Jenis dokumen
    type DocumentType

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    /// Siapa saja yang telah mencetak dokumen ini
    printedby User[] @relation("printedby")

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    rejectionLetterOf ClaimStatus? @relation("rejectionLetter")

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    guaranteeLetterOf ClaimStatus? @relation("guaranteeLetter")

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    transactionLetterOf ClaimStatus? @relation("transactionLetter")

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    ///Perintah Pembukuan
    bookKeepingOrderOf ClaimStatus? @relation("bookKeepingOrder")

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    claimProgramm ClaimProgram? @relation(fields: [claimProgramId], references: [id])

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    claimProgramId Int?

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    invoiceProof InvoiceProof?

    /// @HideField({ match: ['DocumentCreate*Input','DocumentUpdate*Input']})
    transaction Transaction?
}

enum DocumentSource {
    UPLOADED
    GENERATED
}

enum DocumentType {
    INVOICE
    CLAIM_FORM
    REJECTION_LETTER
    GUARANTEE_LETTER
    RECAP
    EXPEDITION
    TRANSFER
}

model Tag {
    //-------------------------- scalars --------------------------------

    /// @HideField({ match: ['TagCreate*Input','TagUpdate*Input']})
    id Int @id @default(autoincrement())

    name String

    color Color

    /// Apakah pengecualian
    /// @HideField({ match: ['TagCreate*Input','TagUpdate*Input']})
    isException Boolean?

    /// @HideField({ match: ['TagCreate*Input','TagUpdate*Input']})
    createdAt DateTime @default(now())

    /// @HideField({ match: ['TagCreate*Input','TagUpdate*Input']})
    updatedAt DateTime @updatedAt

    //-------------------------- m relations --------------------------------

    /// @HideField({ match: ['TagCreate*Input','TagUpdate*Input']})
    claims Claim[]
}

enum Color {
    WHITE
    BLUE
    RED
    YELLOW
    GREEN
}

enum ProgramType {
    SANTUNAN_HARIAN_RAWAT_INAP
    BANTUAN_BIAYA_CUCI_DARAH
    BANTUAN_KURSI_RODA
    BANTUAN_WALKER
    BANTUAN_IGD_UGD
    BANTUAN_RAWAT_INAP
}

enum AdmedicaStatus {
    NON_ADMEDICA
    ADMEDICA
}

model ClaimFinancial {
    //-------------------------- scalars --------------------------------
    /// @HideField({ match: ['ClaimFinancialCreate*Input','ClaimFinancialUpdate*Input']})
    id Int @id @default(autoincrement())

    /// @HideField({ match: ['ClaimFinancialCreate*Input','ClaimFinancialUpdate*Input']})
    totalInvoiceProofAmount Float

    ///Aju:	Jumlah nominal klaim diajukan
    requestedAmount Float

    /// @HideField({ match: ['ClaimFinancialCreate*Input']})
    ///Bayar:	Jumlah nominal klaim dibayar
    paidAmount Float?

    /// @HideField({ match: ['ClaimFinancialCreate*Input']})
    ///Tolak:	Jumlah Nominal Klaim ditolak
    rejectedAmount Float?

    /// @HideField({ match: ['ClaimFinancialCreate*Input','ClaimFinancialUpdate*Input']})
    /// Saldo sebelum klaim dibayarkan
    previousBalance Float

    /// @HideField({ match: ['ClaimFinancialCreate*Input','ClaimFinancialUpdate*Input']})
    /// Saldo setelah klaim dibayarkan
    remainingBalance Float

    //-------------------------- 1 relations --------------------------------

    ///Cabang: Cabang Pembayar Pensiun
    branchPayee Branch? @relation(fields: [branchId], references: [id])

    /// @HideField({ match: ['ClaimFinancialCreate*Input','ClaimFinancialUpdate*Input']})
    ///Cabang: Cabang Pembayar Pensiun
    branchId Int?

    /// @HideField({ match: ['ClaimFinancialCreate*Input','ClaimFinancialUpdate*Input']})
    claim Claim?

    /// @HideField({ match: ['ClaimFinancialCreate*Input','ClaimFinancialUpdate*Input']})
    claimStatus ClaimStatus? @relation(fields: [claimStatusId], references: [id])

    /// @HideField({ match: ['ClaimFinancialCreate*Input','ClaimFinancialUpdate*Input']})
    claimStatusId Int? @unique

    /// @HideField({ match: ['ClaimFinancialCreate*Input','ClaimFinancialUpdate*Input']})
    transaction Transaction? @relation(fields: [transactionId], references: [id])

    /// @HideField({ match: ['ClaimFinancialCreate*Input','ClaimFinancialUpdate*Input']})
    transactionId Int? @unique
}

model ClaimProgram {
    //-------------------------- scalars --------------------------------
    /// @HideField({ match: ['ClaimProgramCreate*Input','ClaimProgramUpdate*Input']})
    id Int @id @default(autoincrement())

    /// @HideField({ match: ['ClaimProgramCreate*Input']})
    ///Tekspedisi	Tanggal ekspedisi
    expeditionDate DateTime?

    ///Reklaim:	Keterangan untuk klaim ulang
    isReclaim Boolean?

    isReclaimNoticeLetterDate DateTime?

    ///Ket.Pengajuan:	Keterangan konfirmasi
    submissionNote String?

    ///Keterangan:	isi keterangan 
    description String?

    ///Ket.Tambahan	keterangan tambahan
    additionalNote String?

    ///Tmulairawat	Tanggal mulai Rawat
    startTreatment DateTime?

    ///Takhirrawat	Tanggal akhir rawat
    endTreatment DateTime?

    ///Nama toko atau tempat pembelian kursi roda
    kurisRodaOrWalkerStoreName String?

    //-------------------------- 1 relations --------------------------------
    /// @HideField({ match: ['ClaimProgramUpdate*Input']})
    /// Penyakit:	Penyakit yang diderita
    disease Disease? @relation(fields: [diseaseId], references: [id])

    /// @HideField({ match: ['ClaimProgramCreate*Input','ClaimProgramUpdate*Input']})
    /// Penyakit:	Penyakit yang diderita
    diseaseId Int?

    clinics Clinic? @relation(fields: [clinicId], references: [id])

    clinicId Int?

    claim Claim?

    program ProgramParticipationToPrograms @relation(fields: [programId], references: [programId])

    programId Int @unique

    //-------------------------- m relations --------------------------------

    ///Kwitansi, data, dll: Bukti Pembayaran/Invoice Rumah Sakit oleh Peserta
    documents Document[]

    ///Kuitansi: Bukti2 pembayaran klinik atau rumah sakit
    invoiceProofs InvoiceProof[]
}

enum SantunanHarianRawatInapPlan {
    I
    II
    III
}

///Kuitansi bukti pembayaran klinik atau rumah sakit
model InvoiceProof {
    //-------------------------- scalars --------------------------------
    /// @HideField({ match: ['InvoiceProofCreate*Input','InvoiceProofUpdate*Input']})
    id Int @id @default(autoincrement())

    /// @HideField({ match: ['InvoiceProofUpdate*Input']})
    ///Tanggal saat kuitansi diterbitkan
    issuedDate DateTime

    ///Nominal biaya sesuai dengan kuitansi
    amount Float

    //-------------------------- 1 relations --------------------------------

    /// @HideField({ match: ['InvoiceProofUpdate*Input']})
    /// Bukti Kuitansi
    documentProof Document @relation(fields: [documentProofId], references: [id])

    /// @HideField({ match: ['InvoiceProofCreate*Input','InvoiceProofUpdate*Input']})
    /// Bukti Kuitansi
    documentProofId String @unique

    /// @HideField({ match: ['InvoiceProofCreate*Input','InvoiceProofUpdate*Input']})
    claimProgram ClaimProgram? @relation(fields: [claimProgramId], references: [id])

    /// @HideField({ match: ['InvoiceProofCreate*Input','InvoiceProofUpdate*Input']})
    claimProgramId Int?
}

model ClaimStatus {
    //-------------------------- scalars --------------------------------

    /// @HideField({ match: ['ClaimStatusCreate*Input','ClaimStatusUpdate*Input']})
    id Int @id @default(autoincrement())

    description String?

    rejectionReason String?

    /// @HideField({ match: ['ClaimStatusCreate*Input','ClaimStatusUpdate*Input']})
    createdAt DateTime @default(now())

    //-------------------------- 1 relations --------------------------------

    /// @HideField({ match: ['ClaimStatusCreate*Input']})
    type ClaimStatusType

    /// @HideField({ match: ['ClaimStatusCreate*Input','ClaimStatusUpdate*Input']})
    changedBy User @relation("statusUpdatedBy", fields: [changedById], references: [id])

    /// @HideField({ match: ['ClaimStatusCreate*Input','ClaimStatusUpdate*Input']})
    changedById String

    /// @HideField({ match: ['ClaimStatusCreate*Input','ClaimStatusUpdate*Input']})
    claim Claim @relation(fields: [claimId], references: [id])

    /// @HideField({ match: ['ClaimStatusCreate*Input','ClaimStatusUpdate*Input']})
    claimId String

    ///Nomor surat tolak
    ///Tanggal surat tolak
    rejectionLetter Document? @relation("rejectionLetter", fields: [rejectionLetterId], references: [id])

    /// @HideField({ match: ['ClaimStatusCreate*Input','ClaimStatusUpdate*Input']})
    ///Nomor surat tolak
    ///Tanggal surat tolak
    rejectionLetterId String? @unique

    ///No SurJam:	Nomer Surat jaminan
    guaranteeLetter Document? @relation("guaranteeLetter", fields: [guaranteeLetterId], references: [id])

    /// @HideField({ match: ['ClaimStatusCreate*Input','ClaimStatusUpdate*Input']})
    ///No SurJam:	Nomer Surat jaminan
    //Tanggal Surjam:	Tanggal Surat Jaminan
    guaranteeLetterId String? @unique

    ///Surat transaksi
    transactionLetter Document? @relation("transactionLetter", fields: [transactionLetterId], references: [id])

    /// @HideField({ match: ['ClaimStatusCreate*Input','ClaimStatusUpdate*Input']})
    ///Surat transaksi
    transactionLetterId String? @unique

    //Perintah Pembukuan
    bookKeepingOrder Document? @relation("bookKeepingOrder", fields: [bookKeepingOrderId], references: [id])

    /// @HideField({ match: ['ClaimStatusCreate*Input','ClaimStatusUpdate*Input']})
    bookKeepingOrderId String? @unique

    /// @HideField({ match: ['ClaimStatusCreate*Input','ClaimStatusUpdate*Input']})
    ///apabila status paid maka berelasi ke bukti pembayaran di claimFinancial
    claimFinancial ClaimFinancial?
}

model Disease {
    //-------------------------- scalars --------------------------------
    /// @HideField({ match: ['DiseaseCreate*Input','DiseaseUpdate*Input']})
    id Int @id @default(autoincrement())

    ///KodePenyakit: kode jenis penyakit
    code String

    ///NamaPenyakit: nama penyakit
    name String

    /// @HideField({ match: ['DiseaseCreate*Input','DiseaseUpdate*Input']})
    createdAt DateTime @default(now())

    /// @HideField({ match: ['DiseaseCreate*Input','DiseaseUpdate*Input']})
    updatedAt DateTime @updatedAt

    //-------------------------- m relations --------------------------------

    claimProgram ClaimProgram[]
}

model Clinic {
    //-------------------------- scalars --------------------------------
    /// @HideField({ match: ['ClinicCreate*Input','ClinicUpdate*Input']})
    id Int @id @default(autoincrement())

    code String

    name String

    /// @HideField({ match: ['ClinicCreate*Input','ClinicUpdate*Input']})
    createdAt DateTime @default(now())

    /// @HideField({ match: ['ClinicCreate*Input','ClinicUpdate*Input']})
    updatedAt DateTime @updatedAt

    //-------------------------- m relations --------------------------------

    /// @HideField({ match: ['ClinicCreate*Input','ClinicUpdate*Input']})
    claimProgram ClaimProgram[]
}

model Account {
    //-------------------------- scalars --------------------------------

    /// @HideField({ match: ['AccountCreate*Input','AccountUpdate*Input']})
    ///Nomer Dana
    id Int @id @default(autoincrement())

    /// @HideField({ match: ['AccountCreate*Input','AccountUpdate*Input']})
    ///Sisa Plafon:	Sisa Plafon Santunan Harian Rawat Inap
    currentBalance Float

    /// @HideField({ match: ['AccountCreate*Input','AccountUpdate*Input']})
    currentBalanceLastUpdate DateTime?

    //-------------------------- m relations --------------------------------

    /// @HideField({ match: ['AccountCreate*Input','AccountUpdate*Input']})
    transactions Transaction[]

    /// @HideField({ match: ['AccountCreate*Input','AccountUpdate*Input']})
    programParticipation ProgramParticipation[]
}

model Transaction {
    //-------------------------- scalars --------------------------------
    /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})
    id Int @id @default(autoincrement())

    amount Float

    /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})
    transactionType TransactionType

    description String?

    ///TProses Transaksi:	Tanggal Proses Transaksi | ransfer:	Tanggal Transfer
    /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})
    createdAt DateTime @default(now())

    //-------------------------- 1 relations --------------------------------

    /// Transfer ke Tujuan nomor dana mana?
    account Account @relation(fields: [accountId], references: [id])

    /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})
    accountId Int

    /// Bukti Transfer
    proof Document? @relation(fields: [proofId], references: [id])

    /// @HideField({ match: ['TransactionCreate*Input','TransactionUpdate*Input']})
    proofId String? @unique

    claimFinancial ClaimFinancial?
}

enum Gender {
    UNKNOWN
    MALE
    FEMALE
}

enum ClaimStatusType {
    PENDING
    APPROVED
    REJECTED
    RELEASE
    PAID
    COMPLETED
    CANCELLED
    REOPEN
}

enum TransactionType {
    CREDIT
    DEBIT
}

model Backup {
    //-------------------------- scalars --------------------------------
    id Int @id @default(autoincrement())

    /// @HideField({ match: ['BackupCreate*Input','BackupUpdate*Input']})
    path String?

    /// @HideField({ match: ['BackupCreate*Input','BackupUpdate*Input']})
    isSuccessful Boolean

    type BackupType

    executionType ExecutionType

    /// @HideField({ match: ['BackupCreate*Input','BackupUpdate*Input']})
    createdAt DateTime @default(now())
}

enum BackupType {
    DB
    FULL
}

enum ExecutionType {
    MANUAL
    AUTO
}
