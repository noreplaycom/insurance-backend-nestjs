# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccountAvgAggregate {
  id: Float
  currentBalance: Float
}

type AccountCountAggregate {
  id: Int!
  currentBalance: Int!
  currentBalanceLastUpdate: Int!
  participantId: Int!
  _all: Int!
}

type AccountCount {
  transactions: Int!
  programParticipation: Int!
}

type AccountMaxAggregate {
  id: Int
  currentBalance: Float
  currentBalanceLastUpdate: DateTime
  participantId: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AccountMinAggregate {
  id: Int
  currentBalance: Float
  currentBalanceLastUpdate: DateTime
  participantId: String
}

type AccountSumAggregate {
  id: Int
  currentBalance: Float
}

type Account {
  id: Int!

  """Sisa Plafon:	Sisa Plafon Santunan Harian Rawat Inap"""
  currentBalance: Float!
  currentBalanceLastUpdate: DateTime
  participantId: String!
  participant: Participant!
  transactions: [Transaction!]
  programParticipation: [ProgramParticipation!]
  _count: AccountCount!
}

type AddressAvgAggregate {
  id: Float
  subdistrictId: Float
}

type AddressCountAggregate {
  id: Int!
  address: Int!
  subdistrictId: Int!
  _all: Int!
}

type AddressCount {
  ContactInfo: Int!
}

type AddressMaxAggregate {
  id: Int
  address: String
  subdistrictId: Int
}

type AddressMinAggregate {
  id: Int
  address: String
  subdistrictId: Int
}

type AddressSumAggregate {
  id: Int
  subdistrictId: Int
}

type Address {
  id: Int!

  """Alamat"""
  address: String!
  subdistrictId: Int!
  subdistrict: Subdistrict!
  ContactInfo: [ContactInfo!]
  _count: AddressCount!
}

type AnnouncementAvgAggregate {
  id: Float
}

type AnnouncementCountAggregate {
  id: Int!
  title: Int!
  content: Int!
  imageUrl: Int!
  createdAt: Int!
  updatedAt: Int!
  createdById: Int!
  _all: Int!
}

type AnnouncementMaxAggregate {
  id: Int
  title: String
  content: String
  imageUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  createdById: String
}

type AnnouncementMinAggregate {
  id: Int
  title: String
  content: String
  imageUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  createdById: String
}

type AnnouncementSumAggregate {
  id: Int
}

type Announcement {
  id: Int!
  title: String!
  content: String!
  imageUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
  createdById: String!
  createdBy: User!
}

type AggregateBackup {
  _count: BackupCountAggregate
  _avg: BackupAvgAggregate
  _sum: BackupSumAggregate
  _min: BackupMinAggregate
  _max: BackupMaxAggregate
}

type BackupAvgAggregate {
  id: Float
}

type BackupCountAggregate {
  id: Int!
  name: Int!
  path: Int!
  isSuccessful: Int!
  type: Int!
  createdAt: Int!
  _all: Int!
}

type BackupMaxAggregate {
  id: Int
  name: String
  path: String
  isSuccessful: Boolean
  type: BackupType
  createdAt: DateTime
}

enum BackupType {
  MANUAL
  AUTO
}

type BackupMinAggregate {
  id: Int
  name: String
  path: String
  isSuccessful: Boolean
  type: BackupType
  createdAt: DateTime
}

type BackupSumAggregate {
  id: Int
}

type Backup {
  id: Int!
  name: String!
  path: String
  isSuccessful: Boolean!
  type: BackupType!
  createdAt: DateTime!
}

type BankAccountAvgAggregate {
  id: Float
  accountNumber: Float
}

type BankAccountCountAggregate {
  id: Int!
  accountNumber: Int!
  accountName: Int!
  participantId: Int!
  _all: Int!
}

type BankAccountMaxAggregate {
  id: Int
  accountNumber: Float
  accountName: String
  participantId: String
}

type BankAccountMinAggregate {
  id: Int
  accountNumber: Float
  accountName: String
  participantId: String
}

type BankAccountSumAggregate {
  id: Int
  accountNumber: Float
}

type BankAccount {
  id: Int!

  """No. Rekening	Nomer Rekening Penerimaan Manfaat Pensiun"""
  accountNumber: Float!

  """Rekening a/n.	Nama pada rekening bank"""
  accountName: String!
  participantId: String!
  participant: Participant!
}

type BranchAvgAggregate {
  id: Float
}

type BranchCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type BranchCount {
  employment: Int!
  claimFinancial: Int!
}

type BranchMaxAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type BranchMinAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type BranchSumAggregate {
  id: Int
}

type Branch {
  id: Int!

  """Nama Cabang"""
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  employment: [Employment!]
  claimFinancial: [ClaimFinancial!]
  _count: BranchCount!
}

type CityAvgAggregate {
  id: Float
  provinceId: Float
}

type CityCountAggregate {
  id: Int!
  name: Int!
  provinceId: Int!
  _all: Int!
}

type CityCount {
  districts: Int!
}

type CityMaxAggregate {
  id: Int
  name: String
  provinceId: Int
}

type CityMinAggregate {
  id: Int
  name: String
  provinceId: Int
}

type CitySumAggregate {
  id: Int
  provinceId: Int
}

"""Kota"""
type City {
  id: Int!

  """Nama Kota"""
  name: String!
  provinceId: Int!
  province: Province!
  districts: [District!]
  _count: CityCount!
}

type ClaimAvgAggregate {
  claimFinancialId: Float
  claimProcessId: Float
  diseaseId: Float
  clinicId: Float
  programId: Float
}

type ClaimCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  channel: Int!
  admedicaStatus: Int!
  company: Int!
  participantId: Int!
  claimFinancialId: Int!
  claimProcessId: Int!
  diseaseId: Int!
  clinicId: Int!
  inputedById: Int!
  programId: Int!
  waitingForId: Int!
  _all: Int!
}

type ClaimCount {
  tags: Int!
  claimStatuses: Int!
}

type ClaimMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  channel: ClaimChannel
  admedicaStatus: AdmedicaStatus
  company: String
  participantId: String
  claimFinancialId: Int
  claimProcessId: Int
  diseaseId: Int
  clinicId: Int
  inputedById: String
  programId: Int
  waitingForId: String
}

enum ClaimChannel {
  REGULER
  WA
  EMAIL
}

enum AdmedicaStatus {
  NON_ADMEDICA
  ADMEDICA
}

type ClaimMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  channel: ClaimChannel
  admedicaStatus: AdmedicaStatus
  company: String
  participantId: String
  claimFinancialId: Int
  claimProcessId: Int
  diseaseId: Int
  clinicId: Int
  inputedById: String
  programId: Int
  waitingForId: String
}

type ClaimSumAggregate {
  claimFinancialId: Int
  claimProcessId: Int
  diseaseId: Int
  clinicId: Int
  programId: Int
}

type Claim {
  """
  Nok:	Nomer Register Klaim
  Nomor Sm	nomer register Surat masuk (Klaim melalui WA/Reguler/Exception/Email)
  """
  id: String!

  """Tklaim:	Tanggal Klaim"""
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  """Metode Klaim:	WA,E-mail,Reguler, Telepon"""
  channel: ClaimChannel!

  """Stat. Admedika:	Status Admedika"""
  admedicaStatus: AdmedicaStatus!

  """Prsh:	Perusahaan"""
  company: String!
  participantId: String!
  claimFinancialId: Int!
  claimProcessId: Int!
  diseaseId: Int
  clinicId: Int!
  inputedById: String
  programId: Int!
  waitingForId: String
  participant: Participant!
  claimFinancials: ClaimFinancial!
  claimProcesses: ClaimProcess!
  disease: Disease
  clinics: Clinic!
  inputedBy: User
  program: Program!
  waitingFor: User
  tags: [Tag!]
  _count: ClaimCount!
}

type ClaimFinancialAvgAggregate {
  id: Float
  requestedAmount: Float
  paidAmount: Float
  rejectedAmount: Float
  branchId: Float
  claimStatusId: Float
}

type ClaimFinancialCountAggregate {
  id: Int!
  requestedAmount: Int!
  paidAmount: Int!
  rejectedAmount: Int!
  transactionProcessDate: Int!
  transferDate: Int!
  branchId: Int!
  claimStatusId: Int!
  _all: Int!
}

type ClaimFinancialMaxAggregate {
  id: Int
  requestedAmount: Float
  paidAmount: Float
  rejectedAmount: Float
  transactionProcessDate: DateTime
  transferDate: DateTime
  branchId: Int
  claimStatusId: Int
}

type ClaimFinancialMinAggregate {
  id: Int
  requestedAmount: Float
  paidAmount: Float
  rejectedAmount: Float
  transactionProcessDate: DateTime
  transferDate: DateTime
  branchId: Int
  claimStatusId: Int
}

type ClaimFinancialSumAggregate {
  id: Int
  requestedAmount: Float
  paidAmount: Float
  rejectedAmount: Float
  branchId: Int
  claimStatusId: Int
}

type ClaimFinancial {
  id: Int!

  """Aju:	Jumlah nominal klaim diajukan"""
  requestedAmount: Float!

  """Bayar:	Jumlah nominal klaim dibayar"""
  paidAmount: Float

  """Tolak:	Jumlah Nominal Klaim ditolak"""
  rejectedAmount: Float

  """TProses Transaksi:	Tanggal Proses Transaksi"""
  transactionProcessDate: DateTime

  """Transfer:	Tanggal Transfer"""
  transferDate: DateTime

  """Cabang: Cabang Pembayar Pensiun"""
  branchId: Int
  claimStatusId: Int

  """Cabang: Cabang Pembayar Pensiun"""
  branchPayee: Branch
  claim: Claim
  claimStatus: ClaimStatus
}

type ClaimProcessAvgAggregate {
  id: Float
}

type ClaimProcessCountAggregate {
  id: Int!
  startTreatment: Int!
  endTreatment: Int!
  expeditionDate: Int!
  reclaim: Int!
  processDate: Int!
  submissionNote: Int!
  description: Int!
  additionalNote: Int!
  _all: Int!
}

type ClaimProcessCount {
  documents: Int!
}

type ClaimProcessMaxAggregate {
  id: Int
  startTreatment: DateTime
  endTreatment: DateTime
  expeditionDate: DateTime
  reclaim: String
  processDate: DateTime
  submissionNote: String
  description: String
  additionalNote: String
}

type ClaimProcessMinAggregate {
  id: Int
  startTreatment: DateTime
  endTreatment: DateTime
  expeditionDate: DateTime
  reclaim: String
  processDate: DateTime
  submissionNote: String
  description: String
  additionalNote: String
}

type ClaimProcessSumAggregate {
  id: Int
}

type ClaimProcess {
  id: Int!

  """Tmulairawat	Tanggal mulai Rawat"""
  startTreatment: DateTime

  """Takhirrawat	Tanggal akhir rawat"""
  endTreatment: DateTime

  """Tekspedisi	Tanggal ekspedisi"""
  expeditionDate: DateTime

  """Reklaim:	Keterangan untuk klaim ulang"""
  reclaim: String

  """TProses Pengajuan:	Tanggal Proses pengajuan"""
  processDate: DateTime

  """Ket.Pengajuan:	Keterangan konfirmasi"""
  submissionNote: String

  """Keterangan:	isi keterangan """
  description: String

  """Ket.Tambahan	keterangan tambahan"""
  additionalNote: String
  claim: Claim

  """Kwitansi, data, dll: Bukti Pembayaran/Invoice Rumah Sakit oleh Peserta"""
  documents: [Document!]
  _count: ClaimProcessCount!
}

type AggregateClaimStatus {
  _count: ClaimStatusCountAggregate
  _avg: ClaimStatusAvgAggregate
  _sum: ClaimStatusSumAggregate
  _min: ClaimStatusMinAggregate
  _max: ClaimStatusMaxAggregate
}

type ClaimStatusAvgAggregate {
  id: Float
}

type ClaimStatusCountAggregate {
  id: Int!
  description: Int!
  rejectionReason: Int!
  createdAt: Int!
  status: Int!
  createById: Int!
  claimId: Int!
  rejectionLetterId: Int!
  guaranteeLetterId: Int!
  transactionLetterId: Int!
  bookKeepingOrderId: Int!
  _all: Int!
}

type ClaimStatusMaxAggregate {
  id: Int
  description: String
  rejectionReason: String
  createdAt: DateTime
  status: ClaimStatusType
  createById: String
  claimId: String
  rejectionLetterId: String
  guaranteeLetterId: String
  transactionLetterId: String
  bookKeepingOrderId: String
}

enum ClaimStatusType {
  DOCUMENT
  PENDING
  APPROVED
  REJECTED
  RELEASE
  PAID
  COMPLETED
  CANCELLED
  REOPEN
}

type ClaimStatusMinAggregate {
  id: Int
  description: String
  rejectionReason: String
  createdAt: DateTime
  status: ClaimStatusType
  createById: String
  claimId: String
  rejectionLetterId: String
  guaranteeLetterId: String
  transactionLetterId: String
  bookKeepingOrderId: String
}

type ClaimStatusSumAggregate {
  id: Int
}

type ClaimStatus {
  id: Int!
  description: String
  rejectionReason: String
  createdAt: DateTime!
  status: ClaimStatusType!
  createById: String!
  claimId: String!

  """
  Nomor surat tolak
  Tanggal surat tolak
  """
  rejectionLetterId: String

  """No SurJam:	Nomer Surat jaminan"""
  guaranteeLetterId: String
  transactionLetterId: String
  bookKeepingOrderId: String
  createBy: User!
  claim: Claim!

  """
  Nomor surat tolak
  Tanggal surat tolak
  """
  rejectionLetter: Document

  """No SurJam:	Nomer Surat jaminan"""
  guaranteeLetter: Document
  transactionLetter: Document
  bookKeepingOrder: Document

  """
  apabila status paid maka berelasi ke bukti pembayaran di claimFinancial
  """
  claimFinancial: ClaimFinancial
}

type ClinicAvgAggregate {
  id: Float
}

type ClinicCountAggregate {
  id: Int!
  code: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ClinicCount {
  claims: Int!
}

type ClinicMaxAggregate {
  id: Int
  code: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ClinicMinAggregate {
  id: Int
  code: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ClinicSumAggregate {
  id: Int
}

type Clinic {
  id: Int!
  code: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  claims: [Claim!]
  _count: ClinicCount!
}

type ContactInfoAvgAggregate {
  id: Float
  addressId: Float
}

type ContactInfoCountAggregate {
  id: Int!
  telp: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  participantId: Int!
  addressId: Int!
  _all: Int!
}

type ContactInfoMaxAggregate {
  id: Int
  telp: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  participantId: String
  addressId: Int
}

type ContactInfoMinAggregate {
  id: Int
  telp: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  participantId: String
  addressId: Int
}

type ContactInfoSumAggregate {
  id: Int
  addressId: Int
}

type ContactInfo {
  id: Int!
  telp: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  participantId: String!
  addressId: Int!
  participant: Participant!
  address: Address!
}

type DiseaseAvgAggregate {
  id: Float
}

type DiseaseCountAggregate {
  id: Int!
  code: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type DiseaseCount {
  claims: Int!
}

type DiseaseMaxAggregate {
  id: Int
  code: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type DiseaseMinAggregate {
  id: Int
  code: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type DiseaseSumAggregate {
  id: Int
}

type Disease {
  id: Int!

  """KodePenyakit: kode jenis penyakit"""
  code: String!

  """NamaPenyakit: nama penyakit"""
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  claims: [Claim!]
  _count: DiseaseCount!
}

type DistrictAvgAggregate {
  id: Float
  cityId: Float
}

type DistrictCountAggregate {
  id: Int!
  name: Int!
  cityId: Int!
  _all: Int!
}

type DistrictCount {
  subdistricts: Int!
}

type DistrictMaxAggregate {
  id: Int
  name: String
  cityId: Int
}

type DistrictMinAggregate {
  id: Int
  name: String
  cityId: Int
}

type DistrictSumAggregate {
  id: Int
  cityId: Int
}

"""Kecamatan"""
type District {
  id: Int!

  """Nama Kecamatan"""
  name: String!
  cityId: Int!
  city: City!
  subdistricts: [Subdistrict!]
  _count: DistrictCount!
}

type DocumentAvgAggregate {
  size: Float
  printCount: Float
  claimProcessId: Float
}

type DocumentCountAggregate {
  id: Int!
  name: Int!
  path: Int!
  size: Int!
  printCount: Int!
  createdAt: Int!
  updatedAt: Int!
  source: Int!
  type: Int!
  claimProcessId: Int!
  _all: Int!
}

type DocumentMaxAggregate {
  id: String
  name: String
  path: String
  size: Int
  printCount: Int
  createdAt: DateTime
  updatedAt: DateTime
  source: DocumentSource
  type: DocumentType
  claimProcessId: Int
}

enum DocumentSource {
  UPLOADED
  GENERATED
}

enum DocumentType {
  INVOICE
  CLAIM_FORM
  REJECTION_LETTER
  GUARANTEE_LETTER
  RECAP
  EXPEDITION
  TRANSFER
}

type DocumentMinAggregate {
  id: String
  name: String
  path: String
  size: Int
  printCount: Int
  createdAt: DateTime
  updatedAt: DateTime
  source: DocumentSource
  type: DocumentType
  claimProcessId: Int
}

type DocumentSumAggregate {
  size: Int
  printCount: Int
  claimProcessId: Int
}

type Document {
  """Nodok:	Nomer Dokumen"""
  id: String!

  """Nama Dokumen"""
  name: String!

  """Path:	Path file dokumen"""
  path: String!

  """Ukuran:	Ukuran dokumen"""
  size: Int!

  """Jumlah Cetak:	Jumlah cetak dokumen"""
  printCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  source: DocumentSource!
  type: DocumentType!
  claimProcessId: Int
  rejectionLetterOf: ClaimStatus
  guaranteeLetterOf: ClaimStatus

  """Surat transaksi"""
  transactionLetterOf: ClaimStatus

  """Perintah Pembukuan"""
  bookKeepingOrderOf: ClaimStatus
  claimProcess: ClaimProcess
}

type EmploymentAvgAggregate {
  id: Float
  branchId: Float
  groupId: Float
  regionId: Float
}

type EmploymentCountAggregate {
  id: Int!
  employmentPosition: Int!
  participantId: Int!
  branchId: Int!
  groupId: Int!
  regionId: Int!
  _all: Int!
}

type EmploymentMaxAggregate {
  id: Int
  employmentPosition: Position
  participantId: String
  branchId: Int
  groupId: Int
  regionId: Int
}

enum Position {
  AMGR
  AVP
  PGD
  MGR
  SASST
  VP
  SAVP
  SMGR
  SAMGR
  ASST
}

type EmploymentMinAggregate {
  id: Int
  employmentPosition: Position
  participantId: String
  branchId: Int
  groupId: Int
  regionId: Int
}

type EmploymentSumAggregate {
  id: Int
  branchId: Int
  groupId: Int
  regionId: Int
}

type Employment {
  id: Int!

  """Jenjang Jabatan terakhir"""
  employmentPosition: Position!
  participantId: String!
  branchId: Int!
  groupId: Int
  regionId: Int
  participant: Participant!
  branch: Branch!
  group: Group
  region: Region
}

type GroupAvgAggregate {
  id: Float
}

type GroupCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type GroupCount {
  employment: Int!
}

type GroupMaxAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type GroupMinAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type GroupSumAggregate {
  id: Int
}

type Group {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  employment: [Employment!]
  _count: GroupCount!
}

type NotificationAvgAggregate {
  id: Float
}

type NotificationCountAggregate {
  id: Int!
  title: Int!
  subtitle: Int!
  content: Int!
  isRead: Int!
  isCleared: Int!
  deepLink: Int!
  fcmToken: Int!
  createdAt: Int!
  updatedAt: Int!
  userId: Int!
  _all: Int!
}

type NotificationMaxAggregate {
  id: Int
  title: String
  subtitle: String
  content: String
  isRead: Boolean
  isCleared: Boolean
  deepLink: String
  fcmToken: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
}

type NotificationMinAggregate {
  id: Int
  title: String
  subtitle: String
  content: String
  isRead: Boolean
  isCleared: Boolean
  deepLink: String
  fcmToken: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
}

type NotificationSumAggregate {
  id: Int
}

type Notification {
  id: Int!
  title: String!
  subtitle: String!
  content: String!
  isRead: Boolean!
  isCleared: Boolean!
  deepLink: String
  fcmToken: String
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  user: User!
}

type ParticipantCountAggregate {
  gender: Int!
  birthDate: Int!
  isActive: Int!
  status: Int!
  userId: Int!
  relationId: Int!
  _all: Int!
}

type ParticipantCount {
  claims: Int!
  employments: Int!
  contactInfos: Int!
  programParticipations: Int!
  balances: Int!
  Participant: Int!
}

type ParticipantMaxAggregate {
  gender: Gender
  birthDate: DateTime
  isActive: Boolean
  status: ParticipantStatus
  userId: String
  relationId: String
}

enum Gender {
  UNKNOWN
  MALE
  FEMALE
}

enum ParticipantStatus {
  PENSIUNAN
  PASANGAN
  YATIM
  JANDADUDA6BULAN
}

type ParticipantMinAggregate {
  gender: Gender
  birthDate: DateTime
  isActive: Boolean
  status: ParticipantStatus
  userId: String
  relationId: String
}

type Participant {
  """Jenis Kelamin"""
  gender: Gender!

  """Tanggal Lahir"""
  birthDate: DateTime!

  """Aktif/Non Aktif:	Status Kepesertaan Aktif/non aktif"""
  isActive: Boolean!

  """Pensiunan,Pasangan, Yatim, Janda/duda 6 bulan"""
  status: ParticipantStatus!
  userId: String!
  relationId: String
  user: User!

  """Anggota keluarga dari"""
  relation: Participant
  bankAccount: BankAccount
  claims: [Claim!]
  employments: [Employment!]
  contactInfos: [ContactInfo!]
  programParticipations: [ProgramParticipation!]
  balances: [Account!]

  """Anggota keluarga dari"""
  Participant: [Participant!]
  _count: ParticipantCount!
}

type ProgramAvgAggregate {
  id: Float
  maxAllowancePercentage: Float
  allowanceCeiling: Float
  maxAllowancePerYear: Float
  claimPeriodMax: Float
  reclaimPeriodMax: Float
}

type ProgramCountAggregate {
  id: Int!
  plan: Int!
  maxAllowancePercentage: Int!
  allowanceCeiling: Int!
  maxAllowancePerYear: Int!
  claimPeriodMax: Int!
  reclaimPeriodMax: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  class: Int!
  _all: Int!
}

type ProgramCount {
  programParticipations: Int!
  claims: Int!
}

type ProgramMaxAggregate {
  id: Int
  plan: ApplicationType
  maxAllowancePercentage: Int
  allowanceCeiling: Float
  maxAllowancePerYear: Float
  claimPeriodMax: Int
  reclaimPeriodMax: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  class: Class
}

enum ApplicationType {
  SANTUNAN_HARIAN_RAWAT_INAP
  BANTUAN_BIAYA_CUCI_DARAH
  BANTUAN_KURSI_RODA
  BANTUAN_WALKER
  BANTUAN_IGD_UGD
  BANTUAN_RAWAT_INAP
}

"""
KELAS: Kelas sesuai Jenjab I=Rp.1.250.000 II=Rp.1.000.000  III= Rp.750.000 
"""
enum Class {
  I
  II
  III
}

type ProgramMinAggregate {
  id: Int
  plan: ApplicationType
  maxAllowancePercentage: Int
  allowanceCeiling: Float
  maxAllowancePerYear: Float
  claimPeriodMax: Int
  reclaimPeriodMax: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  class: Class
}

type ProgramSumAggregate {
  id: Int
  maxAllowancePercentage: Int
  allowanceCeiling: Float
  maxAllowancePerYear: Float
  claimPeriodMax: Int
  reclaimPeriodMax: Int
}

"""Reference Document: https://rebrand.ly/d6i9uem"""
type Program {
  id: Int!

  """
  Nama Program
  Plan	PlanType = jenis Rawat inap atau disingkat RI
  """
  plan: ApplicationType!

  """
  misal 50% dari biaya UGD/IGD, Plafon per pasangan maksimal Rp. 1.500.000 /tahun 
  """
  maxAllowancePercentage: Int

  """Plafon Santunan:	Plafon Santnan Harian Rawat Inap"""
  allowanceCeiling: Float

  """Maksimal santunan [60] hari rawat inap/tahun/orang"""
  maxAllowancePerYear: Float

  """Masa klaim [60] hari sejak keluar rumah sakit/tanggal kuitansi"""
  claimPeriodMax: Int

  """Klaim ulang maksimal [60] hari sejak tanggal pemberitahuan"""
  reclaimPeriodMax: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  """
  KELAS: Kelas sesuai Jenjab I=Rp.1.250.000 II=Rp.1.000.000  III= Rp.750.000 
  """
  class: Class!
  programParticipations: [ProgramParticipation!]
  claims: [Claim!]
  _count: ProgramCount!
}

type ProgramParticipationAvgAggregate {
  id: Float
  fundingId: Float
  programId: Float
}

type ProgramParticipationCountAggregate {
  id: Int!
  bpjsNumber: Int!
  nonActiveReason: Int!
  effectiveDate: Int!
  nonActiveDate: Int!
  participantId: Int!
  fundingId: Int!
  programId: Int!
  _all: Int!
}

type ProgramParticipationMaxAggregate {
  id: Int
  bpjsNumber: String
  nonActiveReason: String
  effectiveDate: DateTime
  nonActiveDate: DateTime
  participantId: String
  fundingId: Int
  programId: Int
}

type ProgramParticipationMinAggregate {
  id: Int
  bpjsNumber: String
  nonActiveReason: String
  effectiveDate: DateTime
  nonActiveDate: DateTime
  participantId: String
  fundingId: Int
  programId: Int
}

type ProgramParticipationSumAggregate {
  id: Int
  fundingId: Int
  programId: Int
}

type ProgramParticipation {
  """Nopol:	Nomer Polish"""
  id: Int!

  """No.BPJS/ASKES: Nomer kartu BPJS"""
  bpjsNumber: String

  """Keterangan Non Aktif:	keterangan perihal penonaktifan"""
  nonActiveReason: String

  """Tgl. Efektif: Tanggal mulai ikut program Fasilitas Kesehatan"""
  effectiveDate: DateTime!

  """Tgl Non Aktif:	tanggal penonaktifan peserta"""
  nonActiveDate: DateTime
  participantId: String!

  """Nomor Dana"""
  fundingId: Int!
  programId: Int
  participant: Participant!

  """Dana"""
  funding: Account!
  Program: Program
}

type ProvinceAvgAggregate {
  id: Float
}

type ProvinceCountAggregate {
  id: Int!
  name: Int!
  _all: Int!
}

type ProvinceCount {
  cities: Int!
}

type ProvinceMaxAggregate {
  id: Int
  name: String
}

type ProvinceMinAggregate {
  id: Int
  name: String
}

type ProvinceSumAggregate {
  id: Int
}

"""Provinsi"""
type Province {
  id: Int!
  name: String!
  _count: ProvinceCount!
}

type RegionAvgAggregate {
  id: Float
}

type RegionCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type RegionCount {
  employment: Int!
}

type RegionMaxAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type RegionMinAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type RegionSumAggregate {
  id: Int
}

type Region {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  employment: [Employment!]
  _count: RegionCount!
}

type AggregateRole {
  _count: RoleCountAggregate
  _avg: RoleAvgAggregate
  _sum: RoleSumAggregate
  _min: RoleMinAggregate
  _max: RoleMaxAggregate
}

type RoleAvgAggregate {
  id: Float
  higherLevelThanId: Float
}

type RoleCountAggregate {
  id: Int!
  name: Int!
  description: Int!
  higherLevelThanId: Int!
  roleType: Int!
  _all: Int!
}

type RoleCount {
  rolePermissions: Int!
  users: Int!
  lowerLevelThan: Int!
}

type RoleMaxAggregate {
  id: Int
  name: String
  description: String
  higherLevelThanId: Int
  roleType: RoleType
}

enum RoleType {
  SUPERUSER
  PARTICIPANT
  ADMIN
}

type RoleMinAggregate {
  id: Int
  name: String
  description: String
  higherLevelThanId: Int
  roleType: RoleType
}

type RoleSumAggregate {
  id: Int
  higherLevelThanId: Int
}

type Role {
  id: Int!

  """E.g., 'superuser', 'analyst', 'group leader'"""
  name: String!
  description: String
  higherLevelThanId: Int
  roleType: RoleType
  higherLevelThan: Role
  rolePermissions: [RolePermission!]
  users: [User!]
  lowerLevelThan: [Role!]
  _count: RoleCount!
}

type RolePermissionAvgAggregate {
  id: Float
  roleId: Float
}

type RolePermissionCountAggregate {
  id: Int!
  roleId: Int!
  permission: Int!
  _all: Int!
}

type RolePermissionMaxAggregate {
  id: Int
  roleId: Int
  permission: Permission
}

enum Permission {
  CREATE_CLAIM
  UPDATE_CLAIM
  UPDATE_CLAIM_STATUS
  UPDATE_STATUS_FINANCIAL
  RELEASE_CLAIM
  DELETE_CLAIM_DOCUMENT
  CREATE_CLAIM_DOCUMENT
  IMPORT_CLAIM
  EXPORT_CLAIM
  CREATE_PARTICIPANT
  UPDATE_PARTICIPANT
  IMPORT_PARTICIPANT
  EXPORT_PARTICIPANT
}

type RolePermissionMinAggregate {
  id: Int
  roleId: Int
  permission: Permission
}

type RolePermissionSumAggregate {
  id: Int
  roleId: Int
}

type RolePermission {
  id: Int!
  roleId: Int
  permission: Permission!
  role: Role
}

type SubdistrictAvgAggregate {
  id: Float
  districtId: Float
}

type SubdistrictCountAggregate {
  id: Int!
  name: Int!
  districtId: Int!
  postalCode: Int!
  _all: Int!
}

type SubdistrictCount {
  address: Int!
}

type SubdistrictMaxAggregate {
  id: Int
  name: String
  districtId: Int
  postalCode: String
}

type SubdistrictMinAggregate {
  id: Int
  name: String
  districtId: Int
  postalCode: String
}

type SubdistrictSumAggregate {
  id: Int
  districtId: Int
}

"""Kelurahan"""
type Subdistrict {
  id: Int!

  """Nama Kelurahan"""
  name: String!
  districtId: Int!

  """Kode Pos"""
  postalCode: String!
  district: District!
  _count: SubdistrictCount!
}

type TagAvgAggregate {
  id: Float
}

type TagCountAggregate {
  id: Int!
  name: Int!
  color: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type TagCount {
  Claims: Int!
}

type TagMaxAggregate {
  id: Int
  name: String
  color: Color
  createdAt: DateTime
  updatedAt: DateTime
}

enum Color {
  WHITE
  BLUE
  RED
  YELLOW
  GREEN
}

type TagMinAggregate {
  id: Int
  name: String
  color: Color
  createdAt: DateTime
  updatedAt: DateTime
}

type TagSumAggregate {
  id: Int
}

type Tag {
  id: Int!
  name: String!
  color: Color!
  createdAt: DateTime!
  updatedAt: DateTime!
  Claims: [Claim!]
  _count: TagCount!
}

type TransactionAvgAggregate {
  id: Float
  amount: Float
  accountId: Float
}

type TransactionCountAggregate {
  id: Int!
  amount: Int!
  transactionType: Int!
  description: Int!
  createdAt: Int!
  accountId: Int!
  _all: Int!
}

type TransactionMaxAggregate {
  id: Int
  amount: Float
  transactionType: TransactionType
  description: String
  createdAt: DateTime
  accountId: Int
}

enum TransactionType {
  CREDIT
  DEBIT
}

type TransactionMinAggregate {
  id: Int
  amount: Float
  transactionType: TransactionType
  description: String
  createdAt: DateTime
  accountId: Int
}

type TransactionSumAggregate {
  id: Int
  amount: Float
  accountId: Int
}

type Transaction {
  id: Int!
  amount: Float!
  transactionType: TransactionType!
  description: String
  createdAt: DateTime!
  accountId: Int!
  account: Account!
}

type UserAvgAggregate {
  roleId: Float
  participantId: Float
}

type UserCountAggregate {
  id: Int!
  fullName: Int!
  email: Int!
  emailVerifiedAt: Int!
  password: Int!
  profilePictureUrl: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  roleId: Int!
  participantId: Int!
  _all: Int!
}

type UserCount {
  claimsInput: Int!
  claimActions: Int!
  announcementCreated: Int!
  notification: Int!
  claimsOnWait: Int!
}

type UserMaxAggregate {
  id: String
  fullName: String
  email: String
  emailVerifiedAt: DateTime
  password: String
  profilePictureUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  roleId: Int
  participantId: Int
}

type UserMinAggregate {
  id: String
  fullName: String
  email: String
  emailVerifiedAt: DateTime
  password: String
  profilePictureUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  roleId: Int
  participantId: Int
}

type UserSumAggregate {
  roleId: Int
  participantId: Int
}

type User {
  id: String!

  """Nama Lengkap"""
  fullName: String!
  email: String!
  emailVerifiedAt: DateTime
  password: String!
  profilePictureUrl: String

  """Tgl.Masuk Peserta"""
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  roleId: Int!
  participantId: Int
  role: Role!
  participant: Participant
  claimsInput: [Claim!]
  claimActions: [ClaimStatus!]
  announcementCreated: [Announcement!]
  notification: [Notification!]
  claimsOnWait: [Claim!]
  _count: UserCount!
}

type ClaimCountQuantityByCustomRangeAndPeriodQuery {
  period: String
  quantityClaims: Int
}

type ClaimCountTotalPercentageVsCustomPeriodQuery {
  versus: String!
  percentage: Float!
  amount: Float!
}

type ClaimCountTotalByCustomRangeAndPeriodQuery {
  period: String
  totalClaims: Float
}

type ClaimCountQuantityByStatusQuery {
  status: ClaimStatusType!
  total: Int!
}

type BatchPayload {
  count: Float
}

type Query {
  """Deskripsinya ada disini loh"""
  backupFindOne(where: BackupWhereUniqueInput!): Backup

  """Deskripsinya ada disini loh"""
  backupFindMany(where: BackupWhereInput, orderBy: [BackupOrderByWithRelationInput!], cursor: BackupWhereUniqueInput, take: Int, skip: Int, distinct: [BackupScalarFieldEnum!]): [Backup!]

  """Deskripsinya ada disini loh"""
  backupFindFirst(where: BackupWhereInput, orderBy: [BackupOrderByWithRelationInput!], cursor: BackupWhereUniqueInput, take: Int, skip: Int, distinct: [BackupScalarFieldEnum!]): Backup

  """Deskripsinya ada disini loh"""
  backupAggregate(where: BackupWhereInput, orderBy: [BackupOrderByWithRelationInput!], cursor: BackupWhereUniqueInput, take: Int, skip: Int, _count: BackupCountAggregateInput, _avg: BackupAvgAggregateInput, _sum: BackupSumAggregateInput, _min: BackupMinAggregateInput, _max: BackupMaxAggregateInput): AggregateBackup

  """Deskripsinya ada disini loh"""
  backupCount(where: BackupWhereInput, orderBy: [BackupOrderByWithRelationInput!], cursor: BackupWhereUniqueInput, take: Int, skip: Int, distinct: [BackupScalarFieldEnum!]): Float

  """Deskripsinya ada disini loh"""
  claimCount(where: ClaimWhereInput, orderBy: [ClaimOrderByWithRelationInput!], cursor: ClaimWhereUniqueInput, take: Int, skip: Int, distinct: [ClaimScalarFieldEnum!]): Float

  """Deskripsinya ada disini loh"""
  claimCountQuantityByCustomRangeAndPeriod(claimCountQuantityByCustomRangeAndPeriodArgs: ClaimCountQuantityByCustomRangeAndPeriodArgs!): [ClaimCountQuantityByCustomRangeAndPeriodQuery!]

  """Deskripsinya ada disini loh"""
  claimCountTotalPercentageVsCustomPeriod(claimCountTotalPercentageVsCustomPeriodArgs: ClaimCountTotalPercentageVsCustomPeriodArgs!): ClaimCountTotalPercentageVsCustomPeriodQuery

  """Deskripsinya ada disini loh"""
  claimCountTotalByCustomRangeAndPeriod(claimCountTotalByCustomRangeAndPeriodArgs: ClaimCountTotalByCustomRangeAndPeriodArgs!): [ClaimCountTotalByCustomRangeAndPeriodQuery!]

  """Deskripsinya ada disini loh"""
  claimCountQuantityByStatus: [ClaimCountQuantityByStatusQuery!]

  """Deskripsinya ada disini loh"""
  claimFindMany(where: ClaimWhereInput, orderBy: [ClaimOrderByWithRelationInput!], cursor: ClaimWhereUniqueInput, take: Int, skip: Int, distinct: [ClaimScalarFieldEnum!]): [Claim!]

  """Deskripsinya ada disini loh"""
  claimChannelFindMany: [String!]

  """deskripsi nya disini loh"""
  claimExport: String!

  """Deskripsinya ada disini loh"""
  claimFindOne(claimFindOneByIdArgs: ClaimFindOneByIdArgs!): Claim

  """Deskripsinya ada disini loh"""
  claimStatusFindOne(where: ClaimStatusWhereUniqueInput!): ClaimStatus

  """Deskripsinya ada disini loh"""
  claimStatusFindMany(where: ClaimStatusWhereInput, orderBy: [ClaimStatusOrderByWithRelationInput!], cursor: ClaimStatusWhereUniqueInput, take: Int, skip: Int, distinct: [ClaimStatusScalarFieldEnum!]): [ClaimStatus!]

  """Deskripsinya ada disini loh"""
  claimStatusFindFirst(where: ClaimStatusWhereInput, orderBy: [ClaimStatusOrderByWithRelationInput!], cursor: ClaimStatusWhereUniqueInput, take: Int, skip: Int, distinct: [ClaimStatusScalarFieldEnum!]): ClaimStatus

  """Deskripsinya ada disini loh"""
  claimStatusAggregate(where: ClaimStatusWhereInput, orderBy: [ClaimStatusOrderByWithRelationInput!], cursor: ClaimStatusWhereUniqueInput, take: Int, skip: Int, _count: ClaimStatusCountAggregateInput, _avg: ClaimStatusAvgAggregateInput, _sum: ClaimStatusSumAggregateInput, _min: ClaimStatusMinAggregateInput, _max: ClaimStatusMaxAggregateInput): AggregateClaimStatus

  """Deskripsinya ada disini loh"""
  claimStatusCount(where: ClaimStatusWhereInput, orderBy: [ClaimStatusOrderByWithRelationInput!], cursor: ClaimStatusWhereUniqueInput, take: Int, skip: Int, distinct: [ClaimStatusScalarFieldEnum!]): Float

  """Deskripsinya ada disini loh"""
  roleFindOne(where: RoleWhereUniqueInput!): Role

  """Deskripsinya ada disini loh"""
  roleFindMany(where: RoleWhereInput, orderBy: [RoleOrderByWithRelationInput!], cursor: RoleWhereUniqueInput, take: Int, skip: Int, distinct: [RoleScalarFieldEnum!]): [Role!]

  """Deskripsinya ada disini loh"""
  roleAggregate(where: RoleWhereInput, orderBy: [RoleOrderByWithRelationInput!], cursor: RoleWhereUniqueInput, take: Int, skip: Int, _count: RoleCountAggregateInput, _avg: RoleAvgAggregateInput, _sum: RoleSumAggregateInput, _min: RoleMinAggregateInput, _max: RoleMaxAggregateInput): AggregateRole

  """Deskripsinya ada disini loh"""
  roleCount(where: RoleWhereInput, orderBy: [RoleOrderByWithRelationInput!], cursor: RoleWhereUniqueInput, take: Int, skip: Int, distinct: [RoleScalarFieldEnum!]): Float

  """Deskripsinya ada disini loh"""
  notificationFindMany(where: NotificationWhereInput, orderBy: [NotificationOrderByWithRelationInput!], cursor: NotificationWhereUniqueInput, take: Int, skip: Int, distinct: [NotificationScalarFieldEnum!]): [Notification!]

  """Deskripsinya ada disini loh"""
  notificationCount(where: NotificationWhereInput, orderBy: [NotificationOrderByWithRelationInput!], cursor: NotificationWhereUniqueInput, take: Int, skip: Int, distinct: [NotificationScalarFieldEnum!]): Float
}

input BackupWhereUniqueInput {
  id: Int
  AND: [BackupWhereInput!]
  OR: [BackupWhereInput!]
  NOT: [BackupWhereInput!]
  name: StringFilter
  path: StringNullableFilter
  isSuccessful: BoolFilter
  type: EnumBackupTypeFilter
  createdAt: DateTimeFilter
}

input BackupWhereInput {
  AND: [BackupWhereInput!]
  OR: [BackupWhereInput!]
  NOT: [BackupWhereInput!]
  id: IntFilter
  name: StringFilter
  path: StringNullableFilter
  isSuccessful: BoolFilter
  type: EnumBackupTypeFilter
  createdAt: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input EnumBackupTypeFilter {
  equals: BackupType
  in: [BackupType!]
  notIn: [BackupType!]
  not: NestedEnumBackupTypeFilter
}

input NestedEnumBackupTypeFilter {
  equals: BackupType
  in: [BackupType!]
  notIn: [BackupType!]
  not: NestedEnumBackupTypeFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input BackupOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  path: SortOrderInput
  isSuccessful: SortOrder
  type: SortOrder
  createdAt: SortOrder
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  sort: SortOrder!
  nulls: NullsOrder
}

enum NullsOrder {
  first
  last
}

enum BackupScalarFieldEnum {
  id
  name
  path
  isSuccessful
  type
  createdAt
}

input BackupCountAggregateInput {
  id: Boolean
  name: Boolean
  path: Boolean
  isSuccessful: Boolean
  type: Boolean
  createdAt: Boolean
  _all: Boolean
}

input BackupAvgAggregateInput {
  id: Boolean
}

input BackupSumAggregateInput {
  id: Boolean
}

input BackupMinAggregateInput {
  id: Boolean
  name: Boolean
  path: Boolean
  isSuccessful: Boolean
  type: Boolean
  createdAt: Boolean
}

input BackupMaxAggregateInput {
  id: Boolean
  name: Boolean
  path: Boolean
  isSuccessful: Boolean
  type: Boolean
  createdAt: Boolean
}

input ClaimWhereInput {
  AND: [ClaimWhereInput!]
  OR: [ClaimWhereInput!]
  NOT: [ClaimWhereInput!]
  channel: EnumClaimChannelFilter
  admedicaStatus: EnumAdmedicaStatusFilter
  company: StringFilter
  participantId: StringFilter
  claimFinancialId: IntFilter
  claimProcessId: IntFilter
  diseaseId: IntNullableFilter
  clinicId: IntFilter
  inputedById: StringNullableFilter
  programId: IntFilter
  waitingForId: StringNullableFilter
  participant: ParticipantRelationFilter
  claimFinancials: ClaimFinancialRelationFilter
  claimProcesses: ClaimProcessRelationFilter
  disease: DiseaseNullableRelationFilter
  clinics: ClinicRelationFilter
  inputedBy: UserNullableRelationFilter
  program: ProgramRelationFilter
  waitingFor: UserNullableRelationFilter
  tags: TagListRelationFilter
}

input EnumClaimChannelFilter {
  equals: ClaimChannel
  in: [ClaimChannel!]
  notIn: [ClaimChannel!]
  not: NestedEnumClaimChannelFilter
}

input NestedEnumClaimChannelFilter {
  equals: ClaimChannel
  in: [ClaimChannel!]
  notIn: [ClaimChannel!]
  not: NestedEnumClaimChannelFilter
}

input EnumAdmedicaStatusFilter {
  equals: AdmedicaStatus
  in: [AdmedicaStatus!]
  notIn: [AdmedicaStatus!]
  not: NestedEnumAdmedicaStatusFilter
}

input NestedEnumAdmedicaStatusFilter {
  equals: AdmedicaStatus
  in: [AdmedicaStatus!]
  notIn: [AdmedicaStatus!]
  not: NestedEnumAdmedicaStatusFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input ParticipantRelationFilter {
  is: ParticipantWhereInput
  isNot: ParticipantWhereInput
}

input ParticipantWhereInput {
  AND: [ParticipantWhereInput!]
  OR: [ParticipantWhereInput!]
  NOT: [ParticipantWhereInput!]
  gender: EnumGenderFilter
  birthDate: DateTimeFilter
  isActive: BoolFilter
  status: EnumParticipantStatusFilter
  userId: StringFilter
  relationId: StringNullableFilter
  user: UserRelationFilter
  relation: ParticipantNullableRelationFilter
  bankAccount: BankAccountNullableRelationFilter
  claims: ClaimListRelationFilter
  employments: EmploymentListRelationFilter
  contactInfos: ContactInfoListRelationFilter
  programParticipations: ProgramParticipationListRelationFilter
  balances: AccountListRelationFilter
  Participant: ParticipantListRelationFilter
}

input EnumGenderFilter {
  equals: Gender
  in: [Gender!]
  notIn: [Gender!]
  not: NestedEnumGenderFilter
}

input NestedEnumGenderFilter {
  equals: Gender
  in: [Gender!]
  notIn: [Gender!]
  not: NestedEnumGenderFilter
}

input EnumParticipantStatusFilter {
  equals: ParticipantStatus
  in: [ParticipantStatus!]
  notIn: [ParticipantStatus!]
  not: NestedEnumParticipantStatusFilter
}

input NestedEnumParticipantStatusFilter {
  equals: ParticipantStatus
  in: [ParticipantStatus!]
  notIn: [ParticipantStatus!]
  not: NestedEnumParticipantStatusFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  fullName: StringFilter
  email: StringFilter
  emailVerifiedAt: DateTimeNullableFilter
  password: StringFilter
  profilePictureUrl: StringNullableFilter
  deletedAt: DateTimeNullableFilter
  roleId: IntFilter
  participantId: IntNullableFilter
  role: RoleRelationFilter
  participant: ParticipantNullableRelationFilter
  claimsInput: ClaimListRelationFilter
  claimActions: ClaimStatusListRelationFilter
  announcementCreated: AnnouncementListRelationFilter
  notification: NotificationListRelationFilter
  claimsOnWait: ClaimListRelationFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input RoleRelationFilter {
  is: RoleWhereInput
  isNot: RoleWhereInput
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringNullableFilter
  higherLevelThanId: IntNullableFilter
  roleType: EnumRoleTypeNullableFilter
  higherLevelThan: RoleNullableRelationFilter
  rolePermissions: RolePermissionListRelationFilter
  users: UserListRelationFilter
  lowerLevelThan: RoleListRelationFilter
}

input EnumRoleTypeNullableFilter {
  equals: RoleType
  in: [RoleType!]
  notIn: [RoleType!]
  not: NestedEnumRoleTypeNullableFilter
}

input NestedEnumRoleTypeNullableFilter {
  equals: RoleType
  in: [RoleType!]
  notIn: [RoleType!]
  not: NestedEnumRoleTypeNullableFilter
}

input RoleNullableRelationFilter {
  is: RoleWhereInput
  isNot: RoleWhereInput
}

input RolePermissionListRelationFilter {
  every: RolePermissionWhereInput
  some: RolePermissionWhereInput
  none: RolePermissionWhereInput
}

input RolePermissionWhereInput {
  AND: [RolePermissionWhereInput!]
  OR: [RolePermissionWhereInput!]
  NOT: [RolePermissionWhereInput!]
  id: IntFilter
  roleId: IntNullableFilter
  permission: EnumPermissionFilter
  role: RoleNullableRelationFilter
}

input EnumPermissionFilter {
  equals: Permission
  in: [Permission!]
  notIn: [Permission!]
  not: NestedEnumPermissionFilter
}

input NestedEnumPermissionFilter {
  equals: Permission
  in: [Permission!]
  notIn: [Permission!]
  not: NestedEnumPermissionFilter
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleListRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input ParticipantNullableRelationFilter {
  is: ParticipantWhereInput
  isNot: ParticipantWhereInput
}

input ClaimListRelationFilter {
  every: ClaimWhereInput
  some: ClaimWhereInput
  none: ClaimWhereInput
}

input ClaimStatusListRelationFilter {
  every: ClaimStatusWhereInput
  some: ClaimStatusWhereInput
  none: ClaimStatusWhereInput
}

input ClaimStatusWhereInput {
  AND: [ClaimStatusWhereInput!]
  OR: [ClaimStatusWhereInput!]
  NOT: [ClaimStatusWhereInput!]
  id: IntFilter
  description: StringNullableFilter
  rejectionReason: StringNullableFilter
  createdAt: DateTimeFilter
  status: EnumClaimStatusTypeFilter
  createById: StringFilter
  claimId: StringFilter
  rejectionLetterId: StringNullableFilter
  guaranteeLetterId: StringNullableFilter
  transactionLetterId: StringNullableFilter
  bookKeepingOrderId: StringNullableFilter
  createBy: UserRelationFilter
  claim: ClaimRelationFilter
  rejectionLetter: DocumentNullableRelationFilter
  guaranteeLetter: DocumentNullableRelationFilter
  transactionLetter: DocumentNullableRelationFilter
  bookKeepingOrder: DocumentNullableRelationFilter
  claimFinancial: ClaimFinancialNullableRelationFilter
}

input EnumClaimStatusTypeFilter {
  equals: ClaimStatusType
  in: [ClaimStatusType!]
  notIn: [ClaimStatusType!]
  not: NestedEnumClaimStatusTypeFilter
}

input NestedEnumClaimStatusTypeFilter {
  equals: ClaimStatusType
  in: [ClaimStatusType!]
  notIn: [ClaimStatusType!]
  not: NestedEnumClaimStatusTypeFilter
}

input ClaimRelationFilter {
  is: ClaimWhereInput
  isNot: ClaimWhereInput
}

input DocumentNullableRelationFilter {
  is: DocumentWhereInput
  isNot: DocumentWhereInput
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  id: StringFilter
  name: StringFilter
  path: StringFilter
  size: IntFilter
  printCount: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  source: EnumDocumentSourceFilter
  type: EnumDocumentTypeFilter
  claimProcessId: IntNullableFilter
  rejectionLetterOf: ClaimStatusNullableRelationFilter
  guaranteeLetterOf: ClaimStatusNullableRelationFilter
  transactionLetterOf: ClaimStatusNullableRelationFilter
  bookKeepingOrderOf: ClaimStatusNullableRelationFilter
  claimProcess: ClaimProcessNullableRelationFilter
}

input EnumDocumentSourceFilter {
  equals: DocumentSource
  in: [DocumentSource!]
  notIn: [DocumentSource!]
  not: NestedEnumDocumentSourceFilter
}

input NestedEnumDocumentSourceFilter {
  equals: DocumentSource
  in: [DocumentSource!]
  notIn: [DocumentSource!]
  not: NestedEnumDocumentSourceFilter
}

input EnumDocumentTypeFilter {
  equals: DocumentType
  in: [DocumentType!]
  notIn: [DocumentType!]
  not: NestedEnumDocumentTypeFilter
}

input NestedEnumDocumentTypeFilter {
  equals: DocumentType
  in: [DocumentType!]
  notIn: [DocumentType!]
  not: NestedEnumDocumentTypeFilter
}

input ClaimStatusNullableRelationFilter {
  is: ClaimStatusWhereInput
  isNot: ClaimStatusWhereInput
}

input ClaimProcessNullableRelationFilter {
  is: ClaimProcessWhereInput
  isNot: ClaimProcessWhereInput
}

input ClaimProcessWhereInput {
  AND: [ClaimProcessWhereInput!]
  OR: [ClaimProcessWhereInput!]
  NOT: [ClaimProcessWhereInput!]
  id: IntFilter
  startTreatment: DateTimeNullableFilter
  endTreatment: DateTimeNullableFilter
  expeditionDate: DateTimeNullableFilter
  reclaim: StringNullableFilter
  processDate: DateTimeNullableFilter
  submissionNote: StringNullableFilter
  description: StringNullableFilter
  additionalNote: StringNullableFilter
  claim: ClaimNullableRelationFilter
  documents: DocumentListRelationFilter
}

input ClaimNullableRelationFilter {
  is: ClaimWhereInput
  isNot: ClaimWhereInput
}

input DocumentListRelationFilter {
  every: DocumentWhereInput
  some: DocumentWhereInput
  none: DocumentWhereInput
}

input ClaimFinancialNullableRelationFilter {
  is: ClaimFinancialWhereInput
  isNot: ClaimFinancialWhereInput
}

input ClaimFinancialWhereInput {
  AND: [ClaimFinancialWhereInput!]
  OR: [ClaimFinancialWhereInput!]
  NOT: [ClaimFinancialWhereInput!]
  id: IntFilter
  requestedAmount: FloatFilter
  paidAmount: FloatNullableFilter
  rejectedAmount: FloatNullableFilter
  transactionProcessDate: DateTimeNullableFilter
  transferDate: DateTimeNullableFilter
  branchId: IntNullableFilter
  claimStatusId: IntNullableFilter
  branchPayee: BranchNullableRelationFilter
  claim: ClaimNullableRelationFilter
  claimStatus: ClaimStatusNullableRelationFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input NestedFloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input BranchNullableRelationFilter {
  is: BranchWhereInput
  isNot: BranchWhereInput
}

input BranchWhereInput {
  AND: [BranchWhereInput!]
  OR: [BranchWhereInput!]
  NOT: [BranchWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employment: EmploymentListRelationFilter
  claimFinancial: ClaimFinancialListRelationFilter
}

input EmploymentListRelationFilter {
  every: EmploymentWhereInput
  some: EmploymentWhereInput
  none: EmploymentWhereInput
}

input EmploymentWhereInput {
  AND: [EmploymentWhereInput!]
  OR: [EmploymentWhereInput!]
  NOT: [EmploymentWhereInput!]
  id: IntFilter
  employmentPosition: EnumPositionFilter
  participantId: StringFilter
  branchId: IntFilter
  groupId: IntNullableFilter
  regionId: IntNullableFilter
  participant: ParticipantRelationFilter
  branch: BranchRelationFilter
  group: GroupNullableRelationFilter
  region: RegionNullableRelationFilter
}

input EnumPositionFilter {
  equals: Position
  in: [Position!]
  notIn: [Position!]
  not: NestedEnumPositionFilter
}

input NestedEnumPositionFilter {
  equals: Position
  in: [Position!]
  notIn: [Position!]
  not: NestedEnumPositionFilter
}

input BranchRelationFilter {
  is: BranchWhereInput
  isNot: BranchWhereInput
}

input GroupNullableRelationFilter {
  is: GroupWhereInput
  isNot: GroupWhereInput
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employment: EmploymentListRelationFilter
}

input RegionNullableRelationFilter {
  is: RegionWhereInput
  isNot: RegionWhereInput
}

input RegionWhereInput {
  AND: [RegionWhereInput!]
  OR: [RegionWhereInput!]
  NOT: [RegionWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employment: EmploymentListRelationFilter
}

input ClaimFinancialListRelationFilter {
  every: ClaimFinancialWhereInput
  some: ClaimFinancialWhereInput
  none: ClaimFinancialWhereInput
}

input AnnouncementListRelationFilter {
  every: AnnouncementWhereInput
  some: AnnouncementWhereInput
  none: AnnouncementWhereInput
}

input AnnouncementWhereInput {
  AND: [AnnouncementWhereInput!]
  OR: [AnnouncementWhereInput!]
  NOT: [AnnouncementWhereInput!]
  id: IntFilter
  title: StringFilter
  content: StringFilter
  imageUrl: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  createdById: StringFilter
  createdBy: UserRelationFilter
}

input NotificationListRelationFilter {
  every: NotificationWhereInput
  some: NotificationWhereInput
  none: NotificationWhereInput
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  id: IntFilter
  isRead: BoolFilter
  isCleared: BoolFilter
  user: UserRelationFilter
}

input BankAccountNullableRelationFilter {
  is: BankAccountWhereInput
  isNot: BankAccountWhereInput
}

input BankAccountWhereInput {
  AND: [BankAccountWhereInput!]
  OR: [BankAccountWhereInput!]
  NOT: [BankAccountWhereInput!]
  id: IntFilter
  accountNumber: FloatFilter
  accountName: StringFilter
  participantId: StringFilter
  participant: ParticipantRelationFilter
}

input ContactInfoListRelationFilter {
  every: ContactInfoWhereInput
  some: ContactInfoWhereInput
  none: ContactInfoWhereInput
}

input ContactInfoWhereInput {
  AND: [ContactInfoWhereInput!]
  OR: [ContactInfoWhereInput!]
  NOT: [ContactInfoWhereInput!]
  id: IntFilter
  telp: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  participantId: StringFilter
  addressId: IntFilter
  participant: ParticipantRelationFilter
  address: AddressRelationFilter
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IntFilter
  address: StringFilter
  subdistrictId: IntFilter
  subdistrict: SubdistrictRelationFilter
  ContactInfo: ContactInfoListRelationFilter
}

input SubdistrictRelationFilter {
  is: SubdistrictWhereInput
  isNot: SubdistrictWhereInput
}

input SubdistrictWhereInput {
  AND: [SubdistrictWhereInput!]
  OR: [SubdistrictWhereInput!]
  NOT: [SubdistrictWhereInput!]
  id: IntFilter
  name: StringFilter
  districtId: IntFilter
  postalCode: StringFilter
  district: DistrictRelationFilter
  address: AddressListRelationFilter
}

input DistrictRelationFilter {
  is: DistrictWhereInput
  isNot: DistrictWhereInput
}

input DistrictWhereInput {
  AND: [DistrictWhereInput!]
  OR: [DistrictWhereInput!]
  NOT: [DistrictWhereInput!]
  id: IntFilter
  name: StringFilter
  cityId: IntFilter
  city: CityRelationFilter
  subdistricts: SubdistrictListRelationFilter
}

input CityRelationFilter {
  is: CityWhereInput
  isNot: CityWhereInput
}

input CityWhereInput {
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
  id: IntFilter
  name: StringFilter
  provinceId: IntFilter
  province: ProvinceRelationFilter
  districts: DistrictListRelationFilter
}

input ProvinceRelationFilter {
  is: ProvinceWhereInput
  isNot: ProvinceWhereInput
}

input ProvinceWhereInput {
  AND: [ProvinceWhereInput!]
  OR: [ProvinceWhereInput!]
  NOT: [ProvinceWhereInput!]
  id: IntFilter
  name: StringFilter
  cities: CityListRelationFilter
}

input CityListRelationFilter {
  every: CityWhereInput
  some: CityWhereInput
  none: CityWhereInput
}

input DistrictListRelationFilter {
  every: DistrictWhereInput
  some: DistrictWhereInput
  none: DistrictWhereInput
}

input SubdistrictListRelationFilter {
  every: SubdistrictWhereInput
  some: SubdistrictWhereInput
  none: SubdistrictWhereInput
}

input AddressListRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input ProgramParticipationListRelationFilter {
  every: ProgramParticipationWhereInput
  some: ProgramParticipationWhereInput
  none: ProgramParticipationWhereInput
}

input ProgramParticipationWhereInput {
  AND: [ProgramParticipationWhereInput!]
  OR: [ProgramParticipationWhereInput!]
  NOT: [ProgramParticipationWhereInput!]
  id: IntFilter
  bpjsNumber: StringNullableFilter
  nonActiveReason: StringNullableFilter
  effectiveDate: DateTimeFilter
  nonActiveDate: DateTimeNullableFilter
  participantId: StringFilter
  fundingId: IntFilter
  programId: IntNullableFilter
  participant: ParticipantRelationFilter
  funding: AccountRelationFilter
  Program: ProgramNullableRelationFilter
}

input AccountRelationFilter {
  is: AccountWhereInput
  isNot: AccountWhereInput
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: IntFilter
  currentBalance: FloatFilter
  currentBalanceLastUpdate: DateTimeNullableFilter
  participantId: StringFilter
  participant: ParticipantRelationFilter
  transactions: TransactionListRelationFilter
  programParticipation: ProgramParticipationListRelationFilter
}

input TransactionListRelationFilter {
  every: TransactionWhereInput
  some: TransactionWhereInput
  none: TransactionWhereInput
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  id: IntFilter
  amount: FloatFilter
  transactionType: EnumTransactionTypeFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  accountId: IntFilter
  account: AccountRelationFilter
}

input EnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  notIn: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
}

input NestedEnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  notIn: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
}

input ProgramNullableRelationFilter {
  is: ProgramWhereInput
  isNot: ProgramWhereInput
}

input ProgramWhereInput {
  AND: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  id: IntFilter
  plan: EnumApplicationTypeFilter
  maxAllowancePercentage: IntNullableFilter
  allowanceCeiling: FloatNullableFilter
  maxAllowancePerYear: FloatNullableFilter
  claimPeriodMax: IntNullableFilter
  reclaimPeriodMax: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  class: EnumClassFilter
  programParticipations: ProgramParticipationListRelationFilter
  claims: ClaimListRelationFilter
}

input EnumApplicationTypeFilter {
  equals: ApplicationType
  in: [ApplicationType!]
  notIn: [ApplicationType!]
  not: NestedEnumApplicationTypeFilter
}

input NestedEnumApplicationTypeFilter {
  equals: ApplicationType
  in: [ApplicationType!]
  notIn: [ApplicationType!]
  not: NestedEnumApplicationTypeFilter
}

input EnumClassFilter {
  equals: Class
  in: [Class!]
  notIn: [Class!]
  not: NestedEnumClassFilter
}

input NestedEnumClassFilter {
  equals: Class
  in: [Class!]
  notIn: [Class!]
  not: NestedEnumClassFilter
}

input AccountListRelationFilter {
  every: AccountWhereInput
  some: AccountWhereInput
  none: AccountWhereInput
}

input ParticipantListRelationFilter {
  every: ParticipantWhereInput
  some: ParticipantWhereInput
  none: ParticipantWhereInput
}

input ClaimFinancialRelationFilter {
  is: ClaimFinancialWhereInput
  isNot: ClaimFinancialWhereInput
}

input ClaimProcessRelationFilter {
  is: ClaimProcessWhereInput
  isNot: ClaimProcessWhereInput
}

input DiseaseNullableRelationFilter {
  is: DiseaseWhereInput
  isNot: DiseaseWhereInput
}

input DiseaseWhereInput {
  AND: [DiseaseWhereInput!]
  OR: [DiseaseWhereInput!]
  NOT: [DiseaseWhereInput!]
  id: IntFilter
  code: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  claims: ClaimListRelationFilter
}

input ClinicRelationFilter {
  is: ClinicWhereInput
  isNot: ClinicWhereInput
}

input ClinicWhereInput {
  AND: [ClinicWhereInput!]
  OR: [ClinicWhereInput!]
  NOT: [ClinicWhereInput!]
  id: IntFilter
  code: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  claims: ClaimListRelationFilter
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input ProgramRelationFilter {
  is: ProgramWhereInput
  isNot: ProgramWhereInput
}

input TagListRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IntFilter
  name: StringFilter
  color: EnumColorFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Claims: ClaimListRelationFilter
}

input EnumColorFilter {
  equals: Color
  in: [Color!]
  notIn: [Color!]
  not: NestedEnumColorFilter
}

input NestedEnumColorFilter {
  equals: Color
  in: [Color!]
  notIn: [Color!]
  not: NestedEnumColorFilter
}

input ClaimOrderByWithRelationInput {
  channel: SortOrder
  admedicaStatus: SortOrder
  company: SortOrder
  participantId: SortOrder
  claimFinancialId: SortOrder
  claimProcessId: SortOrder
  diseaseId: SortOrderInput
  clinicId: SortOrder
  inputedById: SortOrderInput
  programId: SortOrder
  waitingForId: SortOrderInput
  participant: ParticipantOrderByWithRelationInput
  claimFinancials: ClaimFinancialOrderByWithRelationInput
  claimProcesses: ClaimProcessOrderByWithRelationInput
  disease: DiseaseOrderByWithRelationInput
  clinics: ClinicOrderByWithRelationInput
  inputedBy: UserOrderByWithRelationInput
  program: ProgramOrderByWithRelationInput
  waitingFor: UserOrderByWithRelationInput
  tags: TagOrderByRelationAggregateInput
}

input ParticipantOrderByWithRelationInput {
  gender: SortOrder
  birthDate: SortOrder
  isActive: SortOrder
  status: SortOrder
  userId: SortOrder
  relationId: SortOrderInput
  user: UserOrderByWithRelationInput
  relation: ParticipantOrderByWithRelationInput
  bankAccount: BankAccountOrderByWithRelationInput
  claims: ClaimOrderByRelationAggregateInput
  employments: EmploymentOrderByRelationAggregateInput
  contactInfos: ContactInfoOrderByRelationAggregateInput
  programParticipations: ProgramParticipationOrderByRelationAggregateInput
  balances: AccountOrderByRelationAggregateInput
  Participant: ParticipantOrderByRelationAggregateInput
}

input UserOrderByWithRelationInput {
  id: SortOrder
  fullName: SortOrder
  email: SortOrder
  emailVerifiedAt: SortOrderInput
  password: SortOrder
  profilePictureUrl: SortOrderInput
  deletedAt: SortOrderInput
  roleId: SortOrder
  participantId: SortOrderInput
  role: RoleOrderByWithRelationInput
  participant: ParticipantOrderByWithRelationInput
  claimsInput: ClaimOrderByRelationAggregateInput
  claimActions: ClaimStatusOrderByRelationAggregateInput
  announcementCreated: AnnouncementOrderByRelationAggregateInput
  notification: NotificationOrderByRelationAggregateInput
  claimsOnWait: ClaimOrderByRelationAggregateInput
}

input RoleOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  description: SortOrderInput
  higherLevelThanId: SortOrderInput
  roleType: SortOrderInput
  higherLevelThan: RoleOrderByWithRelationInput
  rolePermissions: RolePermissionOrderByRelationAggregateInput
  users: UserOrderByRelationAggregateInput
  lowerLevelThan: RoleOrderByRelationAggregateInput
}

input RolePermissionOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input RoleOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClaimOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClaimStatusOrderByRelationAggregateInput {
  _count: SortOrder
}

input AnnouncementOrderByRelationAggregateInput {
  _count: SortOrder
}

input NotificationOrderByRelationAggregateInput {
  _count: SortOrder
}

input BankAccountOrderByWithRelationInput {
  id: SortOrder
  accountNumber: SortOrder
  accountName: SortOrder
  participantId: SortOrder
  participant: ParticipantOrderByWithRelationInput
}

input EmploymentOrderByRelationAggregateInput {
  _count: SortOrder
}

input ContactInfoOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProgramParticipationOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input ParticipantOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClaimFinancialOrderByWithRelationInput {
  id: SortOrder
  requestedAmount: SortOrder
  paidAmount: SortOrderInput
  rejectedAmount: SortOrderInput
  transactionProcessDate: SortOrderInput
  transferDate: SortOrderInput
  branchId: SortOrderInput
  claimStatusId: SortOrderInput
  branchPayee: BranchOrderByWithRelationInput
  claim: ClaimOrderByWithRelationInput
  claimStatus: ClaimStatusOrderByWithRelationInput
}

input BranchOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  employment: EmploymentOrderByRelationAggregateInput
  claimFinancial: ClaimFinancialOrderByRelationAggregateInput
}

input ClaimFinancialOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClaimStatusOrderByWithRelationInput {
  id: SortOrder
  description: SortOrderInput
  rejectionReason: SortOrderInput
  createdAt: SortOrder
  status: SortOrder
  createById: SortOrder
  claimId: SortOrder
  rejectionLetterId: SortOrderInput
  guaranteeLetterId: SortOrderInput
  transactionLetterId: SortOrderInput
  bookKeepingOrderId: SortOrderInput
  createBy: UserOrderByWithRelationInput
  claim: ClaimOrderByWithRelationInput
  rejectionLetter: DocumentOrderByWithRelationInput
  guaranteeLetter: DocumentOrderByWithRelationInput
  transactionLetter: DocumentOrderByWithRelationInput
  bookKeepingOrder: DocumentOrderByWithRelationInput
  claimFinancial: ClaimFinancialOrderByWithRelationInput
}

input DocumentOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  path: SortOrder
  size: SortOrder
  printCount: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  source: SortOrder
  type: SortOrder
  claimProcessId: SortOrderInput
  rejectionLetterOf: ClaimStatusOrderByWithRelationInput
  guaranteeLetterOf: ClaimStatusOrderByWithRelationInput
  transactionLetterOf: ClaimStatusOrderByWithRelationInput
  bookKeepingOrderOf: ClaimStatusOrderByWithRelationInput
  claimProcess: ClaimProcessOrderByWithRelationInput
}

input ClaimProcessOrderByWithRelationInput {
  id: SortOrder
  startTreatment: SortOrderInput
  endTreatment: SortOrderInput
  expeditionDate: SortOrderInput
  reclaim: SortOrderInput
  processDate: SortOrderInput
  submissionNote: SortOrderInput
  description: SortOrderInput
  additionalNote: SortOrderInput
  claim: ClaimOrderByWithRelationInput
  documents: DocumentOrderByRelationAggregateInput
}

input DocumentOrderByRelationAggregateInput {
  _count: SortOrder
}

input DiseaseOrderByWithRelationInput {
  id: SortOrder
  code: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  claims: ClaimOrderByRelationAggregateInput
}

input ClinicOrderByWithRelationInput {
  id: SortOrder
  code: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  claims: ClaimOrderByRelationAggregateInput
}

input ProgramOrderByWithRelationInput {
  id: SortOrder
  plan: SortOrder
  maxAllowancePercentage: SortOrderInput
  allowanceCeiling: SortOrderInput
  maxAllowancePerYear: SortOrderInput
  claimPeriodMax: SortOrderInput
  reclaimPeriodMax: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  class: SortOrder
  programParticipations: ProgramParticipationOrderByRelationAggregateInput
  claims: ClaimOrderByRelationAggregateInput
}

input TagOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClaimWhereUniqueInput {
  claimFinancialId: Int
  claimProcessId: Int
  AND: [ClaimWhereInput!]
  OR: [ClaimWhereInput!]
  NOT: [ClaimWhereInput!]
  channel: EnumClaimChannelFilter
  admedicaStatus: EnumAdmedicaStatusFilter
  company: StringFilter
  participantId: StringFilter
  diseaseId: IntNullableFilter
  clinicId: IntFilter
  inputedById: StringNullableFilter
  programId: IntFilter
  waitingForId: StringNullableFilter
  participant: ParticipantRelationFilter
  claimFinancials: ClaimFinancialRelationFilter
  claimProcesses: ClaimProcessRelationFilter
  disease: DiseaseNullableRelationFilter
  clinics: ClinicRelationFilter
  inputedBy: UserNullableRelationFilter
  program: ProgramRelationFilter
  waitingFor: UserNullableRelationFilter
  tags: TagListRelationFilter
}

enum ClaimScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  channel
  admedicaStatus
  company
  participantId
  claimFinancialId
  claimProcessId
  diseaseId
  clinicId
  inputedById
  programId
  waitingForId
}

input ClaimCountQuantityByCustomRangeAndPeriodArgs {
  start: DateTime!
  end: DateTime!
  period: Period!
}

"""Period options for data retrieval"""
enum Period {
  WEEKLY
  MONTHLY
  YEARLY
  ALLTIME
}

input ClaimCountTotalPercentageVsCustomPeriodArgs {
  period: Period!
}

input ClaimCountTotalByCustomRangeAndPeriodArgs {
  start: DateTime!
  end: DateTime!
  period: Period!
}

input ClaimFindOneByIdArgs {
  id: String!
}

input ClaimStatusWhereUniqueInput {
  id: Int
  rejectionLetterId: String
  guaranteeLetterId: String
  transactionLetterId: String
  bookKeepingOrderId: String
  AND: [ClaimStatusWhereInput!]
  OR: [ClaimStatusWhereInput!]
  NOT: [ClaimStatusWhereInput!]
  description: StringNullableFilter
  rejectionReason: StringNullableFilter
  createdAt: DateTimeFilter
  status: EnumClaimStatusTypeFilter
  createById: StringFilter
  claimId: StringFilter
  createBy: UserRelationFilter
  claim: ClaimRelationFilter
  rejectionLetter: DocumentNullableRelationFilter
  guaranteeLetter: DocumentNullableRelationFilter
  transactionLetter: DocumentNullableRelationFilter
  bookKeepingOrder: DocumentNullableRelationFilter
  claimFinancial: ClaimFinancialNullableRelationFilter
}

enum ClaimStatusScalarFieldEnum {
  id
  description
  rejectionReason
  createdAt
  status
  createById
  claimId
  rejectionLetterId
  guaranteeLetterId
  transactionLetterId
  bookKeepingOrderId
}

input ClaimStatusCountAggregateInput {
  id: Boolean
  description: Boolean
  rejectionReason: Boolean
  createdAt: Boolean
  status: Boolean
  createById: Boolean
  claimId: Boolean
  rejectionLetterId: Boolean
  guaranteeLetterId: Boolean
  transactionLetterId: Boolean
  bookKeepingOrderId: Boolean
  _all: Boolean
}

input ClaimStatusAvgAggregateInput {
  id: Boolean
}

input ClaimStatusSumAggregateInput {
  id: Boolean
}

input ClaimStatusMinAggregateInput {
  id: Boolean
  description: Boolean
  rejectionReason: Boolean
  createdAt: Boolean
  status: Boolean
  createById: Boolean
  claimId: Boolean
  rejectionLetterId: Boolean
  guaranteeLetterId: Boolean
  transactionLetterId: Boolean
  bookKeepingOrderId: Boolean
}

input ClaimStatusMaxAggregateInput {
  id: Boolean
  description: Boolean
  rejectionReason: Boolean
  createdAt: Boolean
  status: Boolean
  createById: Boolean
  claimId: Boolean
  rejectionLetterId: Boolean
  guaranteeLetterId: Boolean
  transactionLetterId: Boolean
  bookKeepingOrderId: Boolean
}

input RoleWhereUniqueInput {
  id: Int
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  name: StringFilter
  description: StringNullableFilter
  higherLevelThanId: IntNullableFilter
  roleType: EnumRoleTypeNullableFilter
  higherLevelThan: RoleNullableRelationFilter
  rolePermissions: RolePermissionListRelationFilter
  users: UserListRelationFilter
  lowerLevelThan: RoleListRelationFilter
}

enum RoleScalarFieldEnum {
  id
  name
  description
  higherLevelThanId
  roleType
}

input RoleCountAggregateInput {
  id: Boolean
  name: Boolean
  description: Boolean
  higherLevelThanId: Boolean
  roleType: Boolean
  _all: Boolean
}

input RoleAvgAggregateInput {
  id: Boolean
  higherLevelThanId: Boolean
}

input RoleSumAggregateInput {
  id: Boolean
  higherLevelThanId: Boolean
}

input RoleMinAggregateInput {
  id: Boolean
  name: Boolean
  description: Boolean
  higherLevelThanId: Boolean
  roleType: Boolean
}

input RoleMaxAggregateInput {
  id: Boolean
  name: Boolean
  description: Boolean
  higherLevelThanId: Boolean
  roleType: Boolean
}

input NotificationOrderByWithRelationInput {
  id: SortOrder
  isRead: SortOrder
  isCleared: SortOrder
  user: UserOrderByWithRelationInput
}

input NotificationWhereUniqueInput {
  id: Int
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  isRead: BoolFilter
  isCleared: BoolFilter
  user: UserRelationFilter
}

enum NotificationScalarFieldEnum {
  id
  title
  subtitle
  content
  isRead
  isCleared
  deepLink
  fcmToken
  createdAt
  updatedAt
  userId
}

type Mutation {
  """Deskripsinya ada disini loh"""
  backupCreateOne(data: BackupCreateInput!): Backup

  """Deskripsinya ada disini loh"""
  backupCreateMany(data: [BackupCreateManyInput!]!, skipDuplicates: Boolean): BatchPayload

  """Deskripsinya ada disini loh"""
  backupUpdateOne(data: BackupUpdateInput!, where: BackupWhereUniqueInput!): Backup

  """Deskripsinya ada disini loh"""
  backupUpdateMany(data: BackupUpdateManyMutationInput!, where: BackupWhereInput): Backup

  """Deskripsinya ada disini loh"""
  backupDelete(where: BackupWhereUniqueInput!): Boolean!

  """Deskripsinya ada disini loh"""
  backupDeleteMany(where: BackupWhereInput): Boolean!

  """Deskripsinya ada disini loh"""
  claimCreateOne(data: ClaimCreateInput!): Claim

  """
  Header wajib ada apollo-require-preflight = true agar tidak CSRF error. File JPG akan dicompress
  """
  claimImport(file: Upload): Boolean

  """Deskripsinya ada disini loh"""
  claimUpdateOne(claimUpdateOneOfStatusArgs: ClaimUpdateOneOfStatusArgs!): Claim

  """
  Header wajib ada apollo-require-preflight = true agar tidak CSRF error. File JPG akan dicompress
  """
  claimFileUpload(file: Upload): String

  """Deskripsinya ada disini loh"""
  claimStatusCreateOne(data: ClaimStatusCreateInput!): ClaimStatus

  """Deskripsinya ada disini loh"""
  claimStatusCreateMany(data: [ClaimStatusCreateManyInput!]!, skipDuplicates: Boolean): BatchPayload

  """Deskripsinya ada disini loh"""
  claimStatusUpdateOne(data: ClaimStatusUpdateInput!, where: ClaimStatusWhereUniqueInput!): ClaimStatus

  """Deskripsinya ada disini loh"""
  claimStatusUpdateMany(data: ClaimStatusUpdateManyMutationInput!, where: ClaimStatusWhereInput): ClaimStatus

  """Deskripsinya ada disini loh"""
  claimStatusDelete(where: ClaimStatusWhereUniqueInput!): Boolean!

  """Deskripsinya ada disini loh"""
  claimStatusDeleteMany(where: ClaimStatusWhereInput): Boolean!

  """Deskripsinya ada disini loh"""
  roleCreateOne(data: RoleCreateInput!): Role

  """Deskripsinya ada disini loh"""
  roleUpdateOne(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role

  """Deskripsinya ada disini loh"""
  roleDelete(where: RoleWhereUniqueInput!): Boolean!

  """Deskripsinya ada disini loh"""
  notificationUpdateOne(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification

  """Deskripsinya ada disini loh"""
  notificationUpdateMany(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): Notification

  """
  Header wajib ada apollo-require-preflight = true agar tidak CSRF error. File JPG akan dicompress
  """
  uploadSingleFile(file: Upload): String
}

input BackupCreateInput {
  name: String!
  path: String
  isSuccessful: Boolean!
  type: BackupType!
  createdAt: DateTime
}

input BackupCreateManyInput {
  id: Int
  name: String!
  path: String
  isSuccessful: Boolean!
  type: BackupType!
  createdAt: DateTime
}

input BackupUpdateInput {
  name: StringFieldUpdateOperationsInput
  path: NullableStringFieldUpdateOperationsInput
  isSuccessful: BoolFieldUpdateOperationsInput
  type: EnumBackupTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input EnumBackupTypeFieldUpdateOperationsInput {
  set: BackupType
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input BackupUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  path: NullableStringFieldUpdateOperationsInput
  isSuccessful: BoolFieldUpdateOperationsInput
  type: EnumBackupTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ClaimCreateInput {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  company: String!
  participant: ParticipantCreateNestedOneWithoutClaimsInput!
  claimFinancials: ClaimFinancialCreateNestedOneWithoutClaimInput!
  claimProcesses: ClaimProcessCreateNestedOneWithoutClaimInput!
  disease: DiseaseCreateNestedOneWithoutClaimsInput
  clinics: ClinicCreateNestedOneWithoutClaimsInput!
  inputedBy: UserCreateNestedOneWithoutClaimsInputInput
  program: ProgramCreateNestedOneWithoutClaimsInput!
  waitingFor: UserCreateNestedOneWithoutClaimsOnWaitInput
  tags: TagCreateNestedManyWithoutClaimsInput
}

input ParticipantCreateNestedOneWithoutClaimsInput {
  create: ParticipantCreateWithoutClaimsInput
  connectOrCreate: ParticipantCreateOrConnectWithoutClaimsInput
  connect: ParticipantWhereUniqueInput
}

input ParticipantCreateWithoutClaimsInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  user: UserCreateNestedOneWithoutParticipantInput!
  relation: ParticipantCreateNestedOneWithoutParticipantInput
  bankAccount: BankAccountCreateNestedOneWithoutParticipantInput
  employments: EmploymentCreateNestedManyWithoutParticipantInput
  contactInfos: ContactInfoCreateNestedManyWithoutParticipantInput
  programParticipations: ProgramParticipationCreateNestedManyWithoutParticipantInput
  balances: AccountCreateNestedManyWithoutParticipantInput
  Participant: ParticipantCreateNestedManyWithoutRelationInput
}

input UserCreateNestedOneWithoutParticipantInput {
  create: UserCreateWithoutParticipantInput
  connectOrCreate: UserCreateOrConnectWithoutParticipantInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutParticipantInput {
  id: String
  fullName: String!
  email: String!
  emailVerifiedAt: DateTime
  password: String!
  profilePictureUrl: String
  deletedAt: DateTime
  participantId: Int
  role: RoleCreateNestedOneWithoutUsersInput!
  claimsInput: ClaimCreateNestedManyWithoutInputedByInput
  claimActions: ClaimStatusCreateNestedManyWithoutCreateByInput
  announcementCreated: AnnouncementCreateNestedManyWithoutCreatedByInput
  notification: NotificationCreateNestedManyWithoutUserInput
  claimsOnWait: ClaimCreateNestedManyWithoutWaitingForInput
}

input RoleCreateNestedOneWithoutUsersInput {
  create: RoleCreateWithoutUsersInput
  connectOrCreate: RoleCreateOrConnectWithoutUsersInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutUsersInput {
  name: String!
  description: String
  roleType: RoleType
  higherLevelThan: RoleCreateNestedOneWithoutLowerLevelThanInput
  rolePermissions: RolePermissionCreateNestedManyWithoutRoleInput
  lowerLevelThan: RoleCreateNestedManyWithoutHigherLevelThanInput
}

input RoleCreateNestedOneWithoutLowerLevelThanInput {
  create: RoleCreateWithoutLowerLevelThanInput
  connectOrCreate: RoleCreateOrConnectWithoutLowerLevelThanInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutLowerLevelThanInput {
  name: String!
  description: String
  roleType: RoleType
  higherLevelThan: RoleCreateNestedOneWithoutLowerLevelThanInput
  rolePermissions: RolePermissionCreateNestedManyWithoutRoleInput
  users: UserCreateNestedManyWithoutRoleInput
}

input RolePermissionCreateNestedManyWithoutRoleInput {
  create: [RolePermissionCreateWithoutRoleInput!]
  connectOrCreate: [RolePermissionCreateOrConnectWithoutRoleInput!]
  createMany: RolePermissionCreateManyRoleInputEnvelope
  connect: [RolePermissionWhereUniqueInput!]
}

input RolePermissionCreateWithoutRoleInput {
  permission: Permission!
}

input RolePermissionCreateOrConnectWithoutRoleInput {
  where: RolePermissionWhereUniqueInput!
  create: RolePermissionCreateWithoutRoleInput!
}

input RolePermissionWhereUniqueInput {
  id: Int
  AND: [RolePermissionWhereInput!]
  OR: [RolePermissionWhereInput!]
  NOT: [RolePermissionWhereInput!]
  roleId: IntNullableFilter
  permission: EnumPermissionFilter
  role: RoleNullableRelationFilter
}

input RolePermissionCreateManyRoleInputEnvelope {
  data: [RolePermissionCreateManyRoleInput!]!
  skipDuplicates: Boolean
}

input RolePermissionCreateManyRoleInput {
  id: Int
  permission: Permission!
}

input UserCreateNestedManyWithoutRoleInput {
  create: [UserCreateWithoutRoleInput!]
  connectOrCreate: [UserCreateOrConnectWithoutRoleInput!]
  createMany: UserCreateManyRoleInputEnvelope
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutRoleInput {
  id: String
  fullName: String!
  email: String!
  emailVerifiedAt: DateTime
  password: String!
  profilePictureUrl: String
  deletedAt: DateTime
  participantId: Int
  participant: ParticipantCreateNestedOneWithoutUserInput
  claimsInput: ClaimCreateNestedManyWithoutInputedByInput
  claimActions: ClaimStatusCreateNestedManyWithoutCreateByInput
  announcementCreated: AnnouncementCreateNestedManyWithoutCreatedByInput
  notification: NotificationCreateNestedManyWithoutUserInput
  claimsOnWait: ClaimCreateNestedManyWithoutWaitingForInput
}

input ParticipantCreateNestedOneWithoutUserInput {
  create: ParticipantCreateWithoutUserInput
  connectOrCreate: ParticipantCreateOrConnectWithoutUserInput
  connect: ParticipantWhereUniqueInput
}

input ParticipantCreateWithoutUserInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  relation: ParticipantCreateNestedOneWithoutParticipantInput
  bankAccount: BankAccountCreateNestedOneWithoutParticipantInput
  claims: ClaimCreateNestedManyWithoutParticipantInput
  employments: EmploymentCreateNestedManyWithoutParticipantInput
  contactInfos: ContactInfoCreateNestedManyWithoutParticipantInput
  programParticipations: ProgramParticipationCreateNestedManyWithoutParticipantInput
  balances: AccountCreateNestedManyWithoutParticipantInput
  Participant: ParticipantCreateNestedManyWithoutRelationInput
}

input ParticipantCreateNestedOneWithoutParticipantInput {
  create: ParticipantCreateWithoutParticipantInput
  connectOrCreate: ParticipantCreateOrConnectWithoutParticipantInput
  connect: ParticipantWhereUniqueInput
}

input ParticipantCreateWithoutParticipantInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  user: UserCreateNestedOneWithoutParticipantInput!
  relation: ParticipantCreateNestedOneWithoutParticipantInput
  bankAccount: BankAccountCreateNestedOneWithoutParticipantInput
  claims: ClaimCreateNestedManyWithoutParticipantInput
  employments: EmploymentCreateNestedManyWithoutParticipantInput
  contactInfos: ContactInfoCreateNestedManyWithoutParticipantInput
  programParticipations: ProgramParticipationCreateNestedManyWithoutParticipantInput
  balances: AccountCreateNestedManyWithoutParticipantInput
}

input BankAccountCreateNestedOneWithoutParticipantInput {
  create: BankAccountCreateWithoutParticipantInput
  connectOrCreate: BankAccountCreateOrConnectWithoutParticipantInput
  connect: BankAccountWhereUniqueInput
}

input BankAccountCreateWithoutParticipantInput {
  accountNumber: Float!
  accountName: String!
}

input BankAccountCreateOrConnectWithoutParticipantInput {
  where: BankAccountWhereUniqueInput!
  create: BankAccountCreateWithoutParticipantInput!
}

input BankAccountWhereUniqueInput {
  id: Int
  participantId: String
  AND: [BankAccountWhereInput!]
  OR: [BankAccountWhereInput!]
  NOT: [BankAccountWhereInput!]
  accountNumber: FloatFilter
  accountName: StringFilter
  participant: ParticipantRelationFilter
}

input ClaimCreateNestedManyWithoutParticipantInput {
  create: [ClaimCreateWithoutParticipantInput!]
  connectOrCreate: [ClaimCreateOrConnectWithoutParticipantInput!]
  createMany: ClaimCreateManyParticipantInputEnvelope
  connect: [ClaimWhereUniqueInput!]
}

input ClaimCreateWithoutParticipantInput {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  company: String!
  claimFinancials: ClaimFinancialCreateNestedOneWithoutClaimInput!
  claimProcesses: ClaimProcessCreateNestedOneWithoutClaimInput!
  disease: DiseaseCreateNestedOneWithoutClaimsInput
  clinics: ClinicCreateNestedOneWithoutClaimsInput!
  inputedBy: UserCreateNestedOneWithoutClaimsInputInput
  program: ProgramCreateNestedOneWithoutClaimsInput!
  waitingFor: UserCreateNestedOneWithoutClaimsOnWaitInput
  tags: TagCreateNestedManyWithoutClaimsInput
}

input ClaimFinancialCreateNestedOneWithoutClaimInput {
  create: ClaimFinancialCreateWithoutClaimInput
  connectOrCreate: ClaimFinancialCreateOrConnectWithoutClaimInput
  connect: ClaimFinancialWhereUniqueInput
}

input ClaimFinancialCreateWithoutClaimInput {
  requestedAmount: Float!
  paidAmount: Float
  rejectedAmount: Float
  transactionProcessDate: DateTime
  transferDate: DateTime
  branchPayee: BranchCreateNestedOneWithoutClaimFinancialInput
  claimStatus: ClaimStatusCreateNestedOneWithoutClaimFinancialInput
}

input BranchCreateNestedOneWithoutClaimFinancialInput {
  create: BranchCreateWithoutClaimFinancialInput
  connectOrCreate: BranchCreateOrConnectWithoutClaimFinancialInput
  connect: BranchWhereUniqueInput
}

input BranchCreateWithoutClaimFinancialInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  employment: EmploymentCreateNestedManyWithoutBranchInput
}

input EmploymentCreateNestedManyWithoutBranchInput {
  create: [EmploymentCreateWithoutBranchInput!]
  connectOrCreate: [EmploymentCreateOrConnectWithoutBranchInput!]
  createMany: EmploymentCreateManyBranchInputEnvelope
  connect: [EmploymentWhereUniqueInput!]
}

input EmploymentCreateWithoutBranchInput {
  employmentPosition: Position!
  participant: ParticipantCreateNestedOneWithoutEmploymentsInput!
  group: GroupCreateNestedOneWithoutEmploymentInput
  region: RegionCreateNestedOneWithoutEmploymentInput
}

input ParticipantCreateNestedOneWithoutEmploymentsInput {
  create: ParticipantCreateWithoutEmploymentsInput
  connectOrCreate: ParticipantCreateOrConnectWithoutEmploymentsInput
  connect: ParticipantWhereUniqueInput
}

input ParticipantCreateWithoutEmploymentsInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  user: UserCreateNestedOneWithoutParticipantInput!
  relation: ParticipantCreateNestedOneWithoutParticipantInput
  bankAccount: BankAccountCreateNestedOneWithoutParticipantInput
  claims: ClaimCreateNestedManyWithoutParticipantInput
  contactInfos: ContactInfoCreateNestedManyWithoutParticipantInput
  programParticipations: ProgramParticipationCreateNestedManyWithoutParticipantInput
  balances: AccountCreateNestedManyWithoutParticipantInput
  Participant: ParticipantCreateNestedManyWithoutRelationInput
}

input ContactInfoCreateNestedManyWithoutParticipantInput {
  create: [ContactInfoCreateWithoutParticipantInput!]
  connectOrCreate: [ContactInfoCreateOrConnectWithoutParticipantInput!]
  createMany: ContactInfoCreateManyParticipantInputEnvelope
  connect: [ContactInfoWhereUniqueInput!]
}

input ContactInfoCreateWithoutParticipantInput {
  telp: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  address: AddressCreateNestedOneWithoutContactInfoInput!
}

input AddressCreateNestedOneWithoutContactInfoInput {
  create: AddressCreateWithoutContactInfoInput
  connectOrCreate: AddressCreateOrConnectWithoutContactInfoInput
  connect: AddressWhereUniqueInput
}

input AddressCreateWithoutContactInfoInput {
  address: String!
  subdistrict: SubdistrictCreateNestedOneWithoutAddressInput!
}

input SubdistrictCreateNestedOneWithoutAddressInput {
  create: SubdistrictCreateWithoutAddressInput
  connectOrCreate: SubdistrictCreateOrConnectWithoutAddressInput
  connect: SubdistrictWhereUniqueInput
}

input SubdistrictCreateWithoutAddressInput {
  name: String!
  postalCode: String!
  district: DistrictCreateNestedOneWithoutSubdistrictsInput!
}

input DistrictCreateNestedOneWithoutSubdistrictsInput {
  create: DistrictCreateWithoutSubdistrictsInput
  connectOrCreate: DistrictCreateOrConnectWithoutSubdistrictsInput
  connect: DistrictWhereUniqueInput
}

input DistrictCreateWithoutSubdistrictsInput {
  name: String!
  city: CityCreateNestedOneWithoutDistrictsInput!
}

input CityCreateNestedOneWithoutDistrictsInput {
  create: CityCreateWithoutDistrictsInput
  connectOrCreate: CityCreateOrConnectWithoutDistrictsInput
  connect: CityWhereUniqueInput
}

input CityCreateWithoutDistrictsInput {
  name: String!
  province: ProvinceCreateNestedOneWithoutCitiesInput!
}

input ProvinceCreateNestedOneWithoutCitiesInput {
  create: ProvinceCreateWithoutCitiesInput
  connectOrCreate: ProvinceCreateOrConnectWithoutCitiesInput
  connect: ProvinceWhereUniqueInput
}

input ProvinceCreateWithoutCitiesInput {
  name: String!
}

input ProvinceCreateOrConnectWithoutCitiesInput {
  where: ProvinceWhereUniqueInput!
  create: ProvinceCreateWithoutCitiesInput!
}

input ProvinceWhereUniqueInput {
  id: Int
  name: String
  AND: [ProvinceWhereInput!]
  OR: [ProvinceWhereInput!]
  NOT: [ProvinceWhereInput!]
  cities: CityListRelationFilter
}

input CityCreateOrConnectWithoutDistrictsInput {
  where: CityWhereUniqueInput!
  create: CityCreateWithoutDistrictsInput!
}

input CityWhereUniqueInput {
  id: Int
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
  name: StringFilter
  provinceId: IntFilter
  province: ProvinceRelationFilter
  districts: DistrictListRelationFilter
}

input DistrictCreateOrConnectWithoutSubdistrictsInput {
  where: DistrictWhereUniqueInput!
  create: DistrictCreateWithoutSubdistrictsInput!
}

input DistrictWhereUniqueInput {
  id: Int
  AND: [DistrictWhereInput!]
  OR: [DistrictWhereInput!]
  NOT: [DistrictWhereInput!]
  name: StringFilter
  cityId: IntFilter
  city: CityRelationFilter
  subdistricts: SubdistrictListRelationFilter
}

input SubdistrictCreateOrConnectWithoutAddressInput {
  where: SubdistrictWhereUniqueInput!
  create: SubdistrictCreateWithoutAddressInput!
}

input SubdistrictWhereUniqueInput {
  id: Int
  AND: [SubdistrictWhereInput!]
  OR: [SubdistrictWhereInput!]
  NOT: [SubdistrictWhereInput!]
  name: StringFilter
  districtId: IntFilter
  postalCode: StringFilter
  district: DistrictRelationFilter
  address: AddressListRelationFilter
}

input AddressCreateOrConnectWithoutContactInfoInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutContactInfoInput!
}

input AddressWhereUniqueInput {
  id: Int
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  address: StringFilter
  subdistrictId: IntFilter
  subdistrict: SubdistrictRelationFilter
  ContactInfo: ContactInfoListRelationFilter
}

input ContactInfoCreateOrConnectWithoutParticipantInput {
  where: ContactInfoWhereUniqueInput!
  create: ContactInfoCreateWithoutParticipantInput!
}

input ContactInfoWhereUniqueInput {
  id: Int
  AND: [ContactInfoWhereInput!]
  OR: [ContactInfoWhereInput!]
  NOT: [ContactInfoWhereInput!]
  telp: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  participantId: StringFilter
  addressId: IntFilter
  participant: ParticipantRelationFilter
  address: AddressRelationFilter
}

input ContactInfoCreateManyParticipantInputEnvelope {
  data: [ContactInfoCreateManyParticipantInput!]!
  skipDuplicates: Boolean
}

input ContactInfoCreateManyParticipantInput {
  id: Int
  telp: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  addressId: Int!
}

input ProgramParticipationCreateNestedManyWithoutParticipantInput {
  create: [ProgramParticipationCreateWithoutParticipantInput!]
  connectOrCreate: [ProgramParticipationCreateOrConnectWithoutParticipantInput!]
  createMany: ProgramParticipationCreateManyParticipantInputEnvelope
  connect: [ProgramParticipationWhereUniqueInput!]
}

input ProgramParticipationCreateWithoutParticipantInput {
  bpjsNumber: String
  nonActiveReason: String
  effectiveDate: DateTime!
  nonActiveDate: DateTime
  funding: AccountCreateNestedOneWithoutProgramParticipationInput!
  Program: ProgramCreateNestedOneWithoutProgramParticipationsInput
}

input AccountCreateNestedOneWithoutProgramParticipationInput {
  create: AccountCreateWithoutProgramParticipationInput
  connectOrCreate: AccountCreateOrConnectWithoutProgramParticipationInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutProgramParticipationInput {
  currentBalance: Float!
  currentBalanceLastUpdate: DateTime
  participant: ParticipantCreateNestedOneWithoutBalancesInput!
  transactions: TransactionCreateNestedManyWithoutAccountInput
}

input ParticipantCreateNestedOneWithoutBalancesInput {
  create: ParticipantCreateWithoutBalancesInput
  connectOrCreate: ParticipantCreateOrConnectWithoutBalancesInput
  connect: ParticipantWhereUniqueInput
}

input ParticipantCreateWithoutBalancesInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  user: UserCreateNestedOneWithoutParticipantInput!
  relation: ParticipantCreateNestedOneWithoutParticipantInput
  bankAccount: BankAccountCreateNestedOneWithoutParticipantInput
  claims: ClaimCreateNestedManyWithoutParticipantInput
  employments: EmploymentCreateNestedManyWithoutParticipantInput
  contactInfos: ContactInfoCreateNestedManyWithoutParticipantInput
  programParticipations: ProgramParticipationCreateNestedManyWithoutParticipantInput
  Participant: ParticipantCreateNestedManyWithoutRelationInput
}

input EmploymentCreateNestedManyWithoutParticipantInput {
  create: [EmploymentCreateWithoutParticipantInput!]
  connectOrCreate: [EmploymentCreateOrConnectWithoutParticipantInput!]
  createMany: EmploymentCreateManyParticipantInputEnvelope
  connect: [EmploymentWhereUniqueInput!]
}

input EmploymentCreateWithoutParticipantInput {
  employmentPosition: Position!
  branch: BranchCreateNestedOneWithoutEmploymentInput!
  group: GroupCreateNestedOneWithoutEmploymentInput
  region: RegionCreateNestedOneWithoutEmploymentInput
}

input BranchCreateNestedOneWithoutEmploymentInput {
  create: BranchCreateWithoutEmploymentInput
  connectOrCreate: BranchCreateOrConnectWithoutEmploymentInput
  connect: BranchWhereUniqueInput
}

input BranchCreateWithoutEmploymentInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  claimFinancial: ClaimFinancialCreateNestedManyWithoutBranchPayeeInput
}

input ClaimFinancialCreateNestedManyWithoutBranchPayeeInput {
  create: [ClaimFinancialCreateWithoutBranchPayeeInput!]
  connectOrCreate: [ClaimFinancialCreateOrConnectWithoutBranchPayeeInput!]
  createMany: ClaimFinancialCreateManyBranchPayeeInputEnvelope
  connect: [ClaimFinancialWhereUniqueInput!]
}

input ClaimFinancialCreateWithoutBranchPayeeInput {
  requestedAmount: Float!
  paidAmount: Float
  rejectedAmount: Float
  transactionProcessDate: DateTime
  transferDate: DateTime
  claim: ClaimCreateNestedOneWithoutClaimFinancialsInput
  claimStatus: ClaimStatusCreateNestedOneWithoutClaimFinancialInput
}

input ClaimCreateNestedOneWithoutClaimFinancialsInput {
  create: ClaimCreateWithoutClaimFinancialsInput
  connectOrCreate: ClaimCreateOrConnectWithoutClaimFinancialsInput
  connect: ClaimWhereUniqueInput
}

input ClaimCreateWithoutClaimFinancialsInput {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  company: String!
  participant: ParticipantCreateNestedOneWithoutClaimsInput!
  claimProcesses: ClaimProcessCreateNestedOneWithoutClaimInput!
  disease: DiseaseCreateNestedOneWithoutClaimsInput
  clinics: ClinicCreateNestedOneWithoutClaimsInput!
  inputedBy: UserCreateNestedOneWithoutClaimsInputInput
  program: ProgramCreateNestedOneWithoutClaimsInput!
  waitingFor: UserCreateNestedOneWithoutClaimsOnWaitInput
  tags: TagCreateNestedManyWithoutClaimsInput
}

input ClaimProcessCreateNestedOneWithoutClaimInput {
  create: ClaimProcessCreateWithoutClaimInput
  connectOrCreate: ClaimProcessCreateOrConnectWithoutClaimInput
  connect: ClaimProcessWhereUniqueInput
}

input ClaimProcessCreateWithoutClaimInput {
  startTreatment: DateTime
  endTreatment: DateTime
  expeditionDate: DateTime
  reclaim: String
  processDate: DateTime
  submissionNote: String
  description: String
  additionalNote: String
  documents: DocumentCreateNestedManyWithoutClaimProcessInput
}

input DocumentCreateNestedManyWithoutClaimProcessInput {
  create: [DocumentCreateWithoutClaimProcessInput!]
  connectOrCreate: [DocumentCreateOrConnectWithoutClaimProcessInput!]
  createMany: DocumentCreateManyClaimProcessInputEnvelope
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCreateWithoutClaimProcessInput {
  id: String
  name: String!
  path: String!
  size: Int!
  printCount: Int!
  createdAt: DateTime
  updatedAt: DateTime
  source: DocumentSource!
  type: DocumentType!
  rejectionLetterOf: ClaimStatusCreateNestedOneWithoutRejectionLetterInput
  guaranteeLetterOf: ClaimStatusCreateNestedOneWithoutGuaranteeLetterInput
  transactionLetterOf: ClaimStatusCreateNestedOneWithoutTransactionLetterInput
  bookKeepingOrderOf: ClaimStatusCreateNestedOneWithoutBookKeepingOrderInput
}

input ClaimStatusCreateNestedOneWithoutRejectionLetterInput {
  create: ClaimStatusCreateWithoutRejectionLetterInput
  connectOrCreate: ClaimStatusCreateOrConnectWithoutRejectionLetterInput
  connect: ClaimStatusWhereUniqueInput
}

input ClaimStatusCreateWithoutRejectionLetterInput {
  description: String
  rejectionReason: String
  createdAt: DateTime
  status: ClaimStatusType!
  createBy: UserCreateNestedOneWithoutClaimActionsInput!
  claim: ClaimCreateNestedOneWithoutClaimStatusesInput!
  guaranteeLetter: DocumentCreateNestedOneWithoutGuaranteeLetterOfInput
  transactionLetter: DocumentCreateNestedOneWithoutTransactionLetterOfInput
  bookKeepingOrder: DocumentCreateNestedOneWithoutBookKeepingOrderOfInput
  claimFinancial: ClaimFinancialCreateNestedOneWithoutClaimStatusInput
}

input UserCreateNestedOneWithoutClaimActionsInput {
  create: UserCreateWithoutClaimActionsInput
  connectOrCreate: UserCreateOrConnectWithoutClaimActionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutClaimActionsInput {
  id: String
  fullName: String!
  email: String!
  emailVerifiedAt: DateTime
  password: String!
  profilePictureUrl: String
  deletedAt: DateTime
  participantId: Int
  role: RoleCreateNestedOneWithoutUsersInput!
  participant: ParticipantCreateNestedOneWithoutUserInput
  claimsInput: ClaimCreateNestedManyWithoutInputedByInput
  announcementCreated: AnnouncementCreateNestedManyWithoutCreatedByInput
  notification: NotificationCreateNestedManyWithoutUserInput
  claimsOnWait: ClaimCreateNestedManyWithoutWaitingForInput
}

input ClaimCreateNestedManyWithoutInputedByInput {
  create: [ClaimCreateWithoutInputedByInput!]
  connectOrCreate: [ClaimCreateOrConnectWithoutInputedByInput!]
  createMany: ClaimCreateManyInputedByInputEnvelope
  connect: [ClaimWhereUniqueInput!]
}

input ClaimCreateWithoutInputedByInput {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  company: String!
  participant: ParticipantCreateNestedOneWithoutClaimsInput!
  claimFinancials: ClaimFinancialCreateNestedOneWithoutClaimInput!
  claimProcesses: ClaimProcessCreateNestedOneWithoutClaimInput!
  disease: DiseaseCreateNestedOneWithoutClaimsInput
  clinics: ClinicCreateNestedOneWithoutClaimsInput!
  program: ProgramCreateNestedOneWithoutClaimsInput!
  waitingFor: UserCreateNestedOneWithoutClaimsOnWaitInput
  tags: TagCreateNestedManyWithoutClaimsInput
}

input DiseaseCreateNestedOneWithoutClaimsInput {
  create: DiseaseCreateWithoutClaimsInput
  connectOrCreate: DiseaseCreateOrConnectWithoutClaimsInput
  connect: DiseaseWhereUniqueInput
}

input DiseaseCreateWithoutClaimsInput {
  code: String!
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input DiseaseCreateOrConnectWithoutClaimsInput {
  where: DiseaseWhereUniqueInput!
  create: DiseaseCreateWithoutClaimsInput!
}

input DiseaseWhereUniqueInput {
  id: Int
  AND: [DiseaseWhereInput!]
  OR: [DiseaseWhereInput!]
  NOT: [DiseaseWhereInput!]
  code: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  claims: ClaimListRelationFilter
}

input ClinicCreateNestedOneWithoutClaimsInput {
  create: ClinicCreateWithoutClaimsInput
  connectOrCreate: ClinicCreateOrConnectWithoutClaimsInput
  connect: ClinicWhereUniqueInput
}

input ClinicCreateWithoutClaimsInput {
  code: String!
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ClinicCreateOrConnectWithoutClaimsInput {
  where: ClinicWhereUniqueInput!
  create: ClinicCreateWithoutClaimsInput!
}

input ClinicWhereUniqueInput {
  id: Int
  AND: [ClinicWhereInput!]
  OR: [ClinicWhereInput!]
  NOT: [ClinicWhereInput!]
  code: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  claims: ClaimListRelationFilter
}

input ProgramCreateNestedOneWithoutClaimsInput {
  create: ProgramCreateWithoutClaimsInput
  connectOrCreate: ProgramCreateOrConnectWithoutClaimsInput
  connect: ProgramWhereUniqueInput
}

input ProgramCreateWithoutClaimsInput {
  plan: ApplicationType!
  maxAllowancePercentage: Int
  allowanceCeiling: Float
  maxAllowancePerYear: Float
  claimPeriodMax: Int
  reclaimPeriodMax: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  class: Class!
  programParticipations: ProgramParticipationCreateNestedManyWithoutProgramInput
}

input ProgramParticipationCreateNestedManyWithoutProgramInput {
  create: [ProgramParticipationCreateWithoutProgramInput!]
  connectOrCreate: [ProgramParticipationCreateOrConnectWithoutProgramInput!]
  createMany: ProgramParticipationCreateManyProgramInputEnvelope
  connect: [ProgramParticipationWhereUniqueInput!]
}

input ProgramParticipationCreateWithoutProgramInput {
  bpjsNumber: String
  nonActiveReason: String
  effectiveDate: DateTime!
  nonActiveDate: DateTime
  participant: ParticipantCreateNestedOneWithoutProgramParticipationsInput!
  funding: AccountCreateNestedOneWithoutProgramParticipationInput!
}

input ParticipantCreateNestedOneWithoutProgramParticipationsInput {
  create: ParticipantCreateWithoutProgramParticipationsInput
  connectOrCreate: ParticipantCreateOrConnectWithoutProgramParticipationsInput
  connect: ParticipantWhereUniqueInput
}

input ParticipantCreateWithoutProgramParticipationsInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  user: UserCreateNestedOneWithoutParticipantInput!
  relation: ParticipantCreateNestedOneWithoutParticipantInput
  bankAccount: BankAccountCreateNestedOneWithoutParticipantInput
  claims: ClaimCreateNestedManyWithoutParticipantInput
  employments: EmploymentCreateNestedManyWithoutParticipantInput
  contactInfos: ContactInfoCreateNestedManyWithoutParticipantInput
  balances: AccountCreateNestedManyWithoutParticipantInput
  Participant: ParticipantCreateNestedManyWithoutRelationInput
}

input AccountCreateNestedManyWithoutParticipantInput {
  create: [AccountCreateWithoutParticipantInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutParticipantInput!]
  createMany: AccountCreateManyParticipantInputEnvelope
  connect: [AccountWhereUniqueInput!]
}

input AccountCreateWithoutParticipantInput {
  currentBalance: Float!
  currentBalanceLastUpdate: DateTime
  transactions: TransactionCreateNestedManyWithoutAccountInput
  programParticipation: ProgramParticipationCreateNestedManyWithoutFundingInput
}

input TransactionCreateNestedManyWithoutAccountInput {
  create: [TransactionCreateWithoutAccountInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutAccountInput!]
  createMany: TransactionCreateManyAccountInputEnvelope
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutAccountInput {
  amount: Float!
  transactionType: TransactionType!
  description: String
  createdAt: DateTime
}

input TransactionCreateOrConnectWithoutAccountInput {
  where: TransactionWhereUniqueInput!
  create: TransactionCreateWithoutAccountInput!
}

input TransactionWhereUniqueInput {
  id: Int
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  amount: FloatFilter
  transactionType: EnumTransactionTypeFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  accountId: IntFilter
  account: AccountRelationFilter
}

input TransactionCreateManyAccountInputEnvelope {
  data: [TransactionCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateManyAccountInput {
  id: Int
  amount: Float!
  transactionType: TransactionType!
  description: String
  createdAt: DateTime
}

input ProgramParticipationCreateNestedManyWithoutFundingInput {
  create: [ProgramParticipationCreateWithoutFundingInput!]
  connectOrCreate: [ProgramParticipationCreateOrConnectWithoutFundingInput!]
  createMany: ProgramParticipationCreateManyFundingInputEnvelope
  connect: [ProgramParticipationWhereUniqueInput!]
}

input ProgramParticipationCreateWithoutFundingInput {
  bpjsNumber: String
  nonActiveReason: String
  effectiveDate: DateTime!
  nonActiveDate: DateTime
  participant: ParticipantCreateNestedOneWithoutProgramParticipationsInput!
  Program: ProgramCreateNestedOneWithoutProgramParticipationsInput
}

input ProgramCreateNestedOneWithoutProgramParticipationsInput {
  create: ProgramCreateWithoutProgramParticipationsInput
  connectOrCreate: ProgramCreateOrConnectWithoutProgramParticipationsInput
  connect: ProgramWhereUniqueInput
}

input ProgramCreateWithoutProgramParticipationsInput {
  plan: ApplicationType!
  maxAllowancePercentage: Int
  allowanceCeiling: Float
  maxAllowancePerYear: Float
  claimPeriodMax: Int
  reclaimPeriodMax: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  class: Class!
  claims: ClaimCreateNestedManyWithoutProgramInput
}

input ClaimCreateNestedManyWithoutProgramInput {
  create: [ClaimCreateWithoutProgramInput!]
  connectOrCreate: [ClaimCreateOrConnectWithoutProgramInput!]
  createMany: ClaimCreateManyProgramInputEnvelope
  connect: [ClaimWhereUniqueInput!]
}

input ClaimCreateWithoutProgramInput {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  company: String!
  participant: ParticipantCreateNestedOneWithoutClaimsInput!
  claimFinancials: ClaimFinancialCreateNestedOneWithoutClaimInput!
  claimProcesses: ClaimProcessCreateNestedOneWithoutClaimInput!
  disease: DiseaseCreateNestedOneWithoutClaimsInput
  clinics: ClinicCreateNestedOneWithoutClaimsInput!
  inputedBy: UserCreateNestedOneWithoutClaimsInputInput
  waitingFor: UserCreateNestedOneWithoutClaimsOnWaitInput
  tags: TagCreateNestedManyWithoutClaimsInput
}

input UserCreateNestedOneWithoutClaimsInputInput {
  create: UserCreateWithoutClaimsInputInput
  connectOrCreate: UserCreateOrConnectWithoutClaimsInputInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutClaimsInputInput {
  id: String
  fullName: String!
  email: String!
  emailVerifiedAt: DateTime
  password: String!
  profilePictureUrl: String
  deletedAt: DateTime
  participantId: Int
  role: RoleCreateNestedOneWithoutUsersInput!
  participant: ParticipantCreateNestedOneWithoutUserInput
  claimActions: ClaimStatusCreateNestedManyWithoutCreateByInput
  announcementCreated: AnnouncementCreateNestedManyWithoutCreatedByInput
  notification: NotificationCreateNestedManyWithoutUserInput
  claimsOnWait: ClaimCreateNestedManyWithoutWaitingForInput
}

input ClaimStatusCreateNestedManyWithoutCreateByInput {
  create: [ClaimStatusCreateWithoutCreateByInput!]
  connectOrCreate: [ClaimStatusCreateOrConnectWithoutCreateByInput!]
  createMany: ClaimStatusCreateManyCreateByInputEnvelope
  connect: [ClaimStatusWhereUniqueInput!]
}

input ClaimStatusCreateWithoutCreateByInput {
  description: String
  rejectionReason: String
  createdAt: DateTime
  status: ClaimStatusType!
  claim: ClaimCreateNestedOneWithoutClaimStatusesInput!
  rejectionLetter: DocumentCreateNestedOneWithoutRejectionLetterOfInput
  guaranteeLetter: DocumentCreateNestedOneWithoutGuaranteeLetterOfInput
  transactionLetter: DocumentCreateNestedOneWithoutTransactionLetterOfInput
  bookKeepingOrder: DocumentCreateNestedOneWithoutBookKeepingOrderOfInput
  claimFinancial: ClaimFinancialCreateNestedOneWithoutClaimStatusInput
}

input ClaimCreateNestedOneWithoutClaimStatusesInput {
  create: ClaimCreateWithoutClaimStatusesInput
  connectOrCreate: ClaimCreateOrConnectWithoutClaimStatusesInput
  connect: ClaimWhereUniqueInput
}

input ClaimCreateWithoutClaimStatusesInput {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  company: String!
  participant: ParticipantCreateNestedOneWithoutClaimsInput!
  claimFinancials: ClaimFinancialCreateNestedOneWithoutClaimInput!
  claimProcesses: ClaimProcessCreateNestedOneWithoutClaimInput!
  disease: DiseaseCreateNestedOneWithoutClaimsInput
  clinics: ClinicCreateNestedOneWithoutClaimsInput!
  inputedBy: UserCreateNestedOneWithoutClaimsInputInput
  program: ProgramCreateNestedOneWithoutClaimsInput!
  waitingFor: UserCreateNestedOneWithoutClaimsOnWaitInput
  tags: TagCreateNestedManyWithoutClaimsInput
}

input UserCreateNestedOneWithoutClaimsOnWaitInput {
  create: UserCreateWithoutClaimsOnWaitInput
  connectOrCreate: UserCreateOrConnectWithoutClaimsOnWaitInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutClaimsOnWaitInput {
  id: String
  fullName: String!
  email: String!
  emailVerifiedAt: DateTime
  password: String!
  profilePictureUrl: String
  deletedAt: DateTime
  participantId: Int
  role: RoleCreateNestedOneWithoutUsersInput!
  participant: ParticipantCreateNestedOneWithoutUserInput
  claimsInput: ClaimCreateNestedManyWithoutInputedByInput
  claimActions: ClaimStatusCreateNestedManyWithoutCreateByInput
  announcementCreated: AnnouncementCreateNestedManyWithoutCreatedByInput
  notification: NotificationCreateNestedManyWithoutUserInput
}

input AnnouncementCreateNestedManyWithoutCreatedByInput {
  create: [AnnouncementCreateWithoutCreatedByInput!]
  connectOrCreate: [AnnouncementCreateOrConnectWithoutCreatedByInput!]
  createMany: AnnouncementCreateManyCreatedByInputEnvelope
  connect: [AnnouncementWhereUniqueInput!]
}

input AnnouncementCreateWithoutCreatedByInput {
  title: String!
  content: String!
  imageUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

input AnnouncementCreateOrConnectWithoutCreatedByInput {
  where: AnnouncementWhereUniqueInput!
  create: AnnouncementCreateWithoutCreatedByInput!
}

input AnnouncementWhereUniqueInput {
  id: Int
  AND: [AnnouncementWhereInput!]
  OR: [AnnouncementWhereInput!]
  NOT: [AnnouncementWhereInput!]
  title: StringFilter
  content: StringFilter
  imageUrl: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  createdById: StringFilter
  createdBy: UserRelationFilter
}

input AnnouncementCreateManyCreatedByInputEnvelope {
  data: [AnnouncementCreateManyCreatedByInput!]!
  skipDuplicates: Boolean
}

input AnnouncementCreateManyCreatedByInput {
  id: Int
  title: String!
  content: String!
  imageUrl: String
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationCreateNestedManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput!]
  createMany: NotificationCreateManyUserInputEnvelope
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateWithoutUserInput {
  isRead: Boolean
  isCleared: Boolean
}

input NotificationCreateOrConnectWithoutUserInput {
  where: NotificationWhereUniqueInput!
  create: NotificationCreateWithoutUserInput!
}

input NotificationCreateManyUserInputEnvelope {
  data: [NotificationCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input NotificationCreateManyUserInput {
  id: Int
  isRead: Boolean
  isCleared: Boolean
}

input UserCreateOrConnectWithoutClaimsOnWaitInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutClaimsOnWaitInput!
}

input UserWhereUniqueInput {
  id: String
  email: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  fullName: StringFilter
  emailVerifiedAt: DateTimeNullableFilter
  password: StringFilter
  profilePictureUrl: StringNullableFilter
  deletedAt: DateTimeNullableFilter
  roleId: IntFilter
  participantId: IntNullableFilter
  role: RoleRelationFilter
  participant: ParticipantNullableRelationFilter
  claimsInput: ClaimListRelationFilter
  claimActions: ClaimStatusListRelationFilter
  announcementCreated: AnnouncementListRelationFilter
  notification: NotificationListRelationFilter
  claimsOnWait: ClaimListRelationFilter
}

input TagCreateNestedManyWithoutClaimsInput {
  create: [TagCreateWithoutClaimsInput!]
  connectOrCreate: [TagCreateOrConnectWithoutClaimsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutClaimsInput {
  name: String!
  color: Color!
  createdAt: DateTime
  updatedAt: DateTime
}

input TagCreateOrConnectWithoutClaimsInput {
  where: TagWhereUniqueInput!
  create: TagCreateWithoutClaimsInput!
}

input TagWhereUniqueInput {
  id: Int
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  name: StringFilter
  color: EnumColorFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Claims: ClaimListRelationFilter
}

input ClaimCreateOrConnectWithoutClaimStatusesInput {
  where: ClaimWhereUniqueInput!
  create: ClaimCreateWithoutClaimStatusesInput!
}

input DocumentCreateNestedOneWithoutRejectionLetterOfInput {
  create: DocumentCreateWithoutRejectionLetterOfInput
  connectOrCreate: DocumentCreateOrConnectWithoutRejectionLetterOfInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateWithoutRejectionLetterOfInput {
  id: String
  name: String!
  path: String!
  size: Int!
  printCount: Int!
  createdAt: DateTime
  updatedAt: DateTime
  source: DocumentSource!
  type: DocumentType!
  guaranteeLetterOf: ClaimStatusCreateNestedOneWithoutGuaranteeLetterInput
  transactionLetterOf: ClaimStatusCreateNestedOneWithoutTransactionLetterInput
  bookKeepingOrderOf: ClaimStatusCreateNestedOneWithoutBookKeepingOrderInput
  claimProcess: ClaimProcessCreateNestedOneWithoutDocumentsInput
}

input ClaimStatusCreateNestedOneWithoutGuaranteeLetterInput {
  create: ClaimStatusCreateWithoutGuaranteeLetterInput
  connectOrCreate: ClaimStatusCreateOrConnectWithoutGuaranteeLetterInput
  connect: ClaimStatusWhereUniqueInput
}

input ClaimStatusCreateWithoutGuaranteeLetterInput {
  description: String
  rejectionReason: String
  createdAt: DateTime
  status: ClaimStatusType!
  createBy: UserCreateNestedOneWithoutClaimActionsInput!
  claim: ClaimCreateNestedOneWithoutClaimStatusesInput!
  rejectionLetter: DocumentCreateNestedOneWithoutRejectionLetterOfInput
  transactionLetter: DocumentCreateNestedOneWithoutTransactionLetterOfInput
  bookKeepingOrder: DocumentCreateNestedOneWithoutBookKeepingOrderOfInput
  claimFinancial: ClaimFinancialCreateNestedOneWithoutClaimStatusInput
}

input DocumentCreateNestedOneWithoutTransactionLetterOfInput {
  create: DocumentCreateWithoutTransactionLetterOfInput
  connectOrCreate: DocumentCreateOrConnectWithoutTransactionLetterOfInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateWithoutTransactionLetterOfInput {
  id: String
  name: String!
  path: String!
  size: Int!
  printCount: Int!
  createdAt: DateTime
  updatedAt: DateTime
  source: DocumentSource!
  type: DocumentType!
  rejectionLetterOf: ClaimStatusCreateNestedOneWithoutRejectionLetterInput
  guaranteeLetterOf: ClaimStatusCreateNestedOneWithoutGuaranteeLetterInput
  bookKeepingOrderOf: ClaimStatusCreateNestedOneWithoutBookKeepingOrderInput
  claimProcess: ClaimProcessCreateNestedOneWithoutDocumentsInput
}

input ClaimStatusCreateNestedOneWithoutBookKeepingOrderInput {
  create: ClaimStatusCreateWithoutBookKeepingOrderInput
  connectOrCreate: ClaimStatusCreateOrConnectWithoutBookKeepingOrderInput
  connect: ClaimStatusWhereUniqueInput
}

input ClaimStatusCreateWithoutBookKeepingOrderInput {
  description: String
  rejectionReason: String
  createdAt: DateTime
  status: ClaimStatusType!
  createBy: UserCreateNestedOneWithoutClaimActionsInput!
  claim: ClaimCreateNestedOneWithoutClaimStatusesInput!
  rejectionLetter: DocumentCreateNestedOneWithoutRejectionLetterOfInput
  guaranteeLetter: DocumentCreateNestedOneWithoutGuaranteeLetterOfInput
  transactionLetter: DocumentCreateNestedOneWithoutTransactionLetterOfInput
  claimFinancial: ClaimFinancialCreateNestedOneWithoutClaimStatusInput
}

input DocumentCreateNestedOneWithoutGuaranteeLetterOfInput {
  create: DocumentCreateWithoutGuaranteeLetterOfInput
  connectOrCreate: DocumentCreateOrConnectWithoutGuaranteeLetterOfInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateWithoutGuaranteeLetterOfInput {
  id: String
  name: String!
  path: String!
  size: Int!
  printCount: Int!
  createdAt: DateTime
  updatedAt: DateTime
  source: DocumentSource!
  type: DocumentType!
  rejectionLetterOf: ClaimStatusCreateNestedOneWithoutRejectionLetterInput
  transactionLetterOf: ClaimStatusCreateNestedOneWithoutTransactionLetterInput
  bookKeepingOrderOf: ClaimStatusCreateNestedOneWithoutBookKeepingOrderInput
  claimProcess: ClaimProcessCreateNestedOneWithoutDocumentsInput
}

input ClaimStatusCreateNestedOneWithoutTransactionLetterInput {
  create: ClaimStatusCreateWithoutTransactionLetterInput
  connectOrCreate: ClaimStatusCreateOrConnectWithoutTransactionLetterInput
  connect: ClaimStatusWhereUniqueInput
}

input ClaimStatusCreateWithoutTransactionLetterInput {
  description: String
  rejectionReason: String
  createdAt: DateTime
  status: ClaimStatusType!
  createBy: UserCreateNestedOneWithoutClaimActionsInput!
  claim: ClaimCreateNestedOneWithoutClaimStatusesInput!
  rejectionLetter: DocumentCreateNestedOneWithoutRejectionLetterOfInput
  guaranteeLetter: DocumentCreateNestedOneWithoutGuaranteeLetterOfInput
  bookKeepingOrder: DocumentCreateNestedOneWithoutBookKeepingOrderOfInput
  claimFinancial: ClaimFinancialCreateNestedOneWithoutClaimStatusInput
}

input DocumentCreateNestedOneWithoutBookKeepingOrderOfInput {
  create: DocumentCreateWithoutBookKeepingOrderOfInput
  connectOrCreate: DocumentCreateOrConnectWithoutBookKeepingOrderOfInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateWithoutBookKeepingOrderOfInput {
  id: String
  name: String!
  path: String!
  size: Int!
  printCount: Int!
  createdAt: DateTime
  updatedAt: DateTime
  source: DocumentSource!
  type: DocumentType!
  rejectionLetterOf: ClaimStatusCreateNestedOneWithoutRejectionLetterInput
  guaranteeLetterOf: ClaimStatusCreateNestedOneWithoutGuaranteeLetterInput
  transactionLetterOf: ClaimStatusCreateNestedOneWithoutTransactionLetterInput
  claimProcess: ClaimProcessCreateNestedOneWithoutDocumentsInput
}

input ClaimProcessCreateNestedOneWithoutDocumentsInput {
  create: ClaimProcessCreateWithoutDocumentsInput
  connectOrCreate: ClaimProcessCreateOrConnectWithoutDocumentsInput
  connect: ClaimProcessWhereUniqueInput
}

input ClaimProcessCreateWithoutDocumentsInput {
  startTreatment: DateTime
  endTreatment: DateTime
  expeditionDate: DateTime
  reclaim: String
  processDate: DateTime
  submissionNote: String
  description: String
  additionalNote: String
  claim: ClaimCreateNestedOneWithoutClaimProcessesInput
}

input ClaimCreateNestedOneWithoutClaimProcessesInput {
  create: ClaimCreateWithoutClaimProcessesInput
  connectOrCreate: ClaimCreateOrConnectWithoutClaimProcessesInput
  connect: ClaimWhereUniqueInput
}

input ClaimCreateWithoutClaimProcessesInput {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  company: String!
  participant: ParticipantCreateNestedOneWithoutClaimsInput!
  claimFinancials: ClaimFinancialCreateNestedOneWithoutClaimInput!
  disease: DiseaseCreateNestedOneWithoutClaimsInput
  clinics: ClinicCreateNestedOneWithoutClaimsInput!
  inputedBy: UserCreateNestedOneWithoutClaimsInputInput
  program: ProgramCreateNestedOneWithoutClaimsInput!
  waitingFor: UserCreateNestedOneWithoutClaimsOnWaitInput
  tags: TagCreateNestedManyWithoutClaimsInput
}

input ClaimCreateOrConnectWithoutClaimProcessesInput {
  where: ClaimWhereUniqueInput!
  create: ClaimCreateWithoutClaimProcessesInput!
}

input ClaimProcessCreateOrConnectWithoutDocumentsInput {
  where: ClaimProcessWhereUniqueInput!
  create: ClaimProcessCreateWithoutDocumentsInput!
}

input ClaimProcessWhereUniqueInput {
  id: Int
  AND: [ClaimProcessWhereInput!]
  OR: [ClaimProcessWhereInput!]
  NOT: [ClaimProcessWhereInput!]
  startTreatment: DateTimeNullableFilter
  endTreatment: DateTimeNullableFilter
  expeditionDate: DateTimeNullableFilter
  reclaim: StringNullableFilter
  processDate: DateTimeNullableFilter
  submissionNote: StringNullableFilter
  description: StringNullableFilter
  additionalNote: StringNullableFilter
  claim: ClaimNullableRelationFilter
  documents: DocumentListRelationFilter
}

input DocumentCreateOrConnectWithoutBookKeepingOrderOfInput {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutBookKeepingOrderOfInput!
}

input DocumentWhereUniqueInput {
  id: String
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  name: StringFilter
  path: StringFilter
  size: IntFilter
  printCount: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  source: EnumDocumentSourceFilter
  type: EnumDocumentTypeFilter
  claimProcessId: IntNullableFilter
  rejectionLetterOf: ClaimStatusNullableRelationFilter
  guaranteeLetterOf: ClaimStatusNullableRelationFilter
  transactionLetterOf: ClaimStatusNullableRelationFilter
  bookKeepingOrderOf: ClaimStatusNullableRelationFilter
  claimProcess: ClaimProcessNullableRelationFilter
}

input ClaimFinancialCreateNestedOneWithoutClaimStatusInput {
  create: ClaimFinancialCreateWithoutClaimStatusInput
  connectOrCreate: ClaimFinancialCreateOrConnectWithoutClaimStatusInput
  connect: ClaimFinancialWhereUniqueInput
}

input ClaimFinancialCreateWithoutClaimStatusInput {
  requestedAmount: Float!
  paidAmount: Float
  rejectedAmount: Float
  transactionProcessDate: DateTime
  transferDate: DateTime
  branchPayee: BranchCreateNestedOneWithoutClaimFinancialInput
  claim: ClaimCreateNestedOneWithoutClaimFinancialsInput
}

input ClaimFinancialCreateOrConnectWithoutClaimStatusInput {
  where: ClaimFinancialWhereUniqueInput!
  create: ClaimFinancialCreateWithoutClaimStatusInput!
}

input ClaimFinancialWhereUniqueInput {
  id: Int
  claimStatusId: Int
  AND: [ClaimFinancialWhereInput!]
  OR: [ClaimFinancialWhereInput!]
  NOT: [ClaimFinancialWhereInput!]
  requestedAmount: FloatFilter
  paidAmount: FloatNullableFilter
  rejectedAmount: FloatNullableFilter
  transactionProcessDate: DateTimeNullableFilter
  transferDate: DateTimeNullableFilter
  branchId: IntNullableFilter
  branchPayee: BranchNullableRelationFilter
  claim: ClaimNullableRelationFilter
  claimStatus: ClaimStatusNullableRelationFilter
}

input ClaimStatusCreateOrConnectWithoutTransactionLetterInput {
  where: ClaimStatusWhereUniqueInput!
  create: ClaimStatusCreateWithoutTransactionLetterInput!
}

input DocumentCreateOrConnectWithoutGuaranteeLetterOfInput {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutGuaranteeLetterOfInput!
}

input ClaimStatusCreateOrConnectWithoutBookKeepingOrderInput {
  where: ClaimStatusWhereUniqueInput!
  create: ClaimStatusCreateWithoutBookKeepingOrderInput!
}

input DocumentCreateOrConnectWithoutTransactionLetterOfInput {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutTransactionLetterOfInput!
}

input ClaimStatusCreateOrConnectWithoutGuaranteeLetterInput {
  where: ClaimStatusWhereUniqueInput!
  create: ClaimStatusCreateWithoutGuaranteeLetterInput!
}

input DocumentCreateOrConnectWithoutRejectionLetterOfInput {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutRejectionLetterOfInput!
}

input ClaimStatusCreateOrConnectWithoutCreateByInput {
  where: ClaimStatusWhereUniqueInput!
  create: ClaimStatusCreateWithoutCreateByInput!
}

input ClaimStatusCreateManyCreateByInputEnvelope {
  data: [ClaimStatusCreateManyCreateByInput!]!
  skipDuplicates: Boolean
}

input ClaimStatusCreateManyCreateByInput {
  id: Int
  description: String
  rejectionReason: String
  createdAt: DateTime
  status: ClaimStatusType!
  claimId: String!
  rejectionLetterId: String
  guaranteeLetterId: String
  transactionLetterId: String
  bookKeepingOrderId: String
}

input ClaimCreateNestedManyWithoutWaitingForInput {
  create: [ClaimCreateWithoutWaitingForInput!]
  connectOrCreate: [ClaimCreateOrConnectWithoutWaitingForInput!]
  createMany: ClaimCreateManyWaitingForInputEnvelope
  connect: [ClaimWhereUniqueInput!]
}

input ClaimCreateWithoutWaitingForInput {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  company: String!
  participant: ParticipantCreateNestedOneWithoutClaimsInput!
  claimFinancials: ClaimFinancialCreateNestedOneWithoutClaimInput!
  claimProcesses: ClaimProcessCreateNestedOneWithoutClaimInput!
  disease: DiseaseCreateNestedOneWithoutClaimsInput
  clinics: ClinicCreateNestedOneWithoutClaimsInput!
  inputedBy: UserCreateNestedOneWithoutClaimsInputInput
  program: ProgramCreateNestedOneWithoutClaimsInput!
  tags: TagCreateNestedManyWithoutClaimsInput
}

input ClaimCreateOrConnectWithoutWaitingForInput {
  where: ClaimWhereUniqueInput!
  create: ClaimCreateWithoutWaitingForInput!
}

input ClaimCreateManyWaitingForInputEnvelope {
  data: [ClaimCreateManyWaitingForInput!]!
  skipDuplicates: Boolean
}

input ClaimCreateManyWaitingForInput {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  company: String!
  participantId: String!
  claimFinancialId: Int!
  claimProcessId: Int!
  diseaseId: Int
  clinicId: Int!
  inputedById: String
  programId: Int!
}

input UserCreateOrConnectWithoutClaimsInputInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutClaimsInputInput!
}

input ClaimCreateOrConnectWithoutProgramInput {
  where: ClaimWhereUniqueInput!
  create: ClaimCreateWithoutProgramInput!
}

input ClaimCreateManyProgramInputEnvelope {
  data: [ClaimCreateManyProgramInput!]!
  skipDuplicates: Boolean
}

input ClaimCreateManyProgramInput {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  company: String!
  participantId: String!
  claimFinancialId: Int!
  claimProcessId: Int!
  diseaseId: Int
  clinicId: Int!
  inputedById: String
  waitingForId: String
}

input ProgramCreateOrConnectWithoutProgramParticipationsInput {
  where: ProgramWhereUniqueInput!
  create: ProgramCreateWithoutProgramParticipationsInput!
}

input ProgramWhereUniqueInput {
  id: Int
  AND: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  plan: EnumApplicationTypeFilter
  maxAllowancePercentage: IntNullableFilter
  allowanceCeiling: FloatNullableFilter
  maxAllowancePerYear: FloatNullableFilter
  claimPeriodMax: IntNullableFilter
  reclaimPeriodMax: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  class: EnumClassFilter
  programParticipations: ProgramParticipationListRelationFilter
  claims: ClaimListRelationFilter
}

input ProgramParticipationCreateOrConnectWithoutFundingInput {
  where: ProgramParticipationWhereUniqueInput!
  create: ProgramParticipationCreateWithoutFundingInput!
}

input ProgramParticipationWhereUniqueInput {
  id: Int
  AND: [ProgramParticipationWhereInput!]
  OR: [ProgramParticipationWhereInput!]
  NOT: [ProgramParticipationWhereInput!]
  bpjsNumber: StringNullableFilter
  nonActiveReason: StringNullableFilter
  effectiveDate: DateTimeFilter
  nonActiveDate: DateTimeNullableFilter
  participantId: StringFilter
  fundingId: IntFilter
  programId: IntNullableFilter
  participant: ParticipantRelationFilter
  funding: AccountRelationFilter
  Program: ProgramNullableRelationFilter
}

input ProgramParticipationCreateManyFundingInputEnvelope {
  data: [ProgramParticipationCreateManyFundingInput!]!
  skipDuplicates: Boolean
}

input ProgramParticipationCreateManyFundingInput {
  id: Int
  bpjsNumber: String
  nonActiveReason: String
  effectiveDate: DateTime!
  nonActiveDate: DateTime
  participantId: String!
  programId: Int
}

input AccountCreateOrConnectWithoutParticipantInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutParticipantInput!
}

input AccountWhereUniqueInput {
  id: Int
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  currentBalance: FloatFilter
  currentBalanceLastUpdate: DateTimeNullableFilter
  participantId: StringFilter
  participant: ParticipantRelationFilter
  transactions: TransactionListRelationFilter
  programParticipation: ProgramParticipationListRelationFilter
}

input AccountCreateManyParticipantInputEnvelope {
  data: [AccountCreateManyParticipantInput!]!
  skipDuplicates: Boolean
}

input AccountCreateManyParticipantInput {
  id: Int
  currentBalance: Float!
  currentBalanceLastUpdate: DateTime
}

input ParticipantCreateNestedManyWithoutRelationInput {
  create: [ParticipantCreateWithoutRelationInput!]
  connectOrCreate: [ParticipantCreateOrConnectWithoutRelationInput!]
  createMany: ParticipantCreateManyRelationInputEnvelope
  connect: [ParticipantWhereUniqueInput!]
}

input ParticipantCreateWithoutRelationInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  user: UserCreateNestedOneWithoutParticipantInput!
  bankAccount: BankAccountCreateNestedOneWithoutParticipantInput
  claims: ClaimCreateNestedManyWithoutParticipantInput
  employments: EmploymentCreateNestedManyWithoutParticipantInput
  contactInfos: ContactInfoCreateNestedManyWithoutParticipantInput
  programParticipations: ProgramParticipationCreateNestedManyWithoutParticipantInput
  balances: AccountCreateNestedManyWithoutParticipantInput
  Participant: ParticipantCreateNestedManyWithoutRelationInput
}

input ParticipantCreateOrConnectWithoutRelationInput {
  where: ParticipantWhereUniqueInput!
  create: ParticipantCreateWithoutRelationInput!
}

input ParticipantWhereUniqueInput {
  userId: String
  AND: [ParticipantWhereInput!]
  OR: [ParticipantWhereInput!]
  NOT: [ParticipantWhereInput!]
  gender: EnumGenderFilter
  birthDate: DateTimeFilter
  isActive: BoolFilter
  status: EnumParticipantStatusFilter
  relationId: StringNullableFilter
  user: UserRelationFilter
  relation: ParticipantNullableRelationFilter
  bankAccount: BankAccountNullableRelationFilter
  claims: ClaimListRelationFilter
  employments: EmploymentListRelationFilter
  contactInfos: ContactInfoListRelationFilter
  programParticipations: ProgramParticipationListRelationFilter
  balances: AccountListRelationFilter
  Participant: ParticipantListRelationFilter
}

input ParticipantCreateManyRelationInputEnvelope {
  data: [ParticipantCreateManyRelationInput!]!
  skipDuplicates: Boolean
}

input ParticipantCreateManyRelationInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  userId: String!
}

input ParticipantCreateOrConnectWithoutProgramParticipationsInput {
  where: ParticipantWhereUniqueInput!
  create: ParticipantCreateWithoutProgramParticipationsInput!
}

input ProgramParticipationCreateOrConnectWithoutProgramInput {
  where: ProgramParticipationWhereUniqueInput!
  create: ProgramParticipationCreateWithoutProgramInput!
}

input ProgramParticipationCreateManyProgramInputEnvelope {
  data: [ProgramParticipationCreateManyProgramInput!]!
  skipDuplicates: Boolean
}

input ProgramParticipationCreateManyProgramInput {
  id: Int
  bpjsNumber: String
  nonActiveReason: String
  effectiveDate: DateTime!
  nonActiveDate: DateTime
  participantId: String!
  fundingId: Int!
}

input ProgramCreateOrConnectWithoutClaimsInput {
  where: ProgramWhereUniqueInput!
  create: ProgramCreateWithoutClaimsInput!
}

input ClaimCreateOrConnectWithoutInputedByInput {
  where: ClaimWhereUniqueInput!
  create: ClaimCreateWithoutInputedByInput!
}

input ClaimCreateManyInputedByInputEnvelope {
  data: [ClaimCreateManyInputedByInput!]!
  skipDuplicates: Boolean
}

input ClaimCreateManyInputedByInput {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  company: String!
  participantId: String!
  claimFinancialId: Int!
  claimProcessId: Int!
  diseaseId: Int
  clinicId: Int!
  programId: Int!
  waitingForId: String
}

input UserCreateOrConnectWithoutClaimActionsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutClaimActionsInput!
}

input ClaimStatusCreateOrConnectWithoutRejectionLetterInput {
  where: ClaimStatusWhereUniqueInput!
  create: ClaimStatusCreateWithoutRejectionLetterInput!
}

input DocumentCreateOrConnectWithoutClaimProcessInput {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutClaimProcessInput!
}

input DocumentCreateManyClaimProcessInputEnvelope {
  data: [DocumentCreateManyClaimProcessInput!]!
  skipDuplicates: Boolean
}

input DocumentCreateManyClaimProcessInput {
  id: String
  name: String!
  path: String!
  size: Int!
  printCount: Int!
  createdAt: DateTime
  updatedAt: DateTime
  source: DocumentSource!
  type: DocumentType!
}

input ClaimProcessCreateOrConnectWithoutClaimInput {
  where: ClaimProcessWhereUniqueInput!
  create: ClaimProcessCreateWithoutClaimInput!
}

input ClaimCreateOrConnectWithoutClaimFinancialsInput {
  where: ClaimWhereUniqueInput!
  create: ClaimCreateWithoutClaimFinancialsInput!
}

input ClaimStatusCreateNestedOneWithoutClaimFinancialInput {
  create: ClaimStatusCreateWithoutClaimFinancialInput
  connectOrCreate: ClaimStatusCreateOrConnectWithoutClaimFinancialInput
  connect: ClaimStatusWhereUniqueInput
}

input ClaimStatusCreateWithoutClaimFinancialInput {
  description: String
  rejectionReason: String
  createdAt: DateTime
  status: ClaimStatusType!
  createBy: UserCreateNestedOneWithoutClaimActionsInput!
  claim: ClaimCreateNestedOneWithoutClaimStatusesInput!
  rejectionLetter: DocumentCreateNestedOneWithoutRejectionLetterOfInput
  guaranteeLetter: DocumentCreateNestedOneWithoutGuaranteeLetterOfInput
  transactionLetter: DocumentCreateNestedOneWithoutTransactionLetterOfInput
  bookKeepingOrder: DocumentCreateNestedOneWithoutBookKeepingOrderOfInput
}

input ClaimStatusCreateOrConnectWithoutClaimFinancialInput {
  where: ClaimStatusWhereUniqueInput!
  create: ClaimStatusCreateWithoutClaimFinancialInput!
}

input ClaimFinancialCreateOrConnectWithoutBranchPayeeInput {
  where: ClaimFinancialWhereUniqueInput!
  create: ClaimFinancialCreateWithoutBranchPayeeInput!
}

input ClaimFinancialCreateManyBranchPayeeInputEnvelope {
  data: [ClaimFinancialCreateManyBranchPayeeInput!]!
  skipDuplicates: Boolean
}

input ClaimFinancialCreateManyBranchPayeeInput {
  id: Int
  requestedAmount: Float!
  paidAmount: Float
  rejectedAmount: Float
  transactionProcessDate: DateTime
  transferDate: DateTime
  claimStatusId: Int
}

input BranchCreateOrConnectWithoutEmploymentInput {
  where: BranchWhereUniqueInput!
  create: BranchCreateWithoutEmploymentInput!
}

input BranchWhereUniqueInput {
  id: Int
  AND: [BranchWhereInput!]
  OR: [BranchWhereInput!]
  NOT: [BranchWhereInput!]
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employment: EmploymentListRelationFilter
  claimFinancial: ClaimFinancialListRelationFilter
}

input GroupCreateNestedOneWithoutEmploymentInput {
  create: GroupCreateWithoutEmploymentInput
  connectOrCreate: GroupCreateOrConnectWithoutEmploymentInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutEmploymentInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input GroupCreateOrConnectWithoutEmploymentInput {
  where: GroupWhereUniqueInput!
  create: GroupCreateWithoutEmploymentInput!
}

input GroupWhereUniqueInput {
  id: Int
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employment: EmploymentListRelationFilter
}

input RegionCreateNestedOneWithoutEmploymentInput {
  create: RegionCreateWithoutEmploymentInput
  connectOrCreate: RegionCreateOrConnectWithoutEmploymentInput
  connect: RegionWhereUniqueInput
}

input RegionCreateWithoutEmploymentInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input RegionCreateOrConnectWithoutEmploymentInput {
  where: RegionWhereUniqueInput!
  create: RegionCreateWithoutEmploymentInput!
}

input RegionWhereUniqueInput {
  id: Int
  AND: [RegionWhereInput!]
  OR: [RegionWhereInput!]
  NOT: [RegionWhereInput!]
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employment: EmploymentListRelationFilter
}

input EmploymentCreateOrConnectWithoutParticipantInput {
  where: EmploymentWhereUniqueInput!
  create: EmploymentCreateWithoutParticipantInput!
}

input EmploymentWhereUniqueInput {
  id: Int
  AND: [EmploymentWhereInput!]
  OR: [EmploymentWhereInput!]
  NOT: [EmploymentWhereInput!]
  employmentPosition: EnumPositionFilter
  participantId: StringFilter
  branchId: IntFilter
  groupId: IntNullableFilter
  regionId: IntNullableFilter
  participant: ParticipantRelationFilter
  branch: BranchRelationFilter
  group: GroupNullableRelationFilter
  region: RegionNullableRelationFilter
}

input EmploymentCreateManyParticipantInputEnvelope {
  data: [EmploymentCreateManyParticipantInput!]!
  skipDuplicates: Boolean
}

input EmploymentCreateManyParticipantInput {
  id: Int
  employmentPosition: Position!
  branchId: Int!
  groupId: Int
  regionId: Int
}

input ParticipantCreateOrConnectWithoutBalancesInput {
  where: ParticipantWhereUniqueInput!
  create: ParticipantCreateWithoutBalancesInput!
}

input AccountCreateOrConnectWithoutProgramParticipationInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutProgramParticipationInput!
}

input ProgramParticipationCreateOrConnectWithoutParticipantInput {
  where: ProgramParticipationWhereUniqueInput!
  create: ProgramParticipationCreateWithoutParticipantInput!
}

input ProgramParticipationCreateManyParticipantInputEnvelope {
  data: [ProgramParticipationCreateManyParticipantInput!]!
  skipDuplicates: Boolean
}

input ProgramParticipationCreateManyParticipantInput {
  id: Int
  bpjsNumber: String
  nonActiveReason: String
  effectiveDate: DateTime!
  nonActiveDate: DateTime
  fundingId: Int!
  programId: Int
}

input ParticipantCreateOrConnectWithoutEmploymentsInput {
  where: ParticipantWhereUniqueInput!
  create: ParticipantCreateWithoutEmploymentsInput!
}

input EmploymentCreateOrConnectWithoutBranchInput {
  where: EmploymentWhereUniqueInput!
  create: EmploymentCreateWithoutBranchInput!
}

input EmploymentCreateManyBranchInputEnvelope {
  data: [EmploymentCreateManyBranchInput!]!
  skipDuplicates: Boolean
}

input EmploymentCreateManyBranchInput {
  id: Int
  employmentPosition: Position!
  participantId: String!
  groupId: Int
  regionId: Int
}

input BranchCreateOrConnectWithoutClaimFinancialInput {
  where: BranchWhereUniqueInput!
  create: BranchCreateWithoutClaimFinancialInput!
}

input ClaimFinancialCreateOrConnectWithoutClaimInput {
  where: ClaimFinancialWhereUniqueInput!
  create: ClaimFinancialCreateWithoutClaimInput!
}

input ClaimCreateOrConnectWithoutParticipantInput {
  where: ClaimWhereUniqueInput!
  create: ClaimCreateWithoutParticipantInput!
}

input ClaimCreateManyParticipantInputEnvelope {
  data: [ClaimCreateManyParticipantInput!]!
  skipDuplicates: Boolean
}

input ClaimCreateManyParticipantInput {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  company: String!
  claimFinancialId: Int!
  claimProcessId: Int!
  diseaseId: Int
  clinicId: Int!
  inputedById: String
  programId: Int!
  waitingForId: String
}

input ParticipantCreateOrConnectWithoutParticipantInput {
  where: ParticipantWhereUniqueInput!
  create: ParticipantCreateWithoutParticipantInput!
}

input ParticipantCreateOrConnectWithoutUserInput {
  where: ParticipantWhereUniqueInput!
  create: ParticipantCreateWithoutUserInput!
}

input UserCreateOrConnectWithoutRoleInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutRoleInput!
}

input UserCreateManyRoleInputEnvelope {
  data: [UserCreateManyRoleInput!]!
  skipDuplicates: Boolean
}

input UserCreateManyRoleInput {
  id: String
  fullName: String!
  email: String!
  emailVerifiedAt: DateTime
  password: String!
  profilePictureUrl: String
  deletedAt: DateTime
  participantId: Int
}

input RoleCreateOrConnectWithoutLowerLevelThanInput {
  where: RoleWhereUniqueInput!
  create: RoleCreateWithoutLowerLevelThanInput!
}

input RoleCreateNestedManyWithoutHigherLevelThanInput {
  create: [RoleCreateWithoutHigherLevelThanInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutHigherLevelThanInput!]
  createMany: RoleCreateManyHigherLevelThanInputEnvelope
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateWithoutHigherLevelThanInput {
  name: String!
  description: String
  roleType: RoleType
  rolePermissions: RolePermissionCreateNestedManyWithoutRoleInput
  users: UserCreateNestedManyWithoutRoleInput
  lowerLevelThan: RoleCreateNestedManyWithoutHigherLevelThanInput
}

input RoleCreateOrConnectWithoutHigherLevelThanInput {
  where: RoleWhereUniqueInput!
  create: RoleCreateWithoutHigherLevelThanInput!
}

input RoleCreateManyHigherLevelThanInputEnvelope {
  data: [RoleCreateManyHigherLevelThanInput!]!
  skipDuplicates: Boolean
}

input RoleCreateManyHigherLevelThanInput {
  id: Int
  name: String!
  description: String
  roleType: RoleType
}

input RoleCreateOrConnectWithoutUsersInput {
  where: RoleWhereUniqueInput!
  create: RoleCreateWithoutUsersInput!
}

input UserCreateOrConnectWithoutParticipantInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutParticipantInput!
}

input ParticipantCreateOrConnectWithoutClaimsInput {
  where: ParticipantWhereUniqueInput!
  create: ParticipantCreateWithoutClaimsInput!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ClaimUpdateOneOfStatusArgs {
  id: String!
  status: ClaimStatusType!
}

input ClaimStatusCreateInput {
  description: String
  rejectionReason: String
  createdAt: DateTime
  status: ClaimStatusType!
  createBy: UserCreateNestedOneWithoutClaimActionsInput!
  claim: ClaimCreateNestedOneWithoutClaimStatusesInput!
  rejectionLetter: DocumentCreateNestedOneWithoutRejectionLetterOfInput
  guaranteeLetter: DocumentCreateNestedOneWithoutGuaranteeLetterOfInput
  transactionLetter: DocumentCreateNestedOneWithoutTransactionLetterOfInput
  bookKeepingOrder: DocumentCreateNestedOneWithoutBookKeepingOrderOfInput
  claimFinancial: ClaimFinancialCreateNestedOneWithoutClaimStatusInput
}

input ClaimStatusCreateManyInput {
  id: Int
  description: String
  rejectionReason: String
  createdAt: DateTime
  status: ClaimStatusType!
  createById: String!
  claimId: String!
  rejectionLetterId: String
  guaranteeLetterId: String
  transactionLetterId: String
  bookKeepingOrderId: String
}

input ClaimStatusUpdateInput {
  description: NullableStringFieldUpdateOperationsInput
  rejectionReason: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  status: EnumClaimStatusTypeFieldUpdateOperationsInput
  createBy: UserUpdateOneRequiredWithoutClaimActionsNestedInput
  claim: ClaimUpdateOneRequiredWithoutClaimStatusesNestedInput
  rejectionLetter: DocumentUpdateOneWithoutRejectionLetterOfNestedInput
  guaranteeLetter: DocumentUpdateOneWithoutGuaranteeLetterOfNestedInput
  transactionLetter: DocumentUpdateOneWithoutTransactionLetterOfNestedInput
  bookKeepingOrder: DocumentUpdateOneWithoutBookKeepingOrderOfNestedInput
  claimFinancial: ClaimFinancialUpdateOneWithoutClaimStatusNestedInput
}

input EnumClaimStatusTypeFieldUpdateOperationsInput {
  set: ClaimStatusType
}

input UserUpdateOneRequiredWithoutClaimActionsNestedInput {
  create: UserCreateWithoutClaimActionsInput
  connectOrCreate: UserCreateOrConnectWithoutClaimActionsInput
  upsert: UserUpsertWithoutClaimActionsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutClaimActionsInput
}

input UserUpsertWithoutClaimActionsInput {
  update: UserUpdateWithoutClaimActionsInput!
  create: UserCreateWithoutClaimActionsInput!
  where: UserWhereInput
}

input UserUpdateWithoutClaimActionsInput {
  id: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profilePictureUrl: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  participantId: NullableIntFieldUpdateOperationsInput
  role: RoleUpdateOneRequiredWithoutUsersNestedInput
  participant: ParticipantUpdateOneWithoutUserNestedInput
  claimsInput: ClaimUpdateManyWithoutInputedByNestedInput
  announcementCreated: AnnouncementUpdateManyWithoutCreatedByNestedInput
  notification: NotificationUpdateManyWithoutUserNestedInput
  claimsOnWait: ClaimUpdateManyWithoutWaitingForNestedInput
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input RoleUpdateOneRequiredWithoutUsersNestedInput {
  create: RoleCreateWithoutUsersInput
  connectOrCreate: RoleCreateOrConnectWithoutUsersInput
  upsert: RoleUpsertWithoutUsersInput
  connect: RoleWhereUniqueInput
  update: RoleUpdateToOneWithWhereWithoutUsersInput
}

input RoleUpsertWithoutUsersInput {
  update: RoleUpdateWithoutUsersInput!
  create: RoleCreateWithoutUsersInput!
  where: RoleWhereInput
}

input RoleUpdateWithoutUsersInput {
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  roleType: NullableEnumRoleTypeFieldUpdateOperationsInput
  higherLevelThan: RoleUpdateOneWithoutLowerLevelThanNestedInput
  rolePermissions: RolePermissionUpdateManyWithoutRoleNestedInput
  lowerLevelThan: RoleUpdateManyWithoutHigherLevelThanNestedInput
}

input NullableEnumRoleTypeFieldUpdateOperationsInput {
  set: RoleType
}

input RoleUpdateOneWithoutLowerLevelThanNestedInput {
  create: RoleCreateWithoutLowerLevelThanInput
  connectOrCreate: RoleCreateOrConnectWithoutLowerLevelThanInput
  upsert: RoleUpsertWithoutLowerLevelThanInput
  disconnect: RoleWhereInput
  delete: RoleWhereInput
  connect: RoleWhereUniqueInput
  update: RoleUpdateToOneWithWhereWithoutLowerLevelThanInput
}

input RoleUpsertWithoutLowerLevelThanInput {
  update: RoleUpdateWithoutLowerLevelThanInput!
  create: RoleCreateWithoutLowerLevelThanInput!
  where: RoleWhereInput
}

input RoleUpdateWithoutLowerLevelThanInput {
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  roleType: NullableEnumRoleTypeFieldUpdateOperationsInput
  higherLevelThan: RoleUpdateOneWithoutLowerLevelThanNestedInput
  rolePermissions: RolePermissionUpdateManyWithoutRoleNestedInput
  users: UserUpdateManyWithoutRoleNestedInput
}

input RolePermissionUpdateManyWithoutRoleNestedInput {
  create: [RolePermissionCreateWithoutRoleInput!]
  connectOrCreate: [RolePermissionCreateOrConnectWithoutRoleInput!]
  upsert: [RolePermissionUpsertWithWhereUniqueWithoutRoleInput!]
  createMany: RolePermissionCreateManyRoleInputEnvelope
  set: [RolePermissionWhereUniqueInput!]
  disconnect: [RolePermissionWhereUniqueInput!]
  delete: [RolePermissionWhereUniqueInput!]
  connect: [RolePermissionWhereUniqueInput!]
  update: [RolePermissionUpdateWithWhereUniqueWithoutRoleInput!]
  updateMany: [RolePermissionUpdateManyWithWhereWithoutRoleInput!]
  deleteMany: [RolePermissionScalarWhereInput!]
}

input RolePermissionUpsertWithWhereUniqueWithoutRoleInput {
  where: RolePermissionWhereUniqueInput!
  update: RolePermissionUpdateWithoutRoleInput!
  create: RolePermissionCreateWithoutRoleInput!
}

input RolePermissionUpdateWithoutRoleInput {
  permission: EnumPermissionFieldUpdateOperationsInput
}

input EnumPermissionFieldUpdateOperationsInput {
  set: Permission
}

input RolePermissionUpdateWithWhereUniqueWithoutRoleInput {
  where: RolePermissionWhereUniqueInput!
  data: RolePermissionUpdateWithoutRoleInput!
}

input RolePermissionUpdateManyWithWhereWithoutRoleInput {
  where: RolePermissionScalarWhereInput!
  data: RolePermissionUpdateManyMutationInput!
}

input RolePermissionScalarWhereInput {
  AND: [RolePermissionScalarWhereInput!]
  OR: [RolePermissionScalarWhereInput!]
  NOT: [RolePermissionScalarWhereInput!]
  id: IntFilter
  roleId: IntNullableFilter
  permission: EnumPermissionFilter
}

input RolePermissionUpdateManyMutationInput {
  permission: EnumPermissionFieldUpdateOperationsInput
}

input UserUpdateManyWithoutRoleNestedInput {
  create: [UserCreateWithoutRoleInput!]
  connectOrCreate: [UserCreateOrConnectWithoutRoleInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRoleInput!]
  createMany: UserCreateManyRoleInputEnvelope
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRoleInput!]
  updateMany: [UserUpdateManyWithWhereWithoutRoleInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpsertWithWhereUniqueWithoutRoleInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRoleInput!
  create: UserCreateWithoutRoleInput!
}

input UserUpdateWithoutRoleInput {
  id: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profilePictureUrl: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  participantId: NullableIntFieldUpdateOperationsInput
  participant: ParticipantUpdateOneWithoutUserNestedInput
  claimsInput: ClaimUpdateManyWithoutInputedByNestedInput
  claimActions: ClaimStatusUpdateManyWithoutCreateByNestedInput
  announcementCreated: AnnouncementUpdateManyWithoutCreatedByNestedInput
  notification: NotificationUpdateManyWithoutUserNestedInput
  claimsOnWait: ClaimUpdateManyWithoutWaitingForNestedInput
}

input ParticipantUpdateOneWithoutUserNestedInput {
  create: ParticipantCreateWithoutUserInput
  connectOrCreate: ParticipantCreateOrConnectWithoutUserInput
  upsert: ParticipantUpsertWithoutUserInput
  disconnect: ParticipantWhereInput
  delete: ParticipantWhereInput
  connect: ParticipantWhereUniqueInput
  update: ParticipantUpdateToOneWithWhereWithoutUserInput
}

input ParticipantUpsertWithoutUserInput {
  update: ParticipantUpdateWithoutUserInput!
  create: ParticipantCreateWithoutUserInput!
  where: ParticipantWhereInput
}

input ParticipantUpdateWithoutUserInput {
  gender: EnumGenderFieldUpdateOperationsInput
  birthDate: DateTimeFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  status: EnumParticipantStatusFieldUpdateOperationsInput
  relation: ParticipantUpdateOneWithoutParticipantNestedInput
  bankAccount: BankAccountUpdateOneWithoutParticipantNestedInput
  claims: ClaimUpdateManyWithoutParticipantNestedInput
  employments: EmploymentUpdateManyWithoutParticipantNestedInput
  contactInfos: ContactInfoUpdateManyWithoutParticipantNestedInput
  programParticipations: ProgramParticipationUpdateManyWithoutParticipantNestedInput
  balances: AccountUpdateManyWithoutParticipantNestedInput
  Participant: ParticipantUpdateManyWithoutRelationNestedInput
}

input EnumGenderFieldUpdateOperationsInput {
  set: Gender
}

input EnumParticipantStatusFieldUpdateOperationsInput {
  set: ParticipantStatus
}

input ParticipantUpdateOneWithoutParticipantNestedInput {
  create: ParticipantCreateWithoutParticipantInput
  connectOrCreate: ParticipantCreateOrConnectWithoutParticipantInput
  upsert: ParticipantUpsertWithoutParticipantInput
  disconnect: ParticipantWhereInput
  delete: ParticipantWhereInput
  connect: ParticipantWhereUniqueInput
  update: ParticipantUpdateToOneWithWhereWithoutParticipantInput
}

input ParticipantUpsertWithoutParticipantInput {
  update: ParticipantUpdateWithoutParticipantInput!
  create: ParticipantCreateWithoutParticipantInput!
  where: ParticipantWhereInput
}

input ParticipantUpdateWithoutParticipantInput {
  gender: EnumGenderFieldUpdateOperationsInput
  birthDate: DateTimeFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  status: EnumParticipantStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutParticipantNestedInput
  relation: ParticipantUpdateOneWithoutParticipantNestedInput
  bankAccount: BankAccountUpdateOneWithoutParticipantNestedInput
  claims: ClaimUpdateManyWithoutParticipantNestedInput
  employments: EmploymentUpdateManyWithoutParticipantNestedInput
  contactInfos: ContactInfoUpdateManyWithoutParticipantNestedInput
  programParticipations: ProgramParticipationUpdateManyWithoutParticipantNestedInput
  balances: AccountUpdateManyWithoutParticipantNestedInput
}

input UserUpdateOneRequiredWithoutParticipantNestedInput {
  create: UserCreateWithoutParticipantInput
  connectOrCreate: UserCreateOrConnectWithoutParticipantInput
  upsert: UserUpsertWithoutParticipantInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutParticipantInput
}

input UserUpsertWithoutParticipantInput {
  update: UserUpdateWithoutParticipantInput!
  create: UserCreateWithoutParticipantInput!
  where: UserWhereInput
}

input UserUpdateWithoutParticipantInput {
  id: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profilePictureUrl: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  participantId: NullableIntFieldUpdateOperationsInput
  role: RoleUpdateOneRequiredWithoutUsersNestedInput
  claimsInput: ClaimUpdateManyWithoutInputedByNestedInput
  claimActions: ClaimStatusUpdateManyWithoutCreateByNestedInput
  announcementCreated: AnnouncementUpdateManyWithoutCreatedByNestedInput
  notification: NotificationUpdateManyWithoutUserNestedInput
  claimsOnWait: ClaimUpdateManyWithoutWaitingForNestedInput
}

input ClaimUpdateManyWithoutInputedByNestedInput {
  create: [ClaimCreateWithoutInputedByInput!]
  connectOrCreate: [ClaimCreateOrConnectWithoutInputedByInput!]
  upsert: [ClaimUpsertWithWhereUniqueWithoutInputedByInput!]
  createMany: ClaimCreateManyInputedByInputEnvelope
  set: [ClaimWhereUniqueInput!]
  disconnect: [ClaimWhereUniqueInput!]
  delete: [ClaimWhereUniqueInput!]
  connect: [ClaimWhereUniqueInput!]
  update: [ClaimUpdateWithWhereUniqueWithoutInputedByInput!]
  updateMany: [ClaimUpdateManyWithWhereWithoutInputedByInput!]
  deleteMany: [ClaimScalarWhereInput!]
}

input ClaimUpsertWithWhereUniqueWithoutInputedByInput {
  where: ClaimWhereUniqueInput!
  update: ClaimUpdateWithoutInputedByInput!
  create: ClaimCreateWithoutInputedByInput!
}

input ClaimUpdateWithoutInputedByInput {
  channel: EnumClaimChannelFieldUpdateOperationsInput
  admedicaStatus: EnumAdmedicaStatusFieldUpdateOperationsInput
  company: StringFieldUpdateOperationsInput
  participant: ParticipantUpdateOneRequiredWithoutClaimsNestedInput
  claimFinancials: ClaimFinancialUpdateOneRequiredWithoutClaimNestedInput
  claimProcesses: ClaimProcessUpdateOneRequiredWithoutClaimNestedInput
  disease: DiseaseUpdateOneWithoutClaimsNestedInput
  clinics: ClinicUpdateOneRequiredWithoutClaimsNestedInput
  program: ProgramUpdateOneRequiredWithoutClaimsNestedInput
  waitingFor: UserUpdateOneWithoutClaimsOnWaitNestedInput
  tags: TagUpdateManyWithoutClaimsNestedInput
}

input EnumClaimChannelFieldUpdateOperationsInput {
  set: ClaimChannel
}

input EnumAdmedicaStatusFieldUpdateOperationsInput {
  set: AdmedicaStatus
}

input ParticipantUpdateOneRequiredWithoutClaimsNestedInput {
  create: ParticipantCreateWithoutClaimsInput
  connectOrCreate: ParticipantCreateOrConnectWithoutClaimsInput
  upsert: ParticipantUpsertWithoutClaimsInput
  connect: ParticipantWhereUniqueInput
  update: ParticipantUpdateToOneWithWhereWithoutClaimsInput
}

input ParticipantUpsertWithoutClaimsInput {
  update: ParticipantUpdateWithoutClaimsInput!
  create: ParticipantCreateWithoutClaimsInput!
  where: ParticipantWhereInput
}

input ParticipantUpdateWithoutClaimsInput {
  gender: EnumGenderFieldUpdateOperationsInput
  birthDate: DateTimeFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  status: EnumParticipantStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutParticipantNestedInput
  relation: ParticipantUpdateOneWithoutParticipantNestedInput
  bankAccount: BankAccountUpdateOneWithoutParticipantNestedInput
  employments: EmploymentUpdateManyWithoutParticipantNestedInput
  contactInfos: ContactInfoUpdateManyWithoutParticipantNestedInput
  programParticipations: ProgramParticipationUpdateManyWithoutParticipantNestedInput
  balances: AccountUpdateManyWithoutParticipantNestedInput
  Participant: ParticipantUpdateManyWithoutRelationNestedInput
}

input BankAccountUpdateOneWithoutParticipantNestedInput {
  create: BankAccountCreateWithoutParticipantInput
  connectOrCreate: BankAccountCreateOrConnectWithoutParticipantInput
  upsert: BankAccountUpsertWithoutParticipantInput
  disconnect: BankAccountWhereInput
  delete: BankAccountWhereInput
  connect: BankAccountWhereUniqueInput
  update: BankAccountUpdateToOneWithWhereWithoutParticipantInput
}

input BankAccountUpsertWithoutParticipantInput {
  update: BankAccountUpdateWithoutParticipantInput!
  create: BankAccountCreateWithoutParticipantInput!
  where: BankAccountWhereInput
}

input BankAccountUpdateWithoutParticipantInput {
  accountNumber: FloatFieldUpdateOperationsInput
  accountName: StringFieldUpdateOperationsInput
}

input FloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input BankAccountUpdateToOneWithWhereWithoutParticipantInput {
  where: BankAccountWhereInput
  data: BankAccountUpdateWithoutParticipantInput!
}

input EmploymentUpdateManyWithoutParticipantNestedInput {
  create: [EmploymentCreateWithoutParticipantInput!]
  connectOrCreate: [EmploymentCreateOrConnectWithoutParticipantInput!]
  upsert: [EmploymentUpsertWithWhereUniqueWithoutParticipantInput!]
  createMany: EmploymentCreateManyParticipantInputEnvelope
  set: [EmploymentWhereUniqueInput!]
  disconnect: [EmploymentWhereUniqueInput!]
  delete: [EmploymentWhereUniqueInput!]
  connect: [EmploymentWhereUniqueInput!]
  update: [EmploymentUpdateWithWhereUniqueWithoutParticipantInput!]
  updateMany: [EmploymentUpdateManyWithWhereWithoutParticipantInput!]
  deleteMany: [EmploymentScalarWhereInput!]
}

input EmploymentUpsertWithWhereUniqueWithoutParticipantInput {
  where: EmploymentWhereUniqueInput!
  update: EmploymentUpdateWithoutParticipantInput!
  create: EmploymentCreateWithoutParticipantInput!
}

input EmploymentUpdateWithoutParticipantInput {
  employmentPosition: EnumPositionFieldUpdateOperationsInput
  branch: BranchUpdateOneRequiredWithoutEmploymentNestedInput
  group: GroupUpdateOneWithoutEmploymentNestedInput
  region: RegionUpdateOneWithoutEmploymentNestedInput
}

input EnumPositionFieldUpdateOperationsInput {
  set: Position
}

input BranchUpdateOneRequiredWithoutEmploymentNestedInput {
  create: BranchCreateWithoutEmploymentInput
  connectOrCreate: BranchCreateOrConnectWithoutEmploymentInput
  upsert: BranchUpsertWithoutEmploymentInput
  connect: BranchWhereUniqueInput
  update: BranchUpdateToOneWithWhereWithoutEmploymentInput
}

input BranchUpsertWithoutEmploymentInput {
  update: BranchUpdateWithoutEmploymentInput!
  create: BranchCreateWithoutEmploymentInput!
  where: BranchWhereInput
}

input BranchUpdateWithoutEmploymentInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  claimFinancial: ClaimFinancialUpdateManyWithoutBranchPayeeNestedInput
}

input ClaimFinancialUpdateManyWithoutBranchPayeeNestedInput {
  create: [ClaimFinancialCreateWithoutBranchPayeeInput!]
  connectOrCreate: [ClaimFinancialCreateOrConnectWithoutBranchPayeeInput!]
  upsert: [ClaimFinancialUpsertWithWhereUniqueWithoutBranchPayeeInput!]
  createMany: ClaimFinancialCreateManyBranchPayeeInputEnvelope
  set: [ClaimFinancialWhereUniqueInput!]
  disconnect: [ClaimFinancialWhereUniqueInput!]
  delete: [ClaimFinancialWhereUniqueInput!]
  connect: [ClaimFinancialWhereUniqueInput!]
  update: [ClaimFinancialUpdateWithWhereUniqueWithoutBranchPayeeInput!]
  updateMany: [ClaimFinancialUpdateManyWithWhereWithoutBranchPayeeInput!]
  deleteMany: [ClaimFinancialScalarWhereInput!]
}

input ClaimFinancialUpsertWithWhereUniqueWithoutBranchPayeeInput {
  where: ClaimFinancialWhereUniqueInput!
  update: ClaimFinancialUpdateWithoutBranchPayeeInput!
  create: ClaimFinancialCreateWithoutBranchPayeeInput!
}

input ClaimFinancialUpdateWithoutBranchPayeeInput {
  requestedAmount: FloatFieldUpdateOperationsInput
  paidAmount: NullableFloatFieldUpdateOperationsInput
  rejectedAmount: NullableFloatFieldUpdateOperationsInput
  transactionProcessDate: NullableDateTimeFieldUpdateOperationsInput
  transferDate: NullableDateTimeFieldUpdateOperationsInput
  claim: ClaimUpdateOneWithoutClaimFinancialsNestedInput
  claimStatus: ClaimStatusUpdateOneWithoutClaimFinancialNestedInput
}

input NullableFloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input ClaimUpdateOneWithoutClaimFinancialsNestedInput {
  create: ClaimCreateWithoutClaimFinancialsInput
  connectOrCreate: ClaimCreateOrConnectWithoutClaimFinancialsInput
  upsert: ClaimUpsertWithoutClaimFinancialsInput
  disconnect: ClaimWhereInput
  delete: ClaimWhereInput
  connect: ClaimWhereUniqueInput
  update: ClaimUpdateToOneWithWhereWithoutClaimFinancialsInput
}

input ClaimUpsertWithoutClaimFinancialsInput {
  update: ClaimUpdateWithoutClaimFinancialsInput!
  create: ClaimCreateWithoutClaimFinancialsInput!
  where: ClaimWhereInput
}

input ClaimUpdateWithoutClaimFinancialsInput {
  channel: EnumClaimChannelFieldUpdateOperationsInput
  admedicaStatus: EnumAdmedicaStatusFieldUpdateOperationsInput
  company: StringFieldUpdateOperationsInput
  participant: ParticipantUpdateOneRequiredWithoutClaimsNestedInput
  claimProcesses: ClaimProcessUpdateOneRequiredWithoutClaimNestedInput
  disease: DiseaseUpdateOneWithoutClaimsNestedInput
  clinics: ClinicUpdateOneRequiredWithoutClaimsNestedInput
  inputedBy: UserUpdateOneWithoutClaimsInputNestedInput
  program: ProgramUpdateOneRequiredWithoutClaimsNestedInput
  waitingFor: UserUpdateOneWithoutClaimsOnWaitNestedInput
  tags: TagUpdateManyWithoutClaimsNestedInput
}

input ClaimProcessUpdateOneRequiredWithoutClaimNestedInput {
  create: ClaimProcessCreateWithoutClaimInput
  connectOrCreate: ClaimProcessCreateOrConnectWithoutClaimInput
  upsert: ClaimProcessUpsertWithoutClaimInput
  connect: ClaimProcessWhereUniqueInput
  update: ClaimProcessUpdateToOneWithWhereWithoutClaimInput
}

input ClaimProcessUpsertWithoutClaimInput {
  update: ClaimProcessUpdateWithoutClaimInput!
  create: ClaimProcessCreateWithoutClaimInput!
  where: ClaimProcessWhereInput
}

input ClaimProcessUpdateWithoutClaimInput {
  startTreatment: NullableDateTimeFieldUpdateOperationsInput
  endTreatment: NullableDateTimeFieldUpdateOperationsInput
  expeditionDate: NullableDateTimeFieldUpdateOperationsInput
  reclaim: NullableStringFieldUpdateOperationsInput
  processDate: NullableDateTimeFieldUpdateOperationsInput
  submissionNote: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  additionalNote: NullableStringFieldUpdateOperationsInput
  documents: DocumentUpdateManyWithoutClaimProcessNestedInput
}

input DocumentUpdateManyWithoutClaimProcessNestedInput {
  create: [DocumentCreateWithoutClaimProcessInput!]
  connectOrCreate: [DocumentCreateOrConnectWithoutClaimProcessInput!]
  upsert: [DocumentUpsertWithWhereUniqueWithoutClaimProcessInput!]
  createMany: DocumentCreateManyClaimProcessInputEnvelope
  set: [DocumentWhereUniqueInput!]
  disconnect: [DocumentWhereUniqueInput!]
  delete: [DocumentWhereUniqueInput!]
  connect: [DocumentWhereUniqueInput!]
  update: [DocumentUpdateWithWhereUniqueWithoutClaimProcessInput!]
  updateMany: [DocumentUpdateManyWithWhereWithoutClaimProcessInput!]
  deleteMany: [DocumentScalarWhereInput!]
}

input DocumentUpsertWithWhereUniqueWithoutClaimProcessInput {
  where: DocumentWhereUniqueInput!
  update: DocumentUpdateWithoutClaimProcessInput!
  create: DocumentCreateWithoutClaimProcessInput!
}

input DocumentUpdateWithoutClaimProcessInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  printCount: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  source: EnumDocumentSourceFieldUpdateOperationsInput
  type: EnumDocumentTypeFieldUpdateOperationsInput
  rejectionLetterOf: ClaimStatusUpdateOneWithoutRejectionLetterNestedInput
  guaranteeLetterOf: ClaimStatusUpdateOneWithoutGuaranteeLetterNestedInput
  transactionLetterOf: ClaimStatusUpdateOneWithoutTransactionLetterNestedInput
  bookKeepingOrderOf: ClaimStatusUpdateOneWithoutBookKeepingOrderNestedInput
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input EnumDocumentSourceFieldUpdateOperationsInput {
  set: DocumentSource
}

input EnumDocumentTypeFieldUpdateOperationsInput {
  set: DocumentType
}

input ClaimStatusUpdateOneWithoutRejectionLetterNestedInput {
  create: ClaimStatusCreateWithoutRejectionLetterInput
  connectOrCreate: ClaimStatusCreateOrConnectWithoutRejectionLetterInput
  upsert: ClaimStatusUpsertWithoutRejectionLetterInput
  disconnect: ClaimStatusWhereInput
  delete: ClaimStatusWhereInput
  connect: ClaimStatusWhereUniqueInput
  update: ClaimStatusUpdateToOneWithWhereWithoutRejectionLetterInput
}

input ClaimStatusUpsertWithoutRejectionLetterInput {
  update: ClaimStatusUpdateWithoutRejectionLetterInput!
  create: ClaimStatusCreateWithoutRejectionLetterInput!
  where: ClaimStatusWhereInput
}

input ClaimStatusUpdateWithoutRejectionLetterInput {
  description: NullableStringFieldUpdateOperationsInput
  rejectionReason: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  status: EnumClaimStatusTypeFieldUpdateOperationsInput
  createBy: UserUpdateOneRequiredWithoutClaimActionsNestedInput
  claim: ClaimUpdateOneRequiredWithoutClaimStatusesNestedInput
  guaranteeLetter: DocumentUpdateOneWithoutGuaranteeLetterOfNestedInput
  transactionLetter: DocumentUpdateOneWithoutTransactionLetterOfNestedInput
  bookKeepingOrder: DocumentUpdateOneWithoutBookKeepingOrderOfNestedInput
  claimFinancial: ClaimFinancialUpdateOneWithoutClaimStatusNestedInput
}

input ClaimUpdateOneRequiredWithoutClaimStatusesNestedInput {
  create: ClaimCreateWithoutClaimStatusesInput
  connectOrCreate: ClaimCreateOrConnectWithoutClaimStatusesInput
  upsert: ClaimUpsertWithoutClaimStatusesInput
  connect: ClaimWhereUniqueInput
  update: ClaimUpdateToOneWithWhereWithoutClaimStatusesInput
}

input ClaimUpsertWithoutClaimStatusesInput {
  update: ClaimUpdateWithoutClaimStatusesInput!
  create: ClaimCreateWithoutClaimStatusesInput!
  where: ClaimWhereInput
}

input ClaimUpdateWithoutClaimStatusesInput {
  channel: EnumClaimChannelFieldUpdateOperationsInput
  admedicaStatus: EnumAdmedicaStatusFieldUpdateOperationsInput
  company: StringFieldUpdateOperationsInput
  participant: ParticipantUpdateOneRequiredWithoutClaimsNestedInput
  claimFinancials: ClaimFinancialUpdateOneRequiredWithoutClaimNestedInput
  claimProcesses: ClaimProcessUpdateOneRequiredWithoutClaimNestedInput
  disease: DiseaseUpdateOneWithoutClaimsNestedInput
  clinics: ClinicUpdateOneRequiredWithoutClaimsNestedInput
  inputedBy: UserUpdateOneWithoutClaimsInputNestedInput
  program: ProgramUpdateOneRequiredWithoutClaimsNestedInput
  waitingFor: UserUpdateOneWithoutClaimsOnWaitNestedInput
  tags: TagUpdateManyWithoutClaimsNestedInput
}

input ClaimFinancialUpdateOneRequiredWithoutClaimNestedInput {
  create: ClaimFinancialCreateWithoutClaimInput
  connectOrCreate: ClaimFinancialCreateOrConnectWithoutClaimInput
  upsert: ClaimFinancialUpsertWithoutClaimInput
  connect: ClaimFinancialWhereUniqueInput
  update: ClaimFinancialUpdateToOneWithWhereWithoutClaimInput
}

input ClaimFinancialUpsertWithoutClaimInput {
  update: ClaimFinancialUpdateWithoutClaimInput!
  create: ClaimFinancialCreateWithoutClaimInput!
  where: ClaimFinancialWhereInput
}

input ClaimFinancialUpdateWithoutClaimInput {
  requestedAmount: FloatFieldUpdateOperationsInput
  paidAmount: NullableFloatFieldUpdateOperationsInput
  rejectedAmount: NullableFloatFieldUpdateOperationsInput
  transactionProcessDate: NullableDateTimeFieldUpdateOperationsInput
  transferDate: NullableDateTimeFieldUpdateOperationsInput
  branchPayee: BranchUpdateOneWithoutClaimFinancialNestedInput
  claimStatus: ClaimStatusUpdateOneWithoutClaimFinancialNestedInput
}

input BranchUpdateOneWithoutClaimFinancialNestedInput {
  create: BranchCreateWithoutClaimFinancialInput
  connectOrCreate: BranchCreateOrConnectWithoutClaimFinancialInput
  upsert: BranchUpsertWithoutClaimFinancialInput
  disconnect: BranchWhereInput
  delete: BranchWhereInput
  connect: BranchWhereUniqueInput
  update: BranchUpdateToOneWithWhereWithoutClaimFinancialInput
}

input BranchUpsertWithoutClaimFinancialInput {
  update: BranchUpdateWithoutClaimFinancialInput!
  create: BranchCreateWithoutClaimFinancialInput!
  where: BranchWhereInput
}

input BranchUpdateWithoutClaimFinancialInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  employment: EmploymentUpdateManyWithoutBranchNestedInput
}

input EmploymentUpdateManyWithoutBranchNestedInput {
  create: [EmploymentCreateWithoutBranchInput!]
  connectOrCreate: [EmploymentCreateOrConnectWithoutBranchInput!]
  upsert: [EmploymentUpsertWithWhereUniqueWithoutBranchInput!]
  createMany: EmploymentCreateManyBranchInputEnvelope
  set: [EmploymentWhereUniqueInput!]
  disconnect: [EmploymentWhereUniqueInput!]
  delete: [EmploymentWhereUniqueInput!]
  connect: [EmploymentWhereUniqueInput!]
  update: [EmploymentUpdateWithWhereUniqueWithoutBranchInput!]
  updateMany: [EmploymentUpdateManyWithWhereWithoutBranchInput!]
  deleteMany: [EmploymentScalarWhereInput!]
}

input EmploymentUpsertWithWhereUniqueWithoutBranchInput {
  where: EmploymentWhereUniqueInput!
  update: EmploymentUpdateWithoutBranchInput!
  create: EmploymentCreateWithoutBranchInput!
}

input EmploymentUpdateWithoutBranchInput {
  employmentPosition: EnumPositionFieldUpdateOperationsInput
  participant: ParticipantUpdateOneRequiredWithoutEmploymentsNestedInput
  group: GroupUpdateOneWithoutEmploymentNestedInput
  region: RegionUpdateOneWithoutEmploymentNestedInput
}

input ParticipantUpdateOneRequiredWithoutEmploymentsNestedInput {
  create: ParticipantCreateWithoutEmploymentsInput
  connectOrCreate: ParticipantCreateOrConnectWithoutEmploymentsInput
  upsert: ParticipantUpsertWithoutEmploymentsInput
  connect: ParticipantWhereUniqueInput
  update: ParticipantUpdateToOneWithWhereWithoutEmploymentsInput
}

input ParticipantUpsertWithoutEmploymentsInput {
  update: ParticipantUpdateWithoutEmploymentsInput!
  create: ParticipantCreateWithoutEmploymentsInput!
  where: ParticipantWhereInput
}

input ParticipantUpdateWithoutEmploymentsInput {
  gender: EnumGenderFieldUpdateOperationsInput
  birthDate: DateTimeFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  status: EnumParticipantStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutParticipantNestedInput
  relation: ParticipantUpdateOneWithoutParticipantNestedInput
  bankAccount: BankAccountUpdateOneWithoutParticipantNestedInput
  claims: ClaimUpdateManyWithoutParticipantNestedInput
  contactInfos: ContactInfoUpdateManyWithoutParticipantNestedInput
  programParticipations: ProgramParticipationUpdateManyWithoutParticipantNestedInput
  balances: AccountUpdateManyWithoutParticipantNestedInput
  Participant: ParticipantUpdateManyWithoutRelationNestedInput
}

input ClaimUpdateManyWithoutParticipantNestedInput {
  create: [ClaimCreateWithoutParticipantInput!]
  connectOrCreate: [ClaimCreateOrConnectWithoutParticipantInput!]
  upsert: [ClaimUpsertWithWhereUniqueWithoutParticipantInput!]
  createMany: ClaimCreateManyParticipantInputEnvelope
  set: [ClaimWhereUniqueInput!]
  disconnect: [ClaimWhereUniqueInput!]
  delete: [ClaimWhereUniqueInput!]
  connect: [ClaimWhereUniqueInput!]
  update: [ClaimUpdateWithWhereUniqueWithoutParticipantInput!]
  updateMany: [ClaimUpdateManyWithWhereWithoutParticipantInput!]
  deleteMany: [ClaimScalarWhereInput!]
}

input ClaimUpsertWithWhereUniqueWithoutParticipantInput {
  where: ClaimWhereUniqueInput!
  update: ClaimUpdateWithoutParticipantInput!
  create: ClaimCreateWithoutParticipantInput!
}

input ClaimUpdateWithoutParticipantInput {
  channel: EnumClaimChannelFieldUpdateOperationsInput
  admedicaStatus: EnumAdmedicaStatusFieldUpdateOperationsInput
  company: StringFieldUpdateOperationsInput
  claimFinancials: ClaimFinancialUpdateOneRequiredWithoutClaimNestedInput
  claimProcesses: ClaimProcessUpdateOneRequiredWithoutClaimNestedInput
  disease: DiseaseUpdateOneWithoutClaimsNestedInput
  clinics: ClinicUpdateOneRequiredWithoutClaimsNestedInput
  inputedBy: UserUpdateOneWithoutClaimsInputNestedInput
  program: ProgramUpdateOneRequiredWithoutClaimsNestedInput
  waitingFor: UserUpdateOneWithoutClaimsOnWaitNestedInput
  tags: TagUpdateManyWithoutClaimsNestedInput
}

input DiseaseUpdateOneWithoutClaimsNestedInput {
  create: DiseaseCreateWithoutClaimsInput
  connectOrCreate: DiseaseCreateOrConnectWithoutClaimsInput
  upsert: DiseaseUpsertWithoutClaimsInput
  disconnect: DiseaseWhereInput
  delete: DiseaseWhereInput
  connect: DiseaseWhereUniqueInput
  update: DiseaseUpdateToOneWithWhereWithoutClaimsInput
}

input DiseaseUpsertWithoutClaimsInput {
  update: DiseaseUpdateWithoutClaimsInput!
  create: DiseaseCreateWithoutClaimsInput!
  where: DiseaseWhereInput
}

input DiseaseUpdateWithoutClaimsInput {
  code: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input DiseaseUpdateToOneWithWhereWithoutClaimsInput {
  where: DiseaseWhereInput
  data: DiseaseUpdateWithoutClaimsInput!
}

input ClinicUpdateOneRequiredWithoutClaimsNestedInput {
  create: ClinicCreateWithoutClaimsInput
  connectOrCreate: ClinicCreateOrConnectWithoutClaimsInput
  upsert: ClinicUpsertWithoutClaimsInput
  connect: ClinicWhereUniqueInput
  update: ClinicUpdateToOneWithWhereWithoutClaimsInput
}

input ClinicUpsertWithoutClaimsInput {
  update: ClinicUpdateWithoutClaimsInput!
  create: ClinicCreateWithoutClaimsInput!
  where: ClinicWhereInput
}

input ClinicUpdateWithoutClaimsInput {
  code: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClinicUpdateToOneWithWhereWithoutClaimsInput {
  where: ClinicWhereInput
  data: ClinicUpdateWithoutClaimsInput!
}

input UserUpdateOneWithoutClaimsInputNestedInput {
  create: UserCreateWithoutClaimsInputInput
  connectOrCreate: UserCreateOrConnectWithoutClaimsInputInput
  upsert: UserUpsertWithoutClaimsInputInput
  disconnect: UserWhereInput
  delete: UserWhereInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutClaimsInputInput
}

input UserUpsertWithoutClaimsInputInput {
  update: UserUpdateWithoutClaimsInputInput!
  create: UserCreateWithoutClaimsInputInput!
  where: UserWhereInput
}

input UserUpdateWithoutClaimsInputInput {
  id: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profilePictureUrl: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  participantId: NullableIntFieldUpdateOperationsInput
  role: RoleUpdateOneRequiredWithoutUsersNestedInput
  participant: ParticipantUpdateOneWithoutUserNestedInput
  claimActions: ClaimStatusUpdateManyWithoutCreateByNestedInput
  announcementCreated: AnnouncementUpdateManyWithoutCreatedByNestedInput
  notification: NotificationUpdateManyWithoutUserNestedInput
  claimsOnWait: ClaimUpdateManyWithoutWaitingForNestedInput
}

input ClaimStatusUpdateManyWithoutCreateByNestedInput {
  create: [ClaimStatusCreateWithoutCreateByInput!]
  connectOrCreate: [ClaimStatusCreateOrConnectWithoutCreateByInput!]
  upsert: [ClaimStatusUpsertWithWhereUniqueWithoutCreateByInput!]
  createMany: ClaimStatusCreateManyCreateByInputEnvelope
  set: [ClaimStatusWhereUniqueInput!]
  disconnect: [ClaimStatusWhereUniqueInput!]
  delete: [ClaimStatusWhereUniqueInput!]
  connect: [ClaimStatusWhereUniqueInput!]
  update: [ClaimStatusUpdateWithWhereUniqueWithoutCreateByInput!]
  updateMany: [ClaimStatusUpdateManyWithWhereWithoutCreateByInput!]
  deleteMany: [ClaimStatusScalarWhereInput!]
}

input ClaimStatusUpsertWithWhereUniqueWithoutCreateByInput {
  where: ClaimStatusWhereUniqueInput!
  update: ClaimStatusUpdateWithoutCreateByInput!
  create: ClaimStatusCreateWithoutCreateByInput!
}

input ClaimStatusUpdateWithoutCreateByInput {
  description: NullableStringFieldUpdateOperationsInput
  rejectionReason: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  status: EnumClaimStatusTypeFieldUpdateOperationsInput
  claim: ClaimUpdateOneRequiredWithoutClaimStatusesNestedInput
  rejectionLetter: DocumentUpdateOneWithoutRejectionLetterOfNestedInput
  guaranteeLetter: DocumentUpdateOneWithoutGuaranteeLetterOfNestedInput
  transactionLetter: DocumentUpdateOneWithoutTransactionLetterOfNestedInput
  bookKeepingOrder: DocumentUpdateOneWithoutBookKeepingOrderOfNestedInput
  claimFinancial: ClaimFinancialUpdateOneWithoutClaimStatusNestedInput
}

input DocumentUpdateOneWithoutRejectionLetterOfNestedInput {
  create: DocumentCreateWithoutRejectionLetterOfInput
  connectOrCreate: DocumentCreateOrConnectWithoutRejectionLetterOfInput
  upsert: DocumentUpsertWithoutRejectionLetterOfInput
  disconnect: DocumentWhereInput
  delete: DocumentWhereInput
  connect: DocumentWhereUniqueInput
  update: DocumentUpdateToOneWithWhereWithoutRejectionLetterOfInput
}

input DocumentUpsertWithoutRejectionLetterOfInput {
  update: DocumentUpdateWithoutRejectionLetterOfInput!
  create: DocumentCreateWithoutRejectionLetterOfInput!
  where: DocumentWhereInput
}

input DocumentUpdateWithoutRejectionLetterOfInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  printCount: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  source: EnumDocumentSourceFieldUpdateOperationsInput
  type: EnumDocumentTypeFieldUpdateOperationsInput
  guaranteeLetterOf: ClaimStatusUpdateOneWithoutGuaranteeLetterNestedInput
  transactionLetterOf: ClaimStatusUpdateOneWithoutTransactionLetterNestedInput
  bookKeepingOrderOf: ClaimStatusUpdateOneWithoutBookKeepingOrderNestedInput
  claimProcess: ClaimProcessUpdateOneWithoutDocumentsNestedInput
}

input ClaimStatusUpdateOneWithoutGuaranteeLetterNestedInput {
  create: ClaimStatusCreateWithoutGuaranteeLetterInput
  connectOrCreate: ClaimStatusCreateOrConnectWithoutGuaranteeLetterInput
  upsert: ClaimStatusUpsertWithoutGuaranteeLetterInput
  disconnect: ClaimStatusWhereInput
  delete: ClaimStatusWhereInput
  connect: ClaimStatusWhereUniqueInput
  update: ClaimStatusUpdateToOneWithWhereWithoutGuaranteeLetterInput
}

input ClaimStatusUpsertWithoutGuaranteeLetterInput {
  update: ClaimStatusUpdateWithoutGuaranteeLetterInput!
  create: ClaimStatusCreateWithoutGuaranteeLetterInput!
  where: ClaimStatusWhereInput
}

input ClaimStatusUpdateWithoutGuaranteeLetterInput {
  description: NullableStringFieldUpdateOperationsInput
  rejectionReason: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  status: EnumClaimStatusTypeFieldUpdateOperationsInput
  createBy: UserUpdateOneRequiredWithoutClaimActionsNestedInput
  claim: ClaimUpdateOneRequiredWithoutClaimStatusesNestedInput
  rejectionLetter: DocumentUpdateOneWithoutRejectionLetterOfNestedInput
  transactionLetter: DocumentUpdateOneWithoutTransactionLetterOfNestedInput
  bookKeepingOrder: DocumentUpdateOneWithoutBookKeepingOrderOfNestedInput
  claimFinancial: ClaimFinancialUpdateOneWithoutClaimStatusNestedInput
}

input DocumentUpdateOneWithoutTransactionLetterOfNestedInput {
  create: DocumentCreateWithoutTransactionLetterOfInput
  connectOrCreate: DocumentCreateOrConnectWithoutTransactionLetterOfInput
  upsert: DocumentUpsertWithoutTransactionLetterOfInput
  disconnect: DocumentWhereInput
  delete: DocumentWhereInput
  connect: DocumentWhereUniqueInput
  update: DocumentUpdateToOneWithWhereWithoutTransactionLetterOfInput
}

input DocumentUpsertWithoutTransactionLetterOfInput {
  update: DocumentUpdateWithoutTransactionLetterOfInput!
  create: DocumentCreateWithoutTransactionLetterOfInput!
  where: DocumentWhereInput
}

input DocumentUpdateWithoutTransactionLetterOfInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  printCount: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  source: EnumDocumentSourceFieldUpdateOperationsInput
  type: EnumDocumentTypeFieldUpdateOperationsInput
  rejectionLetterOf: ClaimStatusUpdateOneWithoutRejectionLetterNestedInput
  guaranteeLetterOf: ClaimStatusUpdateOneWithoutGuaranteeLetterNestedInput
  bookKeepingOrderOf: ClaimStatusUpdateOneWithoutBookKeepingOrderNestedInput
  claimProcess: ClaimProcessUpdateOneWithoutDocumentsNestedInput
}

input ClaimStatusUpdateOneWithoutBookKeepingOrderNestedInput {
  create: ClaimStatusCreateWithoutBookKeepingOrderInput
  connectOrCreate: ClaimStatusCreateOrConnectWithoutBookKeepingOrderInput
  upsert: ClaimStatusUpsertWithoutBookKeepingOrderInput
  disconnect: ClaimStatusWhereInput
  delete: ClaimStatusWhereInput
  connect: ClaimStatusWhereUniqueInput
  update: ClaimStatusUpdateToOneWithWhereWithoutBookKeepingOrderInput
}

input ClaimStatusUpsertWithoutBookKeepingOrderInput {
  update: ClaimStatusUpdateWithoutBookKeepingOrderInput!
  create: ClaimStatusCreateWithoutBookKeepingOrderInput!
  where: ClaimStatusWhereInput
}

input ClaimStatusUpdateWithoutBookKeepingOrderInput {
  description: NullableStringFieldUpdateOperationsInput
  rejectionReason: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  status: EnumClaimStatusTypeFieldUpdateOperationsInput
  createBy: UserUpdateOneRequiredWithoutClaimActionsNestedInput
  claim: ClaimUpdateOneRequiredWithoutClaimStatusesNestedInput
  rejectionLetter: DocumentUpdateOneWithoutRejectionLetterOfNestedInput
  guaranteeLetter: DocumentUpdateOneWithoutGuaranteeLetterOfNestedInput
  transactionLetter: DocumentUpdateOneWithoutTransactionLetterOfNestedInput
  claimFinancial: ClaimFinancialUpdateOneWithoutClaimStatusNestedInput
}

input DocumentUpdateOneWithoutGuaranteeLetterOfNestedInput {
  create: DocumentCreateWithoutGuaranteeLetterOfInput
  connectOrCreate: DocumentCreateOrConnectWithoutGuaranteeLetterOfInput
  upsert: DocumentUpsertWithoutGuaranteeLetterOfInput
  disconnect: DocumentWhereInput
  delete: DocumentWhereInput
  connect: DocumentWhereUniqueInput
  update: DocumentUpdateToOneWithWhereWithoutGuaranteeLetterOfInput
}

input DocumentUpsertWithoutGuaranteeLetterOfInput {
  update: DocumentUpdateWithoutGuaranteeLetterOfInput!
  create: DocumentCreateWithoutGuaranteeLetterOfInput!
  where: DocumentWhereInput
}

input DocumentUpdateWithoutGuaranteeLetterOfInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  printCount: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  source: EnumDocumentSourceFieldUpdateOperationsInput
  type: EnumDocumentTypeFieldUpdateOperationsInput
  rejectionLetterOf: ClaimStatusUpdateOneWithoutRejectionLetterNestedInput
  transactionLetterOf: ClaimStatusUpdateOneWithoutTransactionLetterNestedInput
  bookKeepingOrderOf: ClaimStatusUpdateOneWithoutBookKeepingOrderNestedInput
  claimProcess: ClaimProcessUpdateOneWithoutDocumentsNestedInput
}

input ClaimStatusUpdateOneWithoutTransactionLetterNestedInput {
  create: ClaimStatusCreateWithoutTransactionLetterInput
  connectOrCreate: ClaimStatusCreateOrConnectWithoutTransactionLetterInput
  upsert: ClaimStatusUpsertWithoutTransactionLetterInput
  disconnect: ClaimStatusWhereInput
  delete: ClaimStatusWhereInput
  connect: ClaimStatusWhereUniqueInput
  update: ClaimStatusUpdateToOneWithWhereWithoutTransactionLetterInput
}

input ClaimStatusUpsertWithoutTransactionLetterInput {
  update: ClaimStatusUpdateWithoutTransactionLetterInput!
  create: ClaimStatusCreateWithoutTransactionLetterInput!
  where: ClaimStatusWhereInput
}

input ClaimStatusUpdateWithoutTransactionLetterInput {
  description: NullableStringFieldUpdateOperationsInput
  rejectionReason: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  status: EnumClaimStatusTypeFieldUpdateOperationsInput
  createBy: UserUpdateOneRequiredWithoutClaimActionsNestedInput
  claim: ClaimUpdateOneRequiredWithoutClaimStatusesNestedInput
  rejectionLetter: DocumentUpdateOneWithoutRejectionLetterOfNestedInput
  guaranteeLetter: DocumentUpdateOneWithoutGuaranteeLetterOfNestedInput
  bookKeepingOrder: DocumentUpdateOneWithoutBookKeepingOrderOfNestedInput
  claimFinancial: ClaimFinancialUpdateOneWithoutClaimStatusNestedInput
}

input DocumentUpdateOneWithoutBookKeepingOrderOfNestedInput {
  create: DocumentCreateWithoutBookKeepingOrderOfInput
  connectOrCreate: DocumentCreateOrConnectWithoutBookKeepingOrderOfInput
  upsert: DocumentUpsertWithoutBookKeepingOrderOfInput
  disconnect: DocumentWhereInput
  delete: DocumentWhereInput
  connect: DocumentWhereUniqueInput
  update: DocumentUpdateToOneWithWhereWithoutBookKeepingOrderOfInput
}

input DocumentUpsertWithoutBookKeepingOrderOfInput {
  update: DocumentUpdateWithoutBookKeepingOrderOfInput!
  create: DocumentCreateWithoutBookKeepingOrderOfInput!
  where: DocumentWhereInput
}

input DocumentUpdateWithoutBookKeepingOrderOfInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  printCount: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  source: EnumDocumentSourceFieldUpdateOperationsInput
  type: EnumDocumentTypeFieldUpdateOperationsInput
  rejectionLetterOf: ClaimStatusUpdateOneWithoutRejectionLetterNestedInput
  guaranteeLetterOf: ClaimStatusUpdateOneWithoutGuaranteeLetterNestedInput
  transactionLetterOf: ClaimStatusUpdateOneWithoutTransactionLetterNestedInput
  claimProcess: ClaimProcessUpdateOneWithoutDocumentsNestedInput
}

input ClaimProcessUpdateOneWithoutDocumentsNestedInput {
  create: ClaimProcessCreateWithoutDocumentsInput
  connectOrCreate: ClaimProcessCreateOrConnectWithoutDocumentsInput
  upsert: ClaimProcessUpsertWithoutDocumentsInput
  disconnect: ClaimProcessWhereInput
  delete: ClaimProcessWhereInput
  connect: ClaimProcessWhereUniqueInput
  update: ClaimProcessUpdateToOneWithWhereWithoutDocumentsInput
}

input ClaimProcessUpsertWithoutDocumentsInput {
  update: ClaimProcessUpdateWithoutDocumentsInput!
  create: ClaimProcessCreateWithoutDocumentsInput!
  where: ClaimProcessWhereInput
}

input ClaimProcessUpdateWithoutDocumentsInput {
  startTreatment: NullableDateTimeFieldUpdateOperationsInput
  endTreatment: NullableDateTimeFieldUpdateOperationsInput
  expeditionDate: NullableDateTimeFieldUpdateOperationsInput
  reclaim: NullableStringFieldUpdateOperationsInput
  processDate: NullableDateTimeFieldUpdateOperationsInput
  submissionNote: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  additionalNote: NullableStringFieldUpdateOperationsInput
  claim: ClaimUpdateOneWithoutClaimProcessesNestedInput
}

input ClaimUpdateOneWithoutClaimProcessesNestedInput {
  create: ClaimCreateWithoutClaimProcessesInput
  connectOrCreate: ClaimCreateOrConnectWithoutClaimProcessesInput
  upsert: ClaimUpsertWithoutClaimProcessesInput
  disconnect: ClaimWhereInput
  delete: ClaimWhereInput
  connect: ClaimWhereUniqueInput
  update: ClaimUpdateToOneWithWhereWithoutClaimProcessesInput
}

input ClaimUpsertWithoutClaimProcessesInput {
  update: ClaimUpdateWithoutClaimProcessesInput!
  create: ClaimCreateWithoutClaimProcessesInput!
  where: ClaimWhereInput
}

input ClaimUpdateWithoutClaimProcessesInput {
  channel: EnumClaimChannelFieldUpdateOperationsInput
  admedicaStatus: EnumAdmedicaStatusFieldUpdateOperationsInput
  company: StringFieldUpdateOperationsInput
  participant: ParticipantUpdateOneRequiredWithoutClaimsNestedInput
  claimFinancials: ClaimFinancialUpdateOneRequiredWithoutClaimNestedInput
  disease: DiseaseUpdateOneWithoutClaimsNestedInput
  clinics: ClinicUpdateOneRequiredWithoutClaimsNestedInput
  inputedBy: UserUpdateOneWithoutClaimsInputNestedInput
  program: ProgramUpdateOneRequiredWithoutClaimsNestedInput
  waitingFor: UserUpdateOneWithoutClaimsOnWaitNestedInput
  tags: TagUpdateManyWithoutClaimsNestedInput
}

input ProgramUpdateOneRequiredWithoutClaimsNestedInput {
  create: ProgramCreateWithoutClaimsInput
  connectOrCreate: ProgramCreateOrConnectWithoutClaimsInput
  upsert: ProgramUpsertWithoutClaimsInput
  connect: ProgramWhereUniqueInput
  update: ProgramUpdateToOneWithWhereWithoutClaimsInput
}

input ProgramUpsertWithoutClaimsInput {
  update: ProgramUpdateWithoutClaimsInput!
  create: ProgramCreateWithoutClaimsInput!
  where: ProgramWhereInput
}

input ProgramUpdateWithoutClaimsInput {
  plan: EnumApplicationTypeFieldUpdateOperationsInput
  maxAllowancePercentage: NullableIntFieldUpdateOperationsInput
  allowanceCeiling: NullableFloatFieldUpdateOperationsInput
  maxAllowancePerYear: NullableFloatFieldUpdateOperationsInput
  claimPeriodMax: NullableIntFieldUpdateOperationsInput
  reclaimPeriodMax: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  class: EnumClassFieldUpdateOperationsInput
  programParticipations: ProgramParticipationUpdateManyWithoutProgramNestedInput
}

input EnumApplicationTypeFieldUpdateOperationsInput {
  set: ApplicationType
}

input EnumClassFieldUpdateOperationsInput {
  set: Class
}

input ProgramParticipationUpdateManyWithoutProgramNestedInput {
  create: [ProgramParticipationCreateWithoutProgramInput!]
  connectOrCreate: [ProgramParticipationCreateOrConnectWithoutProgramInput!]
  upsert: [ProgramParticipationUpsertWithWhereUniqueWithoutProgramInput!]
  createMany: ProgramParticipationCreateManyProgramInputEnvelope
  set: [ProgramParticipationWhereUniqueInput!]
  disconnect: [ProgramParticipationWhereUniqueInput!]
  delete: [ProgramParticipationWhereUniqueInput!]
  connect: [ProgramParticipationWhereUniqueInput!]
  update: [ProgramParticipationUpdateWithWhereUniqueWithoutProgramInput!]
  updateMany: [ProgramParticipationUpdateManyWithWhereWithoutProgramInput!]
  deleteMany: [ProgramParticipationScalarWhereInput!]
}

input ProgramParticipationUpsertWithWhereUniqueWithoutProgramInput {
  where: ProgramParticipationWhereUniqueInput!
  update: ProgramParticipationUpdateWithoutProgramInput!
  create: ProgramParticipationCreateWithoutProgramInput!
}

input ProgramParticipationUpdateWithoutProgramInput {
  bpjsNumber: NullableStringFieldUpdateOperationsInput
  nonActiveReason: NullableStringFieldUpdateOperationsInput
  effectiveDate: DateTimeFieldUpdateOperationsInput
  nonActiveDate: NullableDateTimeFieldUpdateOperationsInput
  participant: ParticipantUpdateOneRequiredWithoutProgramParticipationsNestedInput
  funding: AccountUpdateOneRequiredWithoutProgramParticipationNestedInput
}

input ParticipantUpdateOneRequiredWithoutProgramParticipationsNestedInput {
  create: ParticipantCreateWithoutProgramParticipationsInput
  connectOrCreate: ParticipantCreateOrConnectWithoutProgramParticipationsInput
  upsert: ParticipantUpsertWithoutProgramParticipationsInput
  connect: ParticipantWhereUniqueInput
  update: ParticipantUpdateToOneWithWhereWithoutProgramParticipationsInput
}

input ParticipantUpsertWithoutProgramParticipationsInput {
  update: ParticipantUpdateWithoutProgramParticipationsInput!
  create: ParticipantCreateWithoutProgramParticipationsInput!
  where: ParticipantWhereInput
}

input ParticipantUpdateWithoutProgramParticipationsInput {
  gender: EnumGenderFieldUpdateOperationsInput
  birthDate: DateTimeFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  status: EnumParticipantStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutParticipantNestedInput
  relation: ParticipantUpdateOneWithoutParticipantNestedInput
  bankAccount: BankAccountUpdateOneWithoutParticipantNestedInput
  claims: ClaimUpdateManyWithoutParticipantNestedInput
  employments: EmploymentUpdateManyWithoutParticipantNestedInput
  contactInfos: ContactInfoUpdateManyWithoutParticipantNestedInput
  balances: AccountUpdateManyWithoutParticipantNestedInput
  Participant: ParticipantUpdateManyWithoutRelationNestedInput
}

input ContactInfoUpdateManyWithoutParticipantNestedInput {
  create: [ContactInfoCreateWithoutParticipantInput!]
  connectOrCreate: [ContactInfoCreateOrConnectWithoutParticipantInput!]
  upsert: [ContactInfoUpsertWithWhereUniqueWithoutParticipantInput!]
  createMany: ContactInfoCreateManyParticipantInputEnvelope
  set: [ContactInfoWhereUniqueInput!]
  disconnect: [ContactInfoWhereUniqueInput!]
  delete: [ContactInfoWhereUniqueInput!]
  connect: [ContactInfoWhereUniqueInput!]
  update: [ContactInfoUpdateWithWhereUniqueWithoutParticipantInput!]
  updateMany: [ContactInfoUpdateManyWithWhereWithoutParticipantInput!]
  deleteMany: [ContactInfoScalarWhereInput!]
}

input ContactInfoUpsertWithWhereUniqueWithoutParticipantInput {
  where: ContactInfoWhereUniqueInput!
  update: ContactInfoUpdateWithoutParticipantInput!
  create: ContactInfoCreateWithoutParticipantInput!
}

input ContactInfoUpdateWithoutParticipantInput {
  telp: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutContactInfoNestedInput
}

input AddressUpdateOneRequiredWithoutContactInfoNestedInput {
  create: AddressCreateWithoutContactInfoInput
  connectOrCreate: AddressCreateOrConnectWithoutContactInfoInput
  upsert: AddressUpsertWithoutContactInfoInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutContactInfoInput
}

input AddressUpsertWithoutContactInfoInput {
  update: AddressUpdateWithoutContactInfoInput!
  create: AddressCreateWithoutContactInfoInput!
  where: AddressWhereInput
}

input AddressUpdateWithoutContactInfoInput {
  address: StringFieldUpdateOperationsInput
  subdistrict: SubdistrictUpdateOneRequiredWithoutAddressNestedInput
}

input SubdistrictUpdateOneRequiredWithoutAddressNestedInput {
  create: SubdistrictCreateWithoutAddressInput
  connectOrCreate: SubdistrictCreateOrConnectWithoutAddressInput
  upsert: SubdistrictUpsertWithoutAddressInput
  connect: SubdistrictWhereUniqueInput
  update: SubdistrictUpdateToOneWithWhereWithoutAddressInput
}

input SubdistrictUpsertWithoutAddressInput {
  update: SubdistrictUpdateWithoutAddressInput!
  create: SubdistrictCreateWithoutAddressInput!
  where: SubdistrictWhereInput
}

input SubdistrictUpdateWithoutAddressInput {
  name: StringFieldUpdateOperationsInput
  postalCode: StringFieldUpdateOperationsInput
  district: DistrictUpdateOneRequiredWithoutSubdistrictsNestedInput
}

input DistrictUpdateOneRequiredWithoutSubdistrictsNestedInput {
  create: DistrictCreateWithoutSubdistrictsInput
  connectOrCreate: DistrictCreateOrConnectWithoutSubdistrictsInput
  upsert: DistrictUpsertWithoutSubdistrictsInput
  connect: DistrictWhereUniqueInput
  update: DistrictUpdateToOneWithWhereWithoutSubdistrictsInput
}

input DistrictUpsertWithoutSubdistrictsInput {
  update: DistrictUpdateWithoutSubdistrictsInput!
  create: DistrictCreateWithoutSubdistrictsInput!
  where: DistrictWhereInput
}

input DistrictUpdateWithoutSubdistrictsInput {
  name: StringFieldUpdateOperationsInput
  city: CityUpdateOneRequiredWithoutDistrictsNestedInput
}

input CityUpdateOneRequiredWithoutDistrictsNestedInput {
  create: CityCreateWithoutDistrictsInput
  connectOrCreate: CityCreateOrConnectWithoutDistrictsInput
  upsert: CityUpsertWithoutDistrictsInput
  connect: CityWhereUniqueInput
  update: CityUpdateToOneWithWhereWithoutDistrictsInput
}

input CityUpsertWithoutDistrictsInput {
  update: CityUpdateWithoutDistrictsInput!
  create: CityCreateWithoutDistrictsInput!
  where: CityWhereInput
}

input CityUpdateWithoutDistrictsInput {
  name: StringFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutCitiesNestedInput
}

input ProvinceUpdateOneRequiredWithoutCitiesNestedInput {
  create: ProvinceCreateWithoutCitiesInput
  connectOrCreate: ProvinceCreateOrConnectWithoutCitiesInput
  upsert: ProvinceUpsertWithoutCitiesInput
  connect: ProvinceWhereUniqueInput
  update: ProvinceUpdateToOneWithWhereWithoutCitiesInput
}

input ProvinceUpsertWithoutCitiesInput {
  update: ProvinceUpdateWithoutCitiesInput!
  create: ProvinceCreateWithoutCitiesInput!
  where: ProvinceWhereInput
}

input ProvinceUpdateWithoutCitiesInput {
  name: StringFieldUpdateOperationsInput
}

input ProvinceUpdateToOneWithWhereWithoutCitiesInput {
  where: ProvinceWhereInput
  data: ProvinceUpdateWithoutCitiesInput!
}

input CityUpdateToOneWithWhereWithoutDistrictsInput {
  where: CityWhereInput
  data: CityUpdateWithoutDistrictsInput!
}

input DistrictUpdateToOneWithWhereWithoutSubdistrictsInput {
  where: DistrictWhereInput
  data: DistrictUpdateWithoutSubdistrictsInput!
}

input SubdistrictUpdateToOneWithWhereWithoutAddressInput {
  where: SubdistrictWhereInput
  data: SubdistrictUpdateWithoutAddressInput!
}

input AddressUpdateToOneWithWhereWithoutContactInfoInput {
  where: AddressWhereInput
  data: AddressUpdateWithoutContactInfoInput!
}

input ContactInfoUpdateWithWhereUniqueWithoutParticipantInput {
  where: ContactInfoWhereUniqueInput!
  data: ContactInfoUpdateWithoutParticipantInput!
}

input ContactInfoUpdateManyWithWhereWithoutParticipantInput {
  where: ContactInfoScalarWhereInput!
  data: ContactInfoUpdateManyMutationInput!
}

input ContactInfoScalarWhereInput {
  AND: [ContactInfoScalarWhereInput!]
  OR: [ContactInfoScalarWhereInput!]
  NOT: [ContactInfoScalarWhereInput!]
  id: IntFilter
  telp: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  participantId: StringFilter
  addressId: IntFilter
}

input ContactInfoUpdateManyMutationInput {
  telp: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input AccountUpdateManyWithoutParticipantNestedInput {
  create: [AccountCreateWithoutParticipantInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutParticipantInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutParticipantInput!]
  createMany: AccountCreateManyParticipantInputEnvelope
  set: [AccountWhereUniqueInput!]
  disconnect: [AccountWhereUniqueInput!]
  delete: [AccountWhereUniqueInput!]
  connect: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutParticipantInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutParticipantInput!]
  deleteMany: [AccountScalarWhereInput!]
}

input AccountUpsertWithWhereUniqueWithoutParticipantInput {
  where: AccountWhereUniqueInput!
  update: AccountUpdateWithoutParticipantInput!
  create: AccountCreateWithoutParticipantInput!
}

input AccountUpdateWithoutParticipantInput {
  currentBalance: FloatFieldUpdateOperationsInput
  currentBalanceLastUpdate: NullableDateTimeFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountNestedInput
  programParticipation: ProgramParticipationUpdateManyWithoutFundingNestedInput
}

input TransactionUpdateManyWithoutAccountNestedInput {
  create: [TransactionCreateWithoutAccountInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutAccountInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutAccountInput!]
  createMany: TransactionCreateManyAccountInputEnvelope
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutAccountInput!]
  deleteMany: [TransactionScalarWhereInput!]
}

input TransactionUpsertWithWhereUniqueWithoutAccountInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutAccountInput!
  create: TransactionCreateWithoutAccountInput!
}

input TransactionUpdateWithoutAccountInput {
  amount: FloatFieldUpdateOperationsInput
  transactionType: EnumTransactionTypeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input EnumTransactionTypeFieldUpdateOperationsInput {
  set: TransactionType
}

input TransactionUpdateWithWhereUniqueWithoutAccountInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutAccountInput!
}

input TransactionUpdateManyWithWhereWithoutAccountInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyMutationInput!
}

input TransactionScalarWhereInput {
  AND: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
  id: IntFilter
  amount: FloatFilter
  transactionType: EnumTransactionTypeFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  accountId: IntFilter
}

input TransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  transactionType: EnumTransactionTypeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ProgramParticipationUpdateManyWithoutFundingNestedInput {
  create: [ProgramParticipationCreateWithoutFundingInput!]
  connectOrCreate: [ProgramParticipationCreateOrConnectWithoutFundingInput!]
  upsert: [ProgramParticipationUpsertWithWhereUniqueWithoutFundingInput!]
  createMany: ProgramParticipationCreateManyFundingInputEnvelope
  set: [ProgramParticipationWhereUniqueInput!]
  disconnect: [ProgramParticipationWhereUniqueInput!]
  delete: [ProgramParticipationWhereUniqueInput!]
  connect: [ProgramParticipationWhereUniqueInput!]
  update: [ProgramParticipationUpdateWithWhereUniqueWithoutFundingInput!]
  updateMany: [ProgramParticipationUpdateManyWithWhereWithoutFundingInput!]
  deleteMany: [ProgramParticipationScalarWhereInput!]
}

input ProgramParticipationUpsertWithWhereUniqueWithoutFundingInput {
  where: ProgramParticipationWhereUniqueInput!
  update: ProgramParticipationUpdateWithoutFundingInput!
  create: ProgramParticipationCreateWithoutFundingInput!
}

input ProgramParticipationUpdateWithoutFundingInput {
  bpjsNumber: NullableStringFieldUpdateOperationsInput
  nonActiveReason: NullableStringFieldUpdateOperationsInput
  effectiveDate: DateTimeFieldUpdateOperationsInput
  nonActiveDate: NullableDateTimeFieldUpdateOperationsInput
  participant: ParticipantUpdateOneRequiredWithoutProgramParticipationsNestedInput
  Program: ProgramUpdateOneWithoutProgramParticipationsNestedInput
}

input ProgramUpdateOneWithoutProgramParticipationsNestedInput {
  create: ProgramCreateWithoutProgramParticipationsInput
  connectOrCreate: ProgramCreateOrConnectWithoutProgramParticipationsInput
  upsert: ProgramUpsertWithoutProgramParticipationsInput
  disconnect: ProgramWhereInput
  delete: ProgramWhereInput
  connect: ProgramWhereUniqueInput
  update: ProgramUpdateToOneWithWhereWithoutProgramParticipationsInput
}

input ProgramUpsertWithoutProgramParticipationsInput {
  update: ProgramUpdateWithoutProgramParticipationsInput!
  create: ProgramCreateWithoutProgramParticipationsInput!
  where: ProgramWhereInput
}

input ProgramUpdateWithoutProgramParticipationsInput {
  plan: EnumApplicationTypeFieldUpdateOperationsInput
  maxAllowancePercentage: NullableIntFieldUpdateOperationsInput
  allowanceCeiling: NullableFloatFieldUpdateOperationsInput
  maxAllowancePerYear: NullableFloatFieldUpdateOperationsInput
  claimPeriodMax: NullableIntFieldUpdateOperationsInput
  reclaimPeriodMax: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  class: EnumClassFieldUpdateOperationsInput
  claims: ClaimUpdateManyWithoutProgramNestedInput
}

input ClaimUpdateManyWithoutProgramNestedInput {
  create: [ClaimCreateWithoutProgramInput!]
  connectOrCreate: [ClaimCreateOrConnectWithoutProgramInput!]
  upsert: [ClaimUpsertWithWhereUniqueWithoutProgramInput!]
  createMany: ClaimCreateManyProgramInputEnvelope
  set: [ClaimWhereUniqueInput!]
  disconnect: [ClaimWhereUniqueInput!]
  delete: [ClaimWhereUniqueInput!]
  connect: [ClaimWhereUniqueInput!]
  update: [ClaimUpdateWithWhereUniqueWithoutProgramInput!]
  updateMany: [ClaimUpdateManyWithWhereWithoutProgramInput!]
  deleteMany: [ClaimScalarWhereInput!]
}

input ClaimUpsertWithWhereUniqueWithoutProgramInput {
  where: ClaimWhereUniqueInput!
  update: ClaimUpdateWithoutProgramInput!
  create: ClaimCreateWithoutProgramInput!
}

input ClaimUpdateWithoutProgramInput {
  channel: EnumClaimChannelFieldUpdateOperationsInput
  admedicaStatus: EnumAdmedicaStatusFieldUpdateOperationsInput
  company: StringFieldUpdateOperationsInput
  participant: ParticipantUpdateOneRequiredWithoutClaimsNestedInput
  claimFinancials: ClaimFinancialUpdateOneRequiredWithoutClaimNestedInput
  claimProcesses: ClaimProcessUpdateOneRequiredWithoutClaimNestedInput
  disease: DiseaseUpdateOneWithoutClaimsNestedInput
  clinics: ClinicUpdateOneRequiredWithoutClaimsNestedInput
  inputedBy: UserUpdateOneWithoutClaimsInputNestedInput
  waitingFor: UserUpdateOneWithoutClaimsOnWaitNestedInput
  tags: TagUpdateManyWithoutClaimsNestedInput
}

input UserUpdateOneWithoutClaimsOnWaitNestedInput {
  create: UserCreateWithoutClaimsOnWaitInput
  connectOrCreate: UserCreateOrConnectWithoutClaimsOnWaitInput
  upsert: UserUpsertWithoutClaimsOnWaitInput
  disconnect: UserWhereInput
  delete: UserWhereInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutClaimsOnWaitInput
}

input UserUpsertWithoutClaimsOnWaitInput {
  update: UserUpdateWithoutClaimsOnWaitInput!
  create: UserCreateWithoutClaimsOnWaitInput!
  where: UserWhereInput
}

input UserUpdateWithoutClaimsOnWaitInput {
  id: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profilePictureUrl: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  participantId: NullableIntFieldUpdateOperationsInput
  role: RoleUpdateOneRequiredWithoutUsersNestedInput
  participant: ParticipantUpdateOneWithoutUserNestedInput
  claimsInput: ClaimUpdateManyWithoutInputedByNestedInput
  claimActions: ClaimStatusUpdateManyWithoutCreateByNestedInput
  announcementCreated: AnnouncementUpdateManyWithoutCreatedByNestedInput
  notification: NotificationUpdateManyWithoutUserNestedInput
}

input AnnouncementUpdateManyWithoutCreatedByNestedInput {
  create: [AnnouncementCreateWithoutCreatedByInput!]
  connectOrCreate: [AnnouncementCreateOrConnectWithoutCreatedByInput!]
  upsert: [AnnouncementUpsertWithWhereUniqueWithoutCreatedByInput!]
  createMany: AnnouncementCreateManyCreatedByInputEnvelope
  set: [AnnouncementWhereUniqueInput!]
  disconnect: [AnnouncementWhereUniqueInput!]
  delete: [AnnouncementWhereUniqueInput!]
  connect: [AnnouncementWhereUniqueInput!]
  update: [AnnouncementUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [AnnouncementUpdateManyWithWhereWithoutCreatedByInput!]
  deleteMany: [AnnouncementScalarWhereInput!]
}

input AnnouncementUpsertWithWhereUniqueWithoutCreatedByInput {
  where: AnnouncementWhereUniqueInput!
  update: AnnouncementUpdateWithoutCreatedByInput!
  create: AnnouncementCreateWithoutCreatedByInput!
}

input AnnouncementUpdateWithoutCreatedByInput {
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  imageUrl: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AnnouncementUpdateWithWhereUniqueWithoutCreatedByInput {
  where: AnnouncementWhereUniqueInput!
  data: AnnouncementUpdateWithoutCreatedByInput!
}

input AnnouncementUpdateManyWithWhereWithoutCreatedByInput {
  where: AnnouncementScalarWhereInput!
  data: AnnouncementUpdateManyMutationInput!
}

input AnnouncementScalarWhereInput {
  AND: [AnnouncementScalarWhereInput!]
  OR: [AnnouncementScalarWhereInput!]
  NOT: [AnnouncementScalarWhereInput!]
  id: IntFilter
  title: StringFilter
  content: StringFilter
  imageUrl: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  createdById: StringFilter
}

input AnnouncementUpdateManyMutationInput {
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  imageUrl: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NotificationUpdateManyWithoutUserNestedInput {
  create: [NotificationCreateWithoutUserInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput!]
  createMany: NotificationCreateManyUserInputEnvelope
  set: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  delete: [NotificationWhereUniqueInput!]
  connect: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [NotificationUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [NotificationScalarWhereInput!]
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutUserInput!
  create: NotificationCreateWithoutUserInput!
}

input NotificationUpdateWithoutUserInput {
  isRead: BoolFieldUpdateOperationsInput
  isCleared: BoolFieldUpdateOperationsInput
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutUserInput!
}

input NotificationUpdateManyWithWhereWithoutUserInput {
  where: NotificationScalarWhereInput!
  data: NotificationUpdateManyMutationInput!
}

input NotificationScalarWhereInput {
  AND: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  NOT: [NotificationScalarWhereInput!]
  id: IntFilter
  isRead: BoolFilter
  isCleared: BoolFilter
}

input NotificationUpdateManyMutationInput {
  isRead: BoolFieldUpdateOperationsInput
  isCleared: BoolFieldUpdateOperationsInput
}

input UserUpdateToOneWithWhereWithoutClaimsOnWaitInput {
  where: UserWhereInput
  data: UserUpdateWithoutClaimsOnWaitInput!
}

input TagUpdateManyWithoutClaimsNestedInput {
  create: [TagCreateWithoutClaimsInput!]
  connectOrCreate: [TagCreateOrConnectWithoutClaimsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutClaimsInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutClaimsInput!]
  updateMany: [TagUpdateManyWithWhereWithoutClaimsInput!]
  deleteMany: [TagScalarWhereInput!]
}

input TagUpsertWithWhereUniqueWithoutClaimsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutClaimsInput!
  create: TagCreateWithoutClaimsInput!
}

input TagUpdateWithoutClaimsInput {
  name: StringFieldUpdateOperationsInput
  color: EnumColorFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EnumColorFieldUpdateOperationsInput {
  set: Color
}

input TagUpdateWithWhereUniqueWithoutClaimsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutClaimsInput!
}

input TagUpdateManyWithWhereWithoutClaimsInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyMutationInput!
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  color: EnumColorFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input TagUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  color: EnumColorFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClaimUpdateWithWhereUniqueWithoutProgramInput {
  where: ClaimWhereUniqueInput!
  data: ClaimUpdateWithoutProgramInput!
}

input ClaimUpdateManyWithWhereWithoutProgramInput {
  where: ClaimScalarWhereInput!
  data: ClaimUpdateManyMutationInput!
}

input ClaimScalarWhereInput {
  AND: [ClaimScalarWhereInput!]
  OR: [ClaimScalarWhereInput!]
  NOT: [ClaimScalarWhereInput!]
  channel: EnumClaimChannelFilter
  admedicaStatus: EnumAdmedicaStatusFilter
  company: StringFilter
  participantId: StringFilter
  claimFinancialId: IntFilter
  claimProcessId: IntFilter
  diseaseId: IntNullableFilter
  clinicId: IntFilter
  inputedById: StringNullableFilter
  programId: IntFilter
  waitingForId: StringNullableFilter
}

input ClaimUpdateManyMutationInput {
  channel: EnumClaimChannelFieldUpdateOperationsInput
  admedicaStatus: EnumAdmedicaStatusFieldUpdateOperationsInput
  company: StringFieldUpdateOperationsInput
}

input ProgramUpdateToOneWithWhereWithoutProgramParticipationsInput {
  where: ProgramWhereInput
  data: ProgramUpdateWithoutProgramParticipationsInput!
}

input ProgramParticipationUpdateWithWhereUniqueWithoutFundingInput {
  where: ProgramParticipationWhereUniqueInput!
  data: ProgramParticipationUpdateWithoutFundingInput!
}

input ProgramParticipationUpdateManyWithWhereWithoutFundingInput {
  where: ProgramParticipationScalarWhereInput!
  data: ProgramParticipationUpdateManyMutationInput!
}

input ProgramParticipationScalarWhereInput {
  AND: [ProgramParticipationScalarWhereInput!]
  OR: [ProgramParticipationScalarWhereInput!]
  NOT: [ProgramParticipationScalarWhereInput!]
  id: IntFilter
  bpjsNumber: StringNullableFilter
  nonActiveReason: StringNullableFilter
  effectiveDate: DateTimeFilter
  nonActiveDate: DateTimeNullableFilter
  participantId: StringFilter
  fundingId: IntFilter
  programId: IntNullableFilter
}

input ProgramParticipationUpdateManyMutationInput {
  bpjsNumber: NullableStringFieldUpdateOperationsInput
  nonActiveReason: NullableStringFieldUpdateOperationsInput
  effectiveDate: DateTimeFieldUpdateOperationsInput
  nonActiveDate: NullableDateTimeFieldUpdateOperationsInput
}

input AccountUpdateWithWhereUniqueWithoutParticipantInput {
  where: AccountWhereUniqueInput!
  data: AccountUpdateWithoutParticipantInput!
}

input AccountUpdateManyWithWhereWithoutParticipantInput {
  where: AccountScalarWhereInput!
  data: AccountUpdateManyMutationInput!
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  id: IntFilter
  currentBalance: FloatFilter
  currentBalanceLastUpdate: DateTimeNullableFilter
  participantId: StringFilter
}

input AccountUpdateManyMutationInput {
  currentBalance: FloatFieldUpdateOperationsInput
  currentBalanceLastUpdate: NullableDateTimeFieldUpdateOperationsInput
}

input ParticipantUpdateManyWithoutRelationNestedInput {
  create: [ParticipantCreateWithoutRelationInput!]
  connectOrCreate: [ParticipantCreateOrConnectWithoutRelationInput!]
  upsert: [ParticipantUpsertWithWhereUniqueWithoutRelationInput!]
  createMany: ParticipantCreateManyRelationInputEnvelope
  set: [ParticipantWhereUniqueInput!]
  disconnect: [ParticipantWhereUniqueInput!]
  delete: [ParticipantWhereUniqueInput!]
  connect: [ParticipantWhereUniqueInput!]
  update: [ParticipantUpdateWithWhereUniqueWithoutRelationInput!]
  updateMany: [ParticipantUpdateManyWithWhereWithoutRelationInput!]
  deleteMany: [ParticipantScalarWhereInput!]
}

input ParticipantUpsertWithWhereUniqueWithoutRelationInput {
  where: ParticipantWhereUniqueInput!
  update: ParticipantUpdateWithoutRelationInput!
  create: ParticipantCreateWithoutRelationInput!
}

input ParticipantUpdateWithoutRelationInput {
  gender: EnumGenderFieldUpdateOperationsInput
  birthDate: DateTimeFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  status: EnumParticipantStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutParticipantNestedInput
  bankAccount: BankAccountUpdateOneWithoutParticipantNestedInput
  claims: ClaimUpdateManyWithoutParticipantNestedInput
  employments: EmploymentUpdateManyWithoutParticipantNestedInput
  contactInfos: ContactInfoUpdateManyWithoutParticipantNestedInput
  programParticipations: ProgramParticipationUpdateManyWithoutParticipantNestedInput
  balances: AccountUpdateManyWithoutParticipantNestedInput
  Participant: ParticipantUpdateManyWithoutRelationNestedInput
}

input ProgramParticipationUpdateManyWithoutParticipantNestedInput {
  create: [ProgramParticipationCreateWithoutParticipantInput!]
  connectOrCreate: [ProgramParticipationCreateOrConnectWithoutParticipantInput!]
  upsert: [ProgramParticipationUpsertWithWhereUniqueWithoutParticipantInput!]
  createMany: ProgramParticipationCreateManyParticipantInputEnvelope
  set: [ProgramParticipationWhereUniqueInput!]
  disconnect: [ProgramParticipationWhereUniqueInput!]
  delete: [ProgramParticipationWhereUniqueInput!]
  connect: [ProgramParticipationWhereUniqueInput!]
  update: [ProgramParticipationUpdateWithWhereUniqueWithoutParticipantInput!]
  updateMany: [ProgramParticipationUpdateManyWithWhereWithoutParticipantInput!]
  deleteMany: [ProgramParticipationScalarWhereInput!]
}

input ProgramParticipationUpsertWithWhereUniqueWithoutParticipantInput {
  where: ProgramParticipationWhereUniqueInput!
  update: ProgramParticipationUpdateWithoutParticipantInput!
  create: ProgramParticipationCreateWithoutParticipantInput!
}

input ProgramParticipationUpdateWithoutParticipantInput {
  bpjsNumber: NullableStringFieldUpdateOperationsInput
  nonActiveReason: NullableStringFieldUpdateOperationsInput
  effectiveDate: DateTimeFieldUpdateOperationsInput
  nonActiveDate: NullableDateTimeFieldUpdateOperationsInput
  funding: AccountUpdateOneRequiredWithoutProgramParticipationNestedInput
  Program: ProgramUpdateOneWithoutProgramParticipationsNestedInput
}

input AccountUpdateOneRequiredWithoutProgramParticipationNestedInput {
  create: AccountCreateWithoutProgramParticipationInput
  connectOrCreate: AccountCreateOrConnectWithoutProgramParticipationInput
  upsert: AccountUpsertWithoutProgramParticipationInput
  connect: AccountWhereUniqueInput
  update: AccountUpdateToOneWithWhereWithoutProgramParticipationInput
}

input AccountUpsertWithoutProgramParticipationInput {
  update: AccountUpdateWithoutProgramParticipationInput!
  create: AccountCreateWithoutProgramParticipationInput!
  where: AccountWhereInput
}

input AccountUpdateWithoutProgramParticipationInput {
  currentBalance: FloatFieldUpdateOperationsInput
  currentBalanceLastUpdate: NullableDateTimeFieldUpdateOperationsInput
  participant: ParticipantUpdateOneRequiredWithoutBalancesNestedInput
  transactions: TransactionUpdateManyWithoutAccountNestedInput
}

input ParticipantUpdateOneRequiredWithoutBalancesNestedInput {
  create: ParticipantCreateWithoutBalancesInput
  connectOrCreate: ParticipantCreateOrConnectWithoutBalancesInput
  upsert: ParticipantUpsertWithoutBalancesInput
  connect: ParticipantWhereUniqueInput
  update: ParticipantUpdateToOneWithWhereWithoutBalancesInput
}

input ParticipantUpsertWithoutBalancesInput {
  update: ParticipantUpdateWithoutBalancesInput!
  create: ParticipantCreateWithoutBalancesInput!
  where: ParticipantWhereInput
}

input ParticipantUpdateWithoutBalancesInput {
  gender: EnumGenderFieldUpdateOperationsInput
  birthDate: DateTimeFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  status: EnumParticipantStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutParticipantNestedInput
  relation: ParticipantUpdateOneWithoutParticipantNestedInput
  bankAccount: BankAccountUpdateOneWithoutParticipantNestedInput
  claims: ClaimUpdateManyWithoutParticipantNestedInput
  employments: EmploymentUpdateManyWithoutParticipantNestedInput
  contactInfos: ContactInfoUpdateManyWithoutParticipantNestedInput
  programParticipations: ProgramParticipationUpdateManyWithoutParticipantNestedInput
  Participant: ParticipantUpdateManyWithoutRelationNestedInput
}

input ParticipantUpdateToOneWithWhereWithoutBalancesInput {
  where: ParticipantWhereInput
  data: ParticipantUpdateWithoutBalancesInput!
}

input AccountUpdateToOneWithWhereWithoutProgramParticipationInput {
  where: AccountWhereInput
  data: AccountUpdateWithoutProgramParticipationInput!
}

input ProgramParticipationUpdateWithWhereUniqueWithoutParticipantInput {
  where: ProgramParticipationWhereUniqueInput!
  data: ProgramParticipationUpdateWithoutParticipantInput!
}

input ProgramParticipationUpdateManyWithWhereWithoutParticipantInput {
  where: ProgramParticipationScalarWhereInput!
  data: ProgramParticipationUpdateManyMutationInput!
}

input ParticipantUpdateWithWhereUniqueWithoutRelationInput {
  where: ParticipantWhereUniqueInput!
  data: ParticipantUpdateWithoutRelationInput!
}

input ParticipantUpdateManyWithWhereWithoutRelationInput {
  where: ParticipantScalarWhereInput!
  data: ParticipantUpdateManyMutationInput!
}

input ParticipantScalarWhereInput {
  AND: [ParticipantScalarWhereInput!]
  OR: [ParticipantScalarWhereInput!]
  NOT: [ParticipantScalarWhereInput!]
  gender: EnumGenderFilter
  birthDate: DateTimeFilter
  isActive: BoolFilter
  status: EnumParticipantStatusFilter
  userId: StringFilter
  relationId: StringNullableFilter
}

input ParticipantUpdateManyMutationInput {
  gender: EnumGenderFieldUpdateOperationsInput
  birthDate: DateTimeFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  status: EnumParticipantStatusFieldUpdateOperationsInput
}

input ParticipantUpdateToOneWithWhereWithoutProgramParticipationsInput {
  where: ParticipantWhereInput
  data: ParticipantUpdateWithoutProgramParticipationsInput!
}

input ProgramParticipationUpdateWithWhereUniqueWithoutProgramInput {
  where: ProgramParticipationWhereUniqueInput!
  data: ProgramParticipationUpdateWithoutProgramInput!
}

input ProgramParticipationUpdateManyWithWhereWithoutProgramInput {
  where: ProgramParticipationScalarWhereInput!
  data: ProgramParticipationUpdateManyMutationInput!
}

input ProgramUpdateToOneWithWhereWithoutClaimsInput {
  where: ProgramWhereInput
  data: ProgramUpdateWithoutClaimsInput!
}

input ClaimUpdateToOneWithWhereWithoutClaimProcessesInput {
  where: ClaimWhereInput
  data: ClaimUpdateWithoutClaimProcessesInput!
}

input ClaimProcessUpdateToOneWithWhereWithoutDocumentsInput {
  where: ClaimProcessWhereInput
  data: ClaimProcessUpdateWithoutDocumentsInput!
}

input DocumentUpdateToOneWithWhereWithoutBookKeepingOrderOfInput {
  where: DocumentWhereInput
  data: DocumentUpdateWithoutBookKeepingOrderOfInput!
}

input ClaimFinancialUpdateOneWithoutClaimStatusNestedInput {
  create: ClaimFinancialCreateWithoutClaimStatusInput
  connectOrCreate: ClaimFinancialCreateOrConnectWithoutClaimStatusInput
  upsert: ClaimFinancialUpsertWithoutClaimStatusInput
  disconnect: ClaimFinancialWhereInput
  delete: ClaimFinancialWhereInput
  connect: ClaimFinancialWhereUniqueInput
  update: ClaimFinancialUpdateToOneWithWhereWithoutClaimStatusInput
}

input ClaimFinancialUpsertWithoutClaimStatusInput {
  update: ClaimFinancialUpdateWithoutClaimStatusInput!
  create: ClaimFinancialCreateWithoutClaimStatusInput!
  where: ClaimFinancialWhereInput
}

input ClaimFinancialUpdateWithoutClaimStatusInput {
  requestedAmount: FloatFieldUpdateOperationsInput
  paidAmount: NullableFloatFieldUpdateOperationsInput
  rejectedAmount: NullableFloatFieldUpdateOperationsInput
  transactionProcessDate: NullableDateTimeFieldUpdateOperationsInput
  transferDate: NullableDateTimeFieldUpdateOperationsInput
  branchPayee: BranchUpdateOneWithoutClaimFinancialNestedInput
  claim: ClaimUpdateOneWithoutClaimFinancialsNestedInput
}

input ClaimFinancialUpdateToOneWithWhereWithoutClaimStatusInput {
  where: ClaimFinancialWhereInput
  data: ClaimFinancialUpdateWithoutClaimStatusInput!
}

input ClaimStatusUpdateToOneWithWhereWithoutTransactionLetterInput {
  where: ClaimStatusWhereInput
  data: ClaimStatusUpdateWithoutTransactionLetterInput!
}

input DocumentUpdateToOneWithWhereWithoutGuaranteeLetterOfInput {
  where: DocumentWhereInput
  data: DocumentUpdateWithoutGuaranteeLetterOfInput!
}

input ClaimStatusUpdateToOneWithWhereWithoutBookKeepingOrderInput {
  where: ClaimStatusWhereInput
  data: ClaimStatusUpdateWithoutBookKeepingOrderInput!
}

input DocumentUpdateToOneWithWhereWithoutTransactionLetterOfInput {
  where: DocumentWhereInput
  data: DocumentUpdateWithoutTransactionLetterOfInput!
}

input ClaimStatusUpdateToOneWithWhereWithoutGuaranteeLetterInput {
  where: ClaimStatusWhereInput
  data: ClaimStatusUpdateWithoutGuaranteeLetterInput!
}

input DocumentUpdateToOneWithWhereWithoutRejectionLetterOfInput {
  where: DocumentWhereInput
  data: DocumentUpdateWithoutRejectionLetterOfInput!
}

input ClaimStatusUpdateWithWhereUniqueWithoutCreateByInput {
  where: ClaimStatusWhereUniqueInput!
  data: ClaimStatusUpdateWithoutCreateByInput!
}

input ClaimStatusUpdateManyWithWhereWithoutCreateByInput {
  where: ClaimStatusScalarWhereInput!
  data: ClaimStatusUpdateManyMutationInput!
}

input ClaimStatusScalarWhereInput {
  AND: [ClaimStatusScalarWhereInput!]
  OR: [ClaimStatusScalarWhereInput!]
  NOT: [ClaimStatusScalarWhereInput!]
  id: IntFilter
  description: StringNullableFilter
  rejectionReason: StringNullableFilter
  createdAt: DateTimeFilter
  status: EnumClaimStatusTypeFilter
  createById: StringFilter
  claimId: StringFilter
  rejectionLetterId: StringNullableFilter
  guaranteeLetterId: StringNullableFilter
  transactionLetterId: StringNullableFilter
  bookKeepingOrderId: StringNullableFilter
}

input ClaimStatusUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  rejectionReason: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  status: EnumClaimStatusTypeFieldUpdateOperationsInput
}

input ClaimUpdateManyWithoutWaitingForNestedInput {
  create: [ClaimCreateWithoutWaitingForInput!]
  connectOrCreate: [ClaimCreateOrConnectWithoutWaitingForInput!]
  upsert: [ClaimUpsertWithWhereUniqueWithoutWaitingForInput!]
  createMany: ClaimCreateManyWaitingForInputEnvelope
  set: [ClaimWhereUniqueInput!]
  disconnect: [ClaimWhereUniqueInput!]
  delete: [ClaimWhereUniqueInput!]
  connect: [ClaimWhereUniqueInput!]
  update: [ClaimUpdateWithWhereUniqueWithoutWaitingForInput!]
  updateMany: [ClaimUpdateManyWithWhereWithoutWaitingForInput!]
  deleteMany: [ClaimScalarWhereInput!]
}

input ClaimUpsertWithWhereUniqueWithoutWaitingForInput {
  where: ClaimWhereUniqueInput!
  update: ClaimUpdateWithoutWaitingForInput!
  create: ClaimCreateWithoutWaitingForInput!
}

input ClaimUpdateWithoutWaitingForInput {
  channel: EnumClaimChannelFieldUpdateOperationsInput
  admedicaStatus: EnumAdmedicaStatusFieldUpdateOperationsInput
  company: StringFieldUpdateOperationsInput
  participant: ParticipantUpdateOneRequiredWithoutClaimsNestedInput
  claimFinancials: ClaimFinancialUpdateOneRequiredWithoutClaimNestedInput
  claimProcesses: ClaimProcessUpdateOneRequiredWithoutClaimNestedInput
  disease: DiseaseUpdateOneWithoutClaimsNestedInput
  clinics: ClinicUpdateOneRequiredWithoutClaimsNestedInput
  inputedBy: UserUpdateOneWithoutClaimsInputNestedInput
  program: ProgramUpdateOneRequiredWithoutClaimsNestedInput
  tags: TagUpdateManyWithoutClaimsNestedInput
}

input ClaimUpdateWithWhereUniqueWithoutWaitingForInput {
  where: ClaimWhereUniqueInput!
  data: ClaimUpdateWithoutWaitingForInput!
}

input ClaimUpdateManyWithWhereWithoutWaitingForInput {
  where: ClaimScalarWhereInput!
  data: ClaimUpdateManyMutationInput!
}

input UserUpdateToOneWithWhereWithoutClaimsInputInput {
  where: UserWhereInput
  data: UserUpdateWithoutClaimsInputInput!
}

input ClaimUpdateWithWhereUniqueWithoutParticipantInput {
  where: ClaimWhereUniqueInput!
  data: ClaimUpdateWithoutParticipantInput!
}

input ClaimUpdateManyWithWhereWithoutParticipantInput {
  where: ClaimScalarWhereInput!
  data: ClaimUpdateManyMutationInput!
}

input ParticipantUpdateToOneWithWhereWithoutEmploymentsInput {
  where: ParticipantWhereInput
  data: ParticipantUpdateWithoutEmploymentsInput!
}

input GroupUpdateOneWithoutEmploymentNestedInput {
  create: GroupCreateWithoutEmploymentInput
  connectOrCreate: GroupCreateOrConnectWithoutEmploymentInput
  upsert: GroupUpsertWithoutEmploymentInput
  disconnect: GroupWhereInput
  delete: GroupWhereInput
  connect: GroupWhereUniqueInput
  update: GroupUpdateToOneWithWhereWithoutEmploymentInput
}

input GroupUpsertWithoutEmploymentInput {
  update: GroupUpdateWithoutEmploymentInput!
  create: GroupCreateWithoutEmploymentInput!
  where: GroupWhereInput
}

input GroupUpdateWithoutEmploymentInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateToOneWithWhereWithoutEmploymentInput {
  where: GroupWhereInput
  data: GroupUpdateWithoutEmploymentInput!
}

input RegionUpdateOneWithoutEmploymentNestedInput {
  create: RegionCreateWithoutEmploymentInput
  connectOrCreate: RegionCreateOrConnectWithoutEmploymentInput
  upsert: RegionUpsertWithoutEmploymentInput
  disconnect: RegionWhereInput
  delete: RegionWhereInput
  connect: RegionWhereUniqueInput
  update: RegionUpdateToOneWithWhereWithoutEmploymentInput
}

input RegionUpsertWithoutEmploymentInput {
  update: RegionUpdateWithoutEmploymentInput!
  create: RegionCreateWithoutEmploymentInput!
  where: RegionWhereInput
}

input RegionUpdateWithoutEmploymentInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RegionUpdateToOneWithWhereWithoutEmploymentInput {
  where: RegionWhereInput
  data: RegionUpdateWithoutEmploymentInput!
}

input EmploymentUpdateWithWhereUniqueWithoutBranchInput {
  where: EmploymentWhereUniqueInput!
  data: EmploymentUpdateWithoutBranchInput!
}

input EmploymentUpdateManyWithWhereWithoutBranchInput {
  where: EmploymentScalarWhereInput!
  data: EmploymentUpdateManyMutationInput!
}

input EmploymentScalarWhereInput {
  AND: [EmploymentScalarWhereInput!]
  OR: [EmploymentScalarWhereInput!]
  NOT: [EmploymentScalarWhereInput!]
  id: IntFilter
  employmentPosition: EnumPositionFilter
  participantId: StringFilter
  branchId: IntFilter
  groupId: IntNullableFilter
  regionId: IntNullableFilter
}

input EmploymentUpdateManyMutationInput {
  employmentPosition: EnumPositionFieldUpdateOperationsInput
}

input BranchUpdateToOneWithWhereWithoutClaimFinancialInput {
  where: BranchWhereInput
  data: BranchUpdateWithoutClaimFinancialInput!
}

input ClaimStatusUpdateOneWithoutClaimFinancialNestedInput {
  create: ClaimStatusCreateWithoutClaimFinancialInput
  connectOrCreate: ClaimStatusCreateOrConnectWithoutClaimFinancialInput
  upsert: ClaimStatusUpsertWithoutClaimFinancialInput
  disconnect: ClaimStatusWhereInput
  delete: ClaimStatusWhereInput
  connect: ClaimStatusWhereUniqueInput
  update: ClaimStatusUpdateToOneWithWhereWithoutClaimFinancialInput
}

input ClaimStatusUpsertWithoutClaimFinancialInput {
  update: ClaimStatusUpdateWithoutClaimFinancialInput!
  create: ClaimStatusCreateWithoutClaimFinancialInput!
  where: ClaimStatusWhereInput
}

input ClaimStatusUpdateWithoutClaimFinancialInput {
  description: NullableStringFieldUpdateOperationsInput
  rejectionReason: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  status: EnumClaimStatusTypeFieldUpdateOperationsInput
  createBy: UserUpdateOneRequiredWithoutClaimActionsNestedInput
  claim: ClaimUpdateOneRequiredWithoutClaimStatusesNestedInput
  rejectionLetter: DocumentUpdateOneWithoutRejectionLetterOfNestedInput
  guaranteeLetter: DocumentUpdateOneWithoutGuaranteeLetterOfNestedInput
  transactionLetter: DocumentUpdateOneWithoutTransactionLetterOfNestedInput
  bookKeepingOrder: DocumentUpdateOneWithoutBookKeepingOrderOfNestedInput
}

input ClaimStatusUpdateToOneWithWhereWithoutClaimFinancialInput {
  where: ClaimStatusWhereInput
  data: ClaimStatusUpdateWithoutClaimFinancialInput!
}

input ClaimFinancialUpdateToOneWithWhereWithoutClaimInput {
  where: ClaimFinancialWhereInput
  data: ClaimFinancialUpdateWithoutClaimInput!
}

input ClaimUpdateToOneWithWhereWithoutClaimStatusesInput {
  where: ClaimWhereInput
  data: ClaimUpdateWithoutClaimStatusesInput!
}

input ClaimStatusUpdateToOneWithWhereWithoutRejectionLetterInput {
  where: ClaimStatusWhereInput
  data: ClaimStatusUpdateWithoutRejectionLetterInput!
}

input DocumentUpdateWithWhereUniqueWithoutClaimProcessInput {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateWithoutClaimProcessInput!
}

input DocumentUpdateManyWithWhereWithoutClaimProcessInput {
  where: DocumentScalarWhereInput!
  data: DocumentUpdateManyMutationInput!
}

input DocumentScalarWhereInput {
  AND: [DocumentScalarWhereInput!]
  OR: [DocumentScalarWhereInput!]
  NOT: [DocumentScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  path: StringFilter
  size: IntFilter
  printCount: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  source: EnumDocumentSourceFilter
  type: EnumDocumentTypeFilter
  claimProcessId: IntNullableFilter
}

input DocumentUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
  size: IntFieldUpdateOperationsInput
  printCount: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  source: EnumDocumentSourceFieldUpdateOperationsInput
  type: EnumDocumentTypeFieldUpdateOperationsInput
}

input ClaimProcessUpdateToOneWithWhereWithoutClaimInput {
  where: ClaimProcessWhereInput
  data: ClaimProcessUpdateWithoutClaimInput!
}

input ClaimUpdateToOneWithWhereWithoutClaimFinancialsInput {
  where: ClaimWhereInput
  data: ClaimUpdateWithoutClaimFinancialsInput!
}

input ClaimFinancialUpdateWithWhereUniqueWithoutBranchPayeeInput {
  where: ClaimFinancialWhereUniqueInput!
  data: ClaimFinancialUpdateWithoutBranchPayeeInput!
}

input ClaimFinancialUpdateManyWithWhereWithoutBranchPayeeInput {
  where: ClaimFinancialScalarWhereInput!
  data: ClaimFinancialUpdateManyMutationInput!
}

input ClaimFinancialScalarWhereInput {
  AND: [ClaimFinancialScalarWhereInput!]
  OR: [ClaimFinancialScalarWhereInput!]
  NOT: [ClaimFinancialScalarWhereInput!]
  id: IntFilter
  requestedAmount: FloatFilter
  paidAmount: FloatNullableFilter
  rejectedAmount: FloatNullableFilter
  transactionProcessDate: DateTimeNullableFilter
  transferDate: DateTimeNullableFilter
  branchId: IntNullableFilter
  claimStatusId: IntNullableFilter
}

input ClaimFinancialUpdateManyMutationInput {
  requestedAmount: FloatFieldUpdateOperationsInput
  paidAmount: NullableFloatFieldUpdateOperationsInput
  rejectedAmount: NullableFloatFieldUpdateOperationsInput
  transactionProcessDate: NullableDateTimeFieldUpdateOperationsInput
  transferDate: NullableDateTimeFieldUpdateOperationsInput
}

input BranchUpdateToOneWithWhereWithoutEmploymentInput {
  where: BranchWhereInput
  data: BranchUpdateWithoutEmploymentInput!
}

input EmploymentUpdateWithWhereUniqueWithoutParticipantInput {
  where: EmploymentWhereUniqueInput!
  data: EmploymentUpdateWithoutParticipantInput!
}

input EmploymentUpdateManyWithWhereWithoutParticipantInput {
  where: EmploymentScalarWhereInput!
  data: EmploymentUpdateManyMutationInput!
}

input ParticipantUpdateToOneWithWhereWithoutClaimsInput {
  where: ParticipantWhereInput
  data: ParticipantUpdateWithoutClaimsInput!
}

input ClaimUpdateWithWhereUniqueWithoutInputedByInput {
  where: ClaimWhereUniqueInput!
  data: ClaimUpdateWithoutInputedByInput!
}

input ClaimUpdateManyWithWhereWithoutInputedByInput {
  where: ClaimScalarWhereInput!
  data: ClaimUpdateManyMutationInput!
}

input UserUpdateToOneWithWhereWithoutParticipantInput {
  where: UserWhereInput
  data: UserUpdateWithoutParticipantInput!
}

input ParticipantUpdateToOneWithWhereWithoutParticipantInput {
  where: ParticipantWhereInput
  data: ParticipantUpdateWithoutParticipantInput!
}

input ParticipantUpdateToOneWithWhereWithoutUserInput {
  where: ParticipantWhereInput
  data: ParticipantUpdateWithoutUserInput!
}

input UserUpdateWithWhereUniqueWithoutRoleInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRoleInput!
}

input UserUpdateManyWithWhereWithoutRoleInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  id: StringFilter
  fullName: StringFilter
  email: StringFilter
  emailVerifiedAt: DateTimeNullableFilter
  password: StringFilter
  profilePictureUrl: StringNullableFilter
  deletedAt: DateTimeNullableFilter
  roleId: IntFilter
  participantId: IntNullableFilter
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerifiedAt: NullableDateTimeFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  profilePictureUrl: NullableStringFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  participantId: NullableIntFieldUpdateOperationsInput
}

input RoleUpdateToOneWithWhereWithoutLowerLevelThanInput {
  where: RoleWhereInput
  data: RoleUpdateWithoutLowerLevelThanInput!
}

input RoleUpdateManyWithoutHigherLevelThanNestedInput {
  create: [RoleCreateWithoutHigherLevelThanInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutHigherLevelThanInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutHigherLevelThanInput!]
  createMany: RoleCreateManyHigherLevelThanInputEnvelope
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  connect: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutHigherLevelThanInput!]
  updateMany: [RoleUpdateManyWithWhereWithoutHigherLevelThanInput!]
  deleteMany: [RoleScalarWhereInput!]
}

input RoleUpsertWithWhereUniqueWithoutHigherLevelThanInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutHigherLevelThanInput!
  create: RoleCreateWithoutHigherLevelThanInput!
}

input RoleUpdateWithoutHigherLevelThanInput {
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  roleType: NullableEnumRoleTypeFieldUpdateOperationsInput
  rolePermissions: RolePermissionUpdateManyWithoutRoleNestedInput
  users: UserUpdateManyWithoutRoleNestedInput
  lowerLevelThan: RoleUpdateManyWithoutHigherLevelThanNestedInput
}

input RoleUpdateWithWhereUniqueWithoutHigherLevelThanInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutHigherLevelThanInput!
}

input RoleUpdateManyWithWhereWithoutHigherLevelThanInput {
  where: RoleScalarWhereInput!
  data: RoleUpdateManyMutationInput!
}

input RoleScalarWhereInput {
  AND: [RoleScalarWhereInput!]
  OR: [RoleScalarWhereInput!]
  NOT: [RoleScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringNullableFilter
  higherLevelThanId: IntNullableFilter
  roleType: EnumRoleTypeNullableFilter
}

input RoleUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  roleType: NullableEnumRoleTypeFieldUpdateOperationsInput
}

input RoleUpdateToOneWithWhereWithoutUsersInput {
  where: RoleWhereInput
  data: RoleUpdateWithoutUsersInput!
}

input UserUpdateToOneWithWhereWithoutClaimActionsInput {
  where: UserWhereInput
  data: UserUpdateWithoutClaimActionsInput!
}

input RoleCreateInput {
  name: String!
  description: String
  roleType: RoleType
  higherLevelThan: RoleCreateNestedOneWithoutLowerLevelThanInput
  rolePermissions: RolePermissionCreateNestedManyWithoutRoleInput
  users: UserCreateNestedManyWithoutRoleInput
  lowerLevelThan: RoleCreateNestedManyWithoutHigherLevelThanInput
}

input RoleUpdateInput {
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  roleType: NullableEnumRoleTypeFieldUpdateOperationsInput
  higherLevelThan: RoleUpdateOneWithoutLowerLevelThanNestedInput
  rolePermissions: RolePermissionUpdateManyWithoutRoleNestedInput
  users: UserUpdateManyWithoutRoleNestedInput
  lowerLevelThan: RoleUpdateManyWithoutHigherLevelThanNestedInput
}

input NotificationUpdateInput {
  isRead: BoolFieldUpdateOperationsInput
  isCleared: BoolFieldUpdateOperationsInput
}