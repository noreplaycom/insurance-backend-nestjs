# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccountAvgAggregate {
  id: Float
  currentBalance: Float
}

type AccountCountAggregate {
  id: Int!
  currentBalance: Int!
  currentBalanceLastUpdate: Int!
  participantId: Int!
  _all: Int!
}

type AccountCount {
  transactions: Int!
  programParticipation: Int!
}

type AccountMaxAggregate {
  id: Int
  currentBalance: Float
  currentBalanceLastUpdate: DateTime
  participantId: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AccountMinAggregate {
  id: Int
  currentBalance: Float
  currentBalanceLastUpdate: DateTime
  participantId: String
}

type AccountSumAggregate {
  id: Int
  currentBalance: Float
}

type Account {
  id: Int!

  """Sisa Plafon:	Sisa Plafon Santunan Harian Rawat Inap"""
  currentBalance: Float!
  currentBalanceLastUpdate: DateTime
  participantId: String!
  participant: Participant!
  transactions: [Transaction!]
  programParticipation: [ProgramParticipation!]
  _count: AccountCount!
}

type AddressAvgAggregate {
  id: Float
  cityId: Float
}

type AddressCountAggregate {
  id: Int!
  address: Int!
  cityId: Int!
  postalCode: Int!
  _all: Int!
}

type AddressCount {
  ContactInfo: Int!
}

type AddressMaxAggregate {
  id: Int
  address: String
  cityId: Int
  postalCode: String
}

type AddressMinAggregate {
  id: Int
  address: String
  cityId: Int
  postalCode: String
}

type AddressSumAggregate {
  id: Int
  cityId: Int
}

type Address {
  id: Int!

  """Alamat"""
  address: String!

  """Kota"""
  cityId: Int!

  """Kode Pos"""
  postalCode: String!

  """Kota"""
  city: City!
  ContactInfo: [ContactInfo!]
  _count: AddressCount!
}

type AnnouncementAvgAggregate {
  id: Float
}

type AnnouncementCountAggregate {
  id: Int!
  title: Int!
  content: Int!
  imageUrl: Int!
  createdAt: Int!
  updatedAt: Int!
  createdById: Int!
  _all: Int!
}

type AnnouncementMaxAggregate {
  id: Int
  title: String
  content: String
  imageUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  createdById: String
}

type AnnouncementMinAggregate {
  id: Int
  title: String
  content: String
  imageUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  createdById: String
}

type AnnouncementSumAggregate {
  id: Int
}

type Announcement {
  id: Int!
  title: String!
  content: String!
  imageUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
  createdById: String!
  createdBy: User!
}

type BankAccountAvgAggregate {
  id: Float
  accountNumber: Float
}

type BankAccountCountAggregate {
  id: Int!
  accountNumber: Int!
  accountName: Int!
  participantId: Int!
  _all: Int!
}

type BankAccountMaxAggregate {
  id: Int
  accountNumber: Float
  accountName: String
  participantId: String
}

type BankAccountMinAggregate {
  id: Int
  accountNumber: Float
  accountName: String
  participantId: String
}

type BankAccountSumAggregate {
  id: Int
  accountNumber: Float
}

type BankAccount {
  id: Int!

  """No. Rekening	Nomer Rekening Penerimaan Manfaat Pensiun"""
  accountNumber: Float!

  """Rekening a/n.	Nama pada rekening bank"""
  accountName: String!
  participantId: String!
  participant: Participant!
}

type BranchAvgAggregate {
  id: Float
}

type BranchCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type BranchCount {
  employment: Int!
  claimFinancial: Int!
}

type BranchMaxAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type BranchMinAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type BranchSumAggregate {
  id: Int
}

type Branch {
  id: Int!

  """Nama Cabang"""
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  employment: [Employment!]
  claimFinancial: [ClaimFinancial!]
  _count: BranchCount!
}

type CityAvgAggregate {
  id: Float
}

type CityCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type CityCount {
  address: Int!
}

type CityMaxAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CityMinAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CitySumAggregate {
  id: Int
}

type City {
  id: Int!

  """Nama Kota"""
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: [Address!]
  _count: CityCount!
}

type ClaimAvgAggregate {
  companyId: Float
  claimFinancialId: Float
  claimProcessId: Float
  diseaseId: Float
  clinicId: Float
  claimTypeId: Float
}

type ClaimCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  channel: Int!
  admedicaStatus: Int!
  companyId: Int!
  participantId: Int!
  claimFinancialId: Int!
  claimProcessId: Int!
  diseaseId: Int!
  clinicId: Int!
  inputedById: Int!
  claimTypeId: Int!
  _all: Int!
}

type ClaimCount {
  tags: Int!
  claimStatuses: Int!
}

type ClaimMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  channel: ClaimChannel
  admedicaStatus: AdmedicaStatus
  companyId: Int
  participantId: String
  claimFinancialId: Int
  claimProcessId: Int
  diseaseId: Int
  clinicId: Int
  inputedById: String
  claimTypeId: Int
}

enum ClaimChannel {
  REGULER
  WA
  EMAIL
}

enum AdmedicaStatus {
  NON_ADMEDICA
  ADMEDICA
}

type ClaimMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  channel: ClaimChannel
  admedicaStatus: AdmedicaStatus
  companyId: Int
  participantId: String
  claimFinancialId: Int
  claimProcessId: Int
  diseaseId: Int
  clinicId: Int
  inputedById: String
  claimTypeId: Int
}

type ClaimSumAggregate {
  companyId: Int
  claimFinancialId: Int
  claimProcessId: Int
  diseaseId: Int
  clinicId: Int
  claimTypeId: Int
}

type Claim {
  """
  Nok:	Nomer Register Klaim
  Nomor Sm	nomer register Surat masuk (Klaim melalui WA/Reguler/Exception/Email)
  """
  id: String!

  """Tklaim:	Tanggal Klaim"""
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  """Metode Klaim:	WA,E-mail,Reguler, Telepon"""
  channel: ClaimChannel!

  """Stat. Admedika:	Status Admedika"""
  admedicaStatus: AdmedicaStatus!

  """Prsh:	Perusahaan"""
  companyId: Int!
  participantId: String!
  claimFinancialId: Int!
  claimProcessId: Int!
  diseaseId: Int
  clinicId: Int!
  inputedById: String
  claimTypeId: Int!

  """Prsh:	Perusahaan"""
  company: Company!
  participant: Participant!
  claimFinancials: ClaimFinancial!
  claimProcesses: ClaimProcess!
  disease: Disease
  clinics: Clinic!
  inputedBy: User
  claimTypes: ClaimType!
  tags: [Tag!]
  claimStatuses: [ClaimStatus!]
  _count: ClaimCount!
}

type ClaimFinancialAvgAggregate {
  id: Float
  requestedAmount: Float
  paidAmount: Float
  rejectedAmount: Float
  branchId: Float
  claimStatusId: Float
}

type ClaimFinancialCountAggregate {
  id: Int!
  requestedAmount: Int!
  paidAmount: Int!
  rejectedAmount: Int!
  transactionProcessDate: Int!
  transferDate: Int!
  claimId: Int!
  branchId: Int!
  claimStatusId: Int!
  _all: Int!
}

type ClaimFinancialMaxAggregate {
  id: Int
  requestedAmount: Float
  paidAmount: Float
  rejectedAmount: Float
  transactionProcessDate: DateTime
  transferDate: DateTime
  claimId: String
  branchId: Int
  claimStatusId: Int
}

type ClaimFinancialMinAggregate {
  id: Int
  requestedAmount: Float
  paidAmount: Float
  rejectedAmount: Float
  transactionProcessDate: DateTime
  transferDate: DateTime
  claimId: String
  branchId: Int
  claimStatusId: Int
}

type ClaimFinancialSumAggregate {
  id: Int
  requestedAmount: Float
  paidAmount: Float
  rejectedAmount: Float
  branchId: Int
  claimStatusId: Int
}

type ClaimFinancial {
  id: Int!

  """Aju:	Jumlah nominal klaim diajukan"""
  requestedAmount: Float!

  """Bayar:	Jumlah nominal klaim dibayar"""
  paidAmount: Float

  """Tolak:	Jumlah Nominal Klaim ditolak"""
  rejectedAmount: Float

  """TProses Transaksi:	Tanggal Proses Transaksi"""
  transactionProcessDate: DateTime

  """Transfer:	Tanggal Transfer"""
  transferDate: DateTime
  claimId: String!

  """Cabang: Cabang Pembayar Pensiun"""
  branchId: Int!
  claimStatusId: Int!

  """Cabang: Cabang Pembayar Pensiun"""
  branchPayee: Branch!
  claim: Claim
  claimStatus: ClaimStatus!
}

type ClaimProcessAvgAggregate {
  id: Float
}

type ClaimProcessCountAggregate {
  id: Int!
  startTreatment: Int!
  endTreatment: Int!
  expeditionDate: Int!
  reclaim: Int!
  processDate: Int!
  submissionNote: Int!
  description: Int!
  additionalNote: Int!
  claimId: Int!
  _all: Int!
}

type ClaimProcessCount {
  documents: Int!
}

type ClaimProcessMaxAggregate {
  id: Int
  startTreatment: DateTime
  endTreatment: DateTime
  expeditionDate: DateTime
  reclaim: String
  processDate: DateTime
  submissionNote: String
  description: String
  additionalNote: String
  claimId: String
}

type ClaimProcessMinAggregate {
  id: Int
  startTreatment: DateTime
  endTreatment: DateTime
  expeditionDate: DateTime
  reclaim: String
  processDate: DateTime
  submissionNote: String
  description: String
  additionalNote: String
  claimId: String
}

type ClaimProcessSumAggregate {
  id: Int
}

type ClaimProcess {
  id: Int!

  """Tmulairawat	Tanggal mulai Rawat"""
  startTreatment: DateTime

  """Takhirrawat	Tanggal akhir rawat"""
  endTreatment: DateTime

  """Tekspedisi	Tanggal ekspedisi"""
  expeditionDate: DateTime

  """Reklaim:	Keterangan untuk klaim ulang"""
  reclaim: String

  """TProses Pengajuan:	Tanggal Proses pengajuan"""
  processDate: DateTime

  """Ket.Pengajuan:	Keterangan konfirmasi"""
  submissionNote: String!

  """Keterangan:	isi keterangan """
  description: String!

  """Ket.Tambahan	keterangan tambahan"""
  additionalNote: String!
  claimId: String!
  claim: Claim

  """Kwitansi, data, dll: Bukti Pembayaran/Invoice Rumah Sakit oleh Peserta"""
  documents: [Document!]
  _count: ClaimProcessCount!
}

type ClaimStatusAvgAggregate {
  id: Float
}

type ClaimStatusCountAggregate {
  id: Int!
  description: Int!
  rejectionReason: Int!
  createdAt: Int!
  status: Int!
  createById: Int!
  claimId: Int!
  rejectionLetterId: Int!
  guaranteeLetterId: Int!
  transactionLetterId: Int!
  bookKeepingOrderId: Int!
  _all: Int!
}

type ClaimStatusMaxAggregate {
  id: Int
  description: String
  rejectionReason: String
  createdAt: DateTime
  status: ClaimStatusType
  createById: String
  claimId: String
  rejectionLetterId: String
  guaranteeLetterId: String
  transactionLetterId: String
  bookKeepingOrderId: String
}

enum ClaimStatusType {
  DOCUMENT
  PENDING
  APPROVED
  REJECTED
  RELEASE
  PAID
  COMPLETED
  CANCELLED
  REOPEN
}

type ClaimStatusMinAggregate {
  id: Int
  description: String
  rejectionReason: String
  createdAt: DateTime
  status: ClaimStatusType
  createById: String
  claimId: String
  rejectionLetterId: String
  guaranteeLetterId: String
  transactionLetterId: String
  bookKeepingOrderId: String
}

type ClaimStatusSumAggregate {
  id: Int
}

type ClaimStatus {
  id: Int!
  description: String
  rejectionReason: String
  createdAt: DateTime!
  status: ClaimStatusType!
  createById: String!
  claimId: String!

  """
  Nomor surat tolak
  Tanggal surat tolak
  """
  rejectionLetterId: String

  """No SurJam:	Nomer Surat jaminan"""
  guaranteeLetterId: String
  transactionLetterId: String
  bookKeepingOrderId: String
  createBy: User!
  claim: Claim!

  """
  Nomor surat tolak
  Tanggal surat tolak
  """
  rejectionLetter: Document

  """No SurJam:	Nomer Surat jaminan"""
  guaranteeLetter: Document
  transactionLetter: Document
  bookKeepingOrder: Document
  claimFinancial: ClaimFinancial
}

type ClaimTypeAvgAggregate {
  id: Float
  programId: Float
  claimId: Float
}

type ClaimTypeCountAggregate {
  id: Int!
  jenis: Int!
  jenisRI: Int!
  plan: Int!
  programId: Int!
  claimId: Int!
  _all: Int!
}

type ClaimTypeMaxAggregate {
  id: Int
  jenis: String
  jenisRI: String
  plan: String
  programId: Int
  claimId: Int
}

type ClaimTypeMinAggregate {
  id: Int
  jenis: String
  jenisRI: String
  plan: String
  programId: Int
  claimId: Int
}

type ClaimTypeSumAggregate {
  id: Int
  programId: Int
  claimId: Int
}

type ClaimType {
  id: Int!

  """Jenis:	Jenis Produk Bantuan"""
  jenis: String!

  """Jenis RI:	Hospital Cash Plan"""
  jenisRI: String!

  """Plan	Plan = jenis Rawat inap atau disingkat RI"""
  plan: String!
  programId: Int!
  claimId: Int!
  program: Program!
  claims: Claim
}

type ClinicAvgAggregate {
  id: Float
}

type ClinicCountAggregate {
  id: Int!
  code: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ClinicCount {
  claims: Int!
}

type ClinicMaxAggregate {
  id: Int
  code: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ClinicMinAggregate {
  id: Int
  code: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ClinicSumAggregate {
  id: Int
}

type Clinic {
  id: Int!
  code: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  claims: [Claim!]
  _count: ClinicCount!
}

type CompanyAvgAggregate {
  id: Float
}

type CompanyCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type CompanyCount {
  claims: Int!
}

type CompanyMaxAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CompanyMinAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CompanySumAggregate {
  id: Int
}

type Company {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  claims: [Claim!]
  _count: CompanyCount!
}

type ContactInfoAvgAggregate {
  id: Float
  addressId: Float
}

type ContactInfoCountAggregate {
  id: Int!
  telp: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  participantId: Int!
  addressId: Int!
  _all: Int!
}

type ContactInfoMaxAggregate {
  id: Int
  telp: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  participantId: String
  addressId: Int
}

type ContactInfoMinAggregate {
  id: Int
  telp: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  participantId: String
  addressId: Int
}

type ContactInfoSumAggregate {
  id: Int
  addressId: Int
}

type ContactInfo {
  id: Int!
  telp: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  participantId: String!
  addressId: Int!
  participant: Participant!
  address: Address!
}

type DiseaseAvgAggregate {
  id: Float
}

type DiseaseCountAggregate {
  id: Int!
  code: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type DiseaseCount {
  claims: Int!
}

type DiseaseMaxAggregate {
  id: Int
  code: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type DiseaseMinAggregate {
  id: Int
  code: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type DiseaseSumAggregate {
  id: Int
}

type Disease {
  id: Int!

  """KodePenyakit: kode jenis penyakit"""
  code: String!

  """NamaPenyakit: nama penyakit"""
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  claims: [Claim!]
  _count: DiseaseCount!
}

type DocumentAvgAggregate {
  size: Float
  printCount: Float
  claimProcessId: Float
}

type DocumentCountAggregate {
  id: Int!
  name: Int!
  path: Int!
  size: Int!
  printCount: Int!
  createdAt: Int!
  updatedAt: Int!
  source: Int!
  type: Int!
  claimProcessId: Int!
  _all: Int!
}

type DocumentMaxAggregate {
  id: String
  name: String
  path: String
  size: Int
  printCount: Int
  createdAt: DateTime
  updatedAt: DateTime
  source: DocumentSource
  type: DocumentType
  claimProcessId: Int
}

enum DocumentSource {
  UPLOADED
  GENERATED
}

enum DocumentType {
  INVOICE
  CLAIM_FORM
  REJECTION_LETTER
  GUARANTEE_LETTER
  RECAP
  EXPEDITION
  TRANSFER
}

type DocumentMinAggregate {
  id: String
  name: String
  path: String
  size: Int
  printCount: Int
  createdAt: DateTime
  updatedAt: DateTime
  source: DocumentSource
  type: DocumentType
  claimProcessId: Int
}

type DocumentSumAggregate {
  size: Int
  printCount: Int
  claimProcessId: Int
}

type Document {
  """Nodok:	Nomer Dokumen"""
  id: String!

  """Nama Dokumen"""
  name: String!

  """Path:	Path file dokumen"""
  path: String!

  """Ukuran:	Ukuran dokumen"""
  size: Int!

  """Jumlah Cetak:	Jumlah cetak dokumen"""
  printCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  source: DocumentSource!
  type: DocumentType!
  claimProcessId: Int
  rejectionLetterOf: ClaimStatus
  guaranteeLetterOf: ClaimStatus

  """Surat transaksi"""
  transactionLetterOf: ClaimStatus

  """Perintah Pembukuan"""
  bookKeepingOrderOf: ClaimStatus
  claimProcess: ClaimProcess
}

type EmploymentAvgAggregate {
  id: Float
  branchId: Float
  groupId: Float
  regionId: Float
}

type EmploymentCountAggregate {
  id: Int!
  employmentPosition: Int!
  participantId: Int!
  branchId: Int!
  groupId: Int!
  regionId: Int!
  _all: Int!
}

type EmploymentMaxAggregate {
  id: Int
  employmentPosition: Position
  participantId: String
  branchId: Int
  groupId: Int
  regionId: Int
}

enum Position {
  AMGR
  AVP
  PGD
  MGR
  SASST
  VP
  SAVP
  SMGR
  SAMGR
  ASST
}

type EmploymentMinAggregate {
  id: Int
  employmentPosition: Position
  participantId: String
  branchId: Int
  groupId: Int
  regionId: Int
}

type EmploymentSumAggregate {
  id: Int
  branchId: Int
  groupId: Int
  regionId: Int
}

type Employment {
  id: Int!

  """Jenjang Jabatan terakhir"""
  employmentPosition: Position!
  participantId: String!
  branchId: Int!
  groupId: Int!
  regionId: Int!
  participant: Participant!
  branch: Branch!
  group: Group
  region: Region
}

type GroupAvgAggregate {
  id: Float
}

type GroupCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type GroupCount {
  employment: Int!
}

type GroupMaxAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type GroupMinAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type GroupSumAggregate {
  id: Int
}

type Group {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  employment: [Employment!]
  _count: GroupCount!
}

type NotificationAvgAggregate {
  id: Float
}

type NotificationCountAggregate {
  id: Int!
  title: Int!
  subtitle: Int!
  content: Int!
  createdAt: Int!
  isRead: Int!
  isCleared: Int!
  deepLink: Int!
  fcmToken: Int!
  userId: Int!
  _all: Int!
}

type NotificationMaxAggregate {
  id: Int
  title: String
  subtitle: String
  content: String
  createdAt: DateTime
  isRead: Boolean
  isCleared: Boolean
  deepLink: String
  fcmToken: String
  userId: String
}

type NotificationMinAggregate {
  id: Int
  title: String
  subtitle: String
  content: String
  createdAt: DateTime
  isRead: Boolean
  isCleared: Boolean
  deepLink: String
  fcmToken: String
  userId: String
}

type NotificationSumAggregate {
  id: Int
}

type Notification {
  id: Int!
  title: String!
  subtitle: String!
  content: String!
  createdAt: DateTime!
  isRead: Boolean!
  isCleared: Boolean!
  deepLink: String
  fcmToken: String
  userId: String!
  user: User!
}

type ParticipantAvgAggregate {
  bankAccountId: Float
}

type ParticipantCountAggregate {
  gender: Int!
  birthDate: Int!
  isActive: Int!
  status: Int!
  userId: Int!
  relationId: Int!
  bankAccountId: Int!
  _all: Int!
}

type ParticipantCount {
  claims: Int!
  employments: Int!
  contactInfos: Int!
  programParticipations: Int!
  balances: Int!
  Participant: Int!
}

type ParticipantMaxAggregate {
  gender: Gender
  birthDate: DateTime
  isActive: Boolean
  status: ParticipantStatus
  userId: String
  relationId: String
  bankAccountId: Int
}

enum Gender {
  UNKNOWN
  MALE
  FEMALE
}

enum ParticipantStatus {
  PENSIUNAN
  PASANGAN
  YATIM
  JANDADUDA6BULAN
}

type ParticipantMinAggregate {
  gender: Gender
  birthDate: DateTime
  isActive: Boolean
  status: ParticipantStatus
  userId: String
  relationId: String
  bankAccountId: Int
}

type ParticipantSumAggregate {
  bankAccountId: Int
}

type Participant {
  """Jenis Kelamin"""
  gender: Gender!

  """Tanggal Lahir"""
  birthDate: DateTime!

  """Aktif/Non Aktif:	Status Kepesertaan Aktif/non aktif"""
  isActive: Boolean!

  """Pensiunan,Pasangan, Yatim, Janda/duda 6 bulan"""
  status: ParticipantStatus!
  userId: String!
  relationId: String
  bankAccountId: Int!
  user: User!

  """Anggota keluarga dari"""
  relation: Participant
  bankAccount: BankAccount
  claims: [Claim!]
  employments: [Employment!]
  contactInfos: [ContactInfo!]
  programParticipations: [ProgramParticipation!]
  balances: [Account!]

  """Anggota keluarga dari"""
  Participant: [Participant!]
  _count: ParticipantCount!
}

type ProgramAvgAggregate {
  id: Float
  allowanceCeiling: Float
  maxAllowance: Float
}

type ProgramCountAggregate {
  id: Int!
  plan: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  allowanceCeiling: Int!
  class: Int!
  maxAllowance: Int!
  _all: Int!
}

type ProgramCount {
  programParticipations: Int!
  claimType: Int!
}

type ProgramMaxAggregate {
  id: Int
  plan: ApplicationType
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  allowanceCeiling: Float
  class: Class
  maxAllowance: Float
}

enum ApplicationType {
  SANTUNAN_HARIAN_RAWAT_INAP
  BANTUAN_BIAYA_CUCI_DARAH
  BANTUAN_KURSI_RODA
  BANTUAN_WALKER
  BANTUAN_IGD_UGD
  BANTUAN_RAWAT_INAP
}

"""
KELAS: Kelas sesuai Jenjab I=Rp.1.250.000 II=Rp.1.000.000  III= Rp.750.000 
"""
enum Class {
  I
  II
  III
}

type ProgramMinAggregate {
  id: Int
  plan: ApplicationType
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  allowanceCeiling: Float
  class: Class
  maxAllowance: Float
}

type ProgramSumAggregate {
  id: Int
  allowanceCeiling: Float
  maxAllowance: Float
}

type Program {
  id: Int!

  """
  Nama Program
  Plan	PlanType = jenis Rawat inap atau disingkat RI
  """
  plan: ApplicationType!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  """Plafon Santunan:	Plafon Santnan Harian Rawat Inap"""
  allowanceCeiling: Float!

  """
  KELAS: Kelas sesuai Jenjab I=Rp.1.250.000 II=Rp.1.000.000  III= Rp.750.000 
  """
  class: Class!

  """Maksimal biaya perawatan """
  maxAllowance: Float!
  programParticipations: [ProgramParticipation!]
  claimType: [ClaimType!]
  _count: ProgramCount!
}

type ProgramParticipationAvgAggregate {
  id: Float
  fundingId: Float
  programId: Float
}

type ProgramParticipationCountAggregate {
  id: Int!
  bpjsNumber: Int!
  nonActiveReason: Int!
  effectiveDate: Int!
  nonActiveDate: Int!
  participantId: Int!
  fundingId: Int!
  programId: Int!
  _all: Int!
}

type ProgramParticipationMaxAggregate {
  id: Int
  bpjsNumber: String
  nonActiveReason: String
  effectiveDate: DateTime
  nonActiveDate: DateTime
  participantId: String
  fundingId: Int
  programId: Int
}

type ProgramParticipationMinAggregate {
  id: Int
  bpjsNumber: String
  nonActiveReason: String
  effectiveDate: DateTime
  nonActiveDate: DateTime
  participantId: String
  fundingId: Int
  programId: Int
}

type ProgramParticipationSumAggregate {
  id: Int
  fundingId: Int
  programId: Int
}

type ProgramParticipation {
  """Nopol:	Nomer Polish"""
  id: Int!

  """No.BPJS/ASKES: Nomer kartu BPJS"""
  bpjsNumber: String

  """Keterangan Non Aktif:	keterangan perihal penonaktifan"""
  nonActiveReason: String

  """Tgl. Efektif: Tanggal mulai ikut program Fasilitas Kesehatan"""
  effectiveDate: DateTime!

  """Tgl Non Aktif:	tanggal penonaktifan peserta"""
  nonActiveDate: DateTime
  participantId: String!

  """Nomor Dana"""
  fundingId: Int!
  programId: Int
  participant: Participant!

  """Dana"""
  funding: Account!
  Program: Program
}

type RegionAvgAggregate {
  id: Float
}

type RegionCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type RegionCount {
  employment: Int!
}

type RegionMaxAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type RegionMinAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type RegionSumAggregate {
  id: Int
}

type Region {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  employment: [Employment!]
  _count: RegionCount!
}

type RoleAvgAggregate {
  id: Float
  order: Float
  higherLevelThanId: Float
}

type RoleCountAggregate {
  id: Int!
  name: Int!
  description: Int!
  order: Int!
  higherLevelThanId: Int!
  _all: Int!
}

type RoleCount {
  rolePermissions: Int!
  users: Int!
  lowerLevelThan: Int!
}

type RoleMaxAggregate {
  id: Int
  name: String
  description: String
  order: Int
  higherLevelThanId: Int
}

type RoleMinAggregate {
  id: Int
  name: String
  description: String
  order: Int
  higherLevelThanId: Int
}

type RoleSumAggregate {
  id: Int
  order: Int
  higherLevelThanId: Int
}

type Role {
  id: Int!

  """E.g., 'superuser', 'analyst', 'group leader'"""
  name: String!
  description: String
  order: Int!
  higherLevelThanId: Int
  higherLevelThan: Role
  rolePermissions: [RolePermission!]
  users: [User!]
  lowerLevelThan: [Role!]
  _count: RoleCount!
}

type RolePermissionAvgAggregate {
  roleId: Float
}

type RolePermissionCountAggregate {
  roleId: Int!
  permission: Int!
  _all: Int!
}

type RolePermissionMaxAggregate {
  roleId: Int
  permission: Permission
}

enum Permission {
  CREATE_CLAIM
  UPDATE_CLAIM
  UPDATE_CLAIM_STATUS
  UPDATE_STATUS_FINANCIAL
  RELEASE_CLAIM
  DELETE_CLAIM_DOCUMENT
  CREATE_CLAIM_DOCUMENT
  IMPORT_CLAIM
  EXPORT_CLAIM
  CREATE_PARTICIPANT
  UPDATE_PARTICIPANT
  IMPORT_PARTICIPANT
  EXPORT_PARTICIPANT
}

type RolePermissionMinAggregate {
  roleId: Int
  permission: Permission
}

type RolePermissionSumAggregate {
  roleId: Int
}

type RolePermission {
  roleId: Int!
  permission: Permission!
  role: Role!
}

type TagAvgAggregate {
  id: Float
}

type TagCountAggregate {
  id: Int!
  name: Int!
  color: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type TagCount {
  Claims: Int!
}

type TagMaxAggregate {
  id: Int
  name: String
  color: Color
  createdAt: DateTime
  updatedAt: DateTime
}

enum Color {
  WHITE
  BLUE
  RED
  YELLOW
  GREEN
}

type TagMinAggregate {
  id: Int
  name: String
  color: Color
  createdAt: DateTime
  updatedAt: DateTime
}

type TagSumAggregate {
  id: Int
}

type Tag {
  id: Int!
  name: String!
  color: Color!
  createdAt: DateTime!
  updatedAt: DateTime!
  Claims: [Claim!]
  _count: TagCount!
}

type TransactionAvgAggregate {
  id: Float
  amount: Float
  accountId: Float
}

type TransactionCountAggregate {
  id: Int!
  amount: Int!
  transactionType: Int!
  description: Int!
  createdAt: Int!
  accountId: Int!
  _all: Int!
}

type TransactionMaxAggregate {
  id: Int
  amount: Float
  transactionType: TransactionType
  description: String
  createdAt: DateTime
  accountId: Int
}

enum TransactionType {
  CREDIT
  DEBIT
}

type TransactionMinAggregate {
  id: Int
  amount: Float
  transactionType: TransactionType
  description: String
  createdAt: DateTime
  accountId: Int
}

type TransactionSumAggregate {
  id: Int
  amount: Float
  accountId: Int
}

type Transaction {
  id: Int!
  amount: Float!
  transactionType: TransactionType!
  description: String
  createdAt: DateTime!
  accountId: Int!
  account: Account!
}

type UserAvgAggregate {
  roleId: Float
  participantId: Float
}

type UserCountAggregate {
  id: Int!
  fullName: Int!
  email: Int!
  emailVerifiedAt: Int!
  password: Int!
  profilePictureUrl: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  roleId: Int!
  participantId: Int!
  _all: Int!
}

type UserCount {
  claimsInput: Int!
  claimActions: Int!
  announcementCreated: Int!
  notification: Int!
}

type UserMaxAggregate {
  id: String
  fullName: String
  email: String
  emailVerifiedAt: DateTime
  password: String
  profilePictureUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  roleId: Int
  participantId: Int
}

type UserMinAggregate {
  id: String
  fullName: String
  email: String
  emailVerifiedAt: DateTime
  password: String
  profilePictureUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  roleId: Int
  participantId: Int
}

type UserSumAggregate {
  roleId: Int
  participantId: Int
}

type User {
  id: String!

  """Nama Lengkap"""
  fullName: String!
  email: String!
  emailVerifiedAt: DateTime
  password: String!
  profilePictureUrl: String

  """Tgl.Masuk Peserta"""
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  roleId: Int!
  participantId: Int
  role: Role!
  participant: Participant
  claimsInput: [Claim!]
  claimActions: [ClaimStatus!]
  announcementCreated: [Announcement!]
  notification: [Notification!]
  _count: UserCount!
}

type ClaimCountQuantityByCustomRangeAndPeriodQuery {
  period: String
  quantityClaims: Int
}

type ClaimCountQuantityByStatusQuery {
  status: ClaimStatusType!
  total: Int!
}

type ClaimCountTotalByCustomRangeAndPeriodQuery {
  period: String
  totalClaims: Float
}

type ClaimCountTotalPercentageVsCustomPeriodQuery {
  versus: String!
  percentage: Float!
  amount: Float!
}

type Query {
  """Deskripsinya ada disini loh"""
  claimCountQuantityByCustomRangeAndPeriod(claimCountQuantityByCustomRangeAndPeriodArgs: ClaimCountQuantityByCustomRangeAndPeriodArgs!): [ClaimCountQuantityByCustomRangeAndPeriodQuery!]

  """Deskripsinya ada disini loh"""
  claimCountTotalPercentageVsCustomPeriod(claimCountTotalPercentageVsCustomPeriodArgs: ClaimCountTotalPercentageVsCustomPeriodArgs!): ClaimCountTotalPercentageVsCustomPeriodQuery

  """Deskripsinya ada disini loh"""
  claimCountTotalByCustomRangeAndPeriod(claimCountTotalByCustomRangeAndPeriodArgs: ClaimCountTotalByCustomRangeAndPeriodArgs!): [ClaimCountTotalByCustomRangeAndPeriodQuery!]

  """Deskripsinya ada disini loh"""
  claimCountQuantityByStatus: [ClaimCountQuantityByStatusQuery!]

  """Deskripsinya ada disini loh"""
  claimFindMany(where: ClaimWhereInput, orderBy: [ClaimOrderByWithRelationInput!], cursor: ClaimWhereUniqueInput, take: Int, skip: Int, distinct: [ClaimScalarFieldEnum!]): [Claim!]

  """Deskripsinya ada disini loh"""
  claimChannelFindMany: [String!]

  """
  Header wajib ada apollo-require-preflight = true agar tidak CSRF error. File JPG akan dicompress
  """
  claimExport: String!

  """Deskripsinya ada disini loh"""
  claimFindOne(claimFindOneByIdArgs: ClaimFindOneByIdArgs!): Claim

  """Deskripsinya ada disini loh"""
  claimCount(claimCountQuantityWhereArgs: ClaimCountQuantityWhereArgs!): Int

  """Deskripsinya ada disini loh"""
  claimStatusTypeFindMany: [String!]

  """Deskripsinya ada disini loh"""
  claimStatusFindMany(claimStatusFindManyByClaimIdArgs: ClaimStatusFindManyByClaimIdArgs!): [ClaimStatus!]

  """Deskripsinya ada disini loh"""
  participantFindMany: [Participant!]

  """Deskripsinya ada disini loh"""
  applicationTypeFindMany: [String!]

  """Deskripsinya ada disini loh"""
  roleFindOne(roleFindOneByUserArgs: RoleFindOneByUserArgs!): Role

  """Deskripsinya ada disini loh"""
  permissionFindOne(permissionFindOneByUserIdArgs: PermissionFindOneByUserIdArgs!): RolePermission

  """
  Header wajib ada apollo-require-preflight = true agar tidak CSRF error. File JPG akan dicompress
  """
  participantExport: String!

  """Deskripsinya ada disini loh"""
  tagFindMany: [Tag!]

  """Deskripsinya ada disini loh"""
  userFindMany: [User!]

  """Deskripsinya ada disini loh"""
  userFindOne(userFindOneByIdArgs: UserFindOneByIdArgs!): User

  """
  Header wajib ada apollo-require-preflight = true agar tidak CSRF error. File JPG akan dicompress
  """
  userExport: String!

  """Deskripsinya ada disini loh"""
  notificationFindMany: [Notification!]
}

input ClaimCountQuantityByCustomRangeAndPeriodArgs {
  start: DateTime!
  end: DateTime!
  period: Period!
}

"""Period options for data retrieval"""
enum Period {
  WEEKLY
  MONTHLY
  YEARLY
  ALLTIME
}

input ClaimCountTotalPercentageVsCustomPeriodArgs {
  period: Period!
}

input ClaimCountTotalByCustomRangeAndPeriodArgs {
  start: DateTime!
  end: DateTime!
  period: Period!
}

input ClaimWhereInput {
  AND: [ClaimWhereInput!]
  OR: [ClaimWhereInput!]
  NOT: [ClaimWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  channel: EnumClaimChannelFilter
  admedicaStatus: EnumAdmedicaStatusFilter
  companyId: IntFilter
  participantId: StringFilter
  claimFinancialId: IntFilter
  claimProcessId: IntFilter
  diseaseId: IntNullableFilter
  clinicId: IntFilter
  inputedById: StringNullableFilter
  claimTypeId: IntFilter
  company: CompanyRelationFilter
  participant: ParticipantRelationFilter
  claimFinancials: ClaimFinancialRelationFilter
  claimProcesses: ClaimProcessRelationFilter
  disease: DiseaseNullableRelationFilter
  clinics: ClinicRelationFilter
  inputedBy: UserNullableRelationFilter
  claimTypes: ClaimTypeRelationFilter
  tags: TagListRelationFilter
  claimStatuses: ClaimStatusListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input EnumClaimChannelFilter {
  equals: ClaimChannel
  in: [ClaimChannel!]
  notIn: [ClaimChannel!]
  not: NestedEnumClaimChannelFilter
}

input NestedEnumClaimChannelFilter {
  equals: ClaimChannel
  in: [ClaimChannel!]
  notIn: [ClaimChannel!]
  not: NestedEnumClaimChannelFilter
}

input EnumAdmedicaStatusFilter {
  equals: AdmedicaStatus
  in: [AdmedicaStatus!]
  notIn: [AdmedicaStatus!]
  not: NestedEnumAdmedicaStatusFilter
}

input NestedEnumAdmedicaStatusFilter {
  equals: AdmedicaStatus
  in: [AdmedicaStatus!]
  notIn: [AdmedicaStatus!]
  not: NestedEnumAdmedicaStatusFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input CompanyRelationFilter {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  claims: ClaimListRelationFilter
}

input ClaimListRelationFilter {
  every: ClaimWhereInput
  some: ClaimWhereInput
  none: ClaimWhereInput
}

input ParticipantRelationFilter {
  is: ParticipantWhereInput
  isNot: ParticipantWhereInput
}

input ParticipantWhereInput {
  AND: [ParticipantWhereInput!]
  OR: [ParticipantWhereInput!]
  NOT: [ParticipantWhereInput!]
  gender: EnumGenderFilter
  birthDate: DateTimeFilter
  isActive: BoolFilter
  status: EnumParticipantStatusFilter
  userId: StringFilter
  relationId: StringNullableFilter
  bankAccountId: IntFilter
  user: UserRelationFilter
  relation: ParticipantNullableRelationFilter
  bankAccount: BankAccountNullableRelationFilter
  claims: ClaimListRelationFilter
  employments: EmploymentListRelationFilter
  contactInfos: ContactInfoListRelationFilter
  programParticipations: ProgramParticipationListRelationFilter
  balances: AccountListRelationFilter
  Participant: ParticipantListRelationFilter
}

input EnumGenderFilter {
  equals: Gender
  in: [Gender!]
  notIn: [Gender!]
  not: NestedEnumGenderFilter
}

input NestedEnumGenderFilter {
  equals: Gender
  in: [Gender!]
  notIn: [Gender!]
  not: NestedEnumGenderFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input EnumParticipantStatusFilter {
  equals: ParticipantStatus
  in: [ParticipantStatus!]
  notIn: [ParticipantStatus!]
  not: NestedEnumParticipantStatusFilter
}

input NestedEnumParticipantStatusFilter {
  equals: ParticipantStatus
  in: [ParticipantStatus!]
  notIn: [ParticipantStatus!]
  not: NestedEnumParticipantStatusFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  fullName: StringFilter
  email: StringFilter
  emailVerifiedAt: DateTimeNullableFilter
  password: StringFilter
  profilePictureUrl: StringNullableFilter
  deletedAt: DateTimeNullableFilter
  roleId: IntFilter
  participantId: IntNullableFilter
  role: RoleRelationFilter
  participant: ParticipantNullableRelationFilter
  claimsInput: ClaimListRelationFilter
  claimActions: ClaimStatusListRelationFilter
  announcementCreated: AnnouncementListRelationFilter
  notification: NotificationListRelationFilter
}

input RoleRelationFilter {
  is: RoleWhereInput
  isNot: RoleWhereInput
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringNullableFilter
  order: IntFilter
  higherLevelThanId: IntNullableFilter
  higherLevelThan: RoleNullableRelationFilter
  rolePermissions: RolePermissionListRelationFilter
  users: UserListRelationFilter
  lowerLevelThan: RoleListRelationFilter
}

input RoleNullableRelationFilter {
  is: RoleWhereInput
  isNot: RoleWhereInput
}

input RolePermissionListRelationFilter {
  every: RolePermissionWhereInput
  some: RolePermissionWhereInput
  none: RolePermissionWhereInput
}

input RolePermissionWhereInput {
  AND: [RolePermissionWhereInput!]
  OR: [RolePermissionWhereInput!]
  NOT: [RolePermissionWhereInput!]
  roleId: IntFilter
  permission: EnumPermissionFilter
  role: RoleRelationFilter
}

input EnumPermissionFilter {
  equals: Permission
  in: [Permission!]
  notIn: [Permission!]
  not: NestedEnumPermissionFilter
}

input NestedEnumPermissionFilter {
  equals: Permission
  in: [Permission!]
  notIn: [Permission!]
  not: NestedEnumPermissionFilter
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleListRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input ParticipantNullableRelationFilter {
  is: ParticipantWhereInput
  isNot: ParticipantWhereInput
}

input ClaimStatusListRelationFilter {
  every: ClaimStatusWhereInput
  some: ClaimStatusWhereInput
  none: ClaimStatusWhereInput
}

input ClaimStatusWhereInput {
  AND: [ClaimStatusWhereInput!]
  OR: [ClaimStatusWhereInput!]
  NOT: [ClaimStatusWhereInput!]
  id: IntFilter
  description: StringNullableFilter
  rejectionReason: StringNullableFilter
  createdAt: DateTimeFilter
  status: EnumClaimStatusTypeFilter
  createById: StringFilter
  claimId: StringFilter
  rejectionLetterId: StringNullableFilter
  guaranteeLetterId: StringNullableFilter
  transactionLetterId: StringNullableFilter
  bookKeepingOrderId: StringNullableFilter
  createBy: UserRelationFilter
  claim: ClaimRelationFilter
  rejectionLetter: DocumentNullableRelationFilter
  guaranteeLetter: DocumentNullableRelationFilter
  transactionLetter: DocumentNullableRelationFilter
  bookKeepingOrder: DocumentNullableRelationFilter
  claimFinancial: ClaimFinancialNullableRelationFilter
}

input EnumClaimStatusTypeFilter {
  equals: ClaimStatusType
  in: [ClaimStatusType!]
  notIn: [ClaimStatusType!]
  not: NestedEnumClaimStatusTypeFilter
}

input NestedEnumClaimStatusTypeFilter {
  equals: ClaimStatusType
  in: [ClaimStatusType!]
  notIn: [ClaimStatusType!]
  not: NestedEnumClaimStatusTypeFilter
}

input ClaimRelationFilter {
  is: ClaimWhereInput
  isNot: ClaimWhereInput
}

input DocumentNullableRelationFilter {
  is: DocumentWhereInput
  isNot: DocumentWhereInput
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  id: StringFilter
  name: StringFilter
  path: StringFilter
  size: IntFilter
  printCount: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  source: EnumDocumentSourceFilter
  type: EnumDocumentTypeFilter
  claimProcessId: IntNullableFilter
  rejectionLetterOf: ClaimStatusNullableRelationFilter
  guaranteeLetterOf: ClaimStatusNullableRelationFilter
  transactionLetterOf: ClaimStatusNullableRelationFilter
  bookKeepingOrderOf: ClaimStatusNullableRelationFilter
  claimProcess: ClaimProcessNullableRelationFilter
}

input EnumDocumentSourceFilter {
  equals: DocumentSource
  in: [DocumentSource!]
  notIn: [DocumentSource!]
  not: NestedEnumDocumentSourceFilter
}

input NestedEnumDocumentSourceFilter {
  equals: DocumentSource
  in: [DocumentSource!]
  notIn: [DocumentSource!]
  not: NestedEnumDocumentSourceFilter
}

input EnumDocumentTypeFilter {
  equals: DocumentType
  in: [DocumentType!]
  notIn: [DocumentType!]
  not: NestedEnumDocumentTypeFilter
}

input NestedEnumDocumentTypeFilter {
  equals: DocumentType
  in: [DocumentType!]
  notIn: [DocumentType!]
  not: NestedEnumDocumentTypeFilter
}

input ClaimStatusNullableRelationFilter {
  is: ClaimStatusWhereInput
  isNot: ClaimStatusWhereInput
}

input ClaimProcessNullableRelationFilter {
  is: ClaimProcessWhereInput
  isNot: ClaimProcessWhereInput
}

input ClaimProcessWhereInput {
  AND: [ClaimProcessWhereInput!]
  OR: [ClaimProcessWhereInput!]
  NOT: [ClaimProcessWhereInput!]
  id: IntFilter
  startTreatment: DateTimeNullableFilter
  endTreatment: DateTimeNullableFilter
  expeditionDate: DateTimeNullableFilter
  reclaim: StringNullableFilter
  processDate: DateTimeNullableFilter
  submissionNote: StringFilter
  description: StringFilter
  additionalNote: StringFilter
  claimId: StringFilter
  claim: ClaimNullableRelationFilter
  documents: DocumentListRelationFilter
}

input ClaimNullableRelationFilter {
  is: ClaimWhereInput
  isNot: ClaimWhereInput
}

input DocumentListRelationFilter {
  every: DocumentWhereInput
  some: DocumentWhereInput
  none: DocumentWhereInput
}

input ClaimFinancialNullableRelationFilter {
  is: ClaimFinancialWhereInput
  isNot: ClaimFinancialWhereInput
}

input ClaimFinancialWhereInput {
  AND: [ClaimFinancialWhereInput!]
  OR: [ClaimFinancialWhereInput!]
  NOT: [ClaimFinancialWhereInput!]
  id: IntFilter
  requestedAmount: FloatFilter
  paidAmount: FloatNullableFilter
  rejectedAmount: FloatNullableFilter
  transactionProcessDate: DateTimeNullableFilter
  transferDate: DateTimeNullableFilter
  claimId: StringFilter
  branchId: IntFilter
  claimStatusId: IntFilter
  branchPayee: BranchRelationFilter
  claim: ClaimNullableRelationFilter
  claimStatus: ClaimStatusRelationFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input NestedFloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input BranchRelationFilter {
  is: BranchWhereInput
  isNot: BranchWhereInput
}

input BranchWhereInput {
  AND: [BranchWhereInput!]
  OR: [BranchWhereInput!]
  NOT: [BranchWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employment: EmploymentListRelationFilter
  claimFinancial: ClaimFinancialListRelationFilter
}

input EmploymentListRelationFilter {
  every: EmploymentWhereInput
  some: EmploymentWhereInput
  none: EmploymentWhereInput
}

input EmploymentWhereInput {
  AND: [EmploymentWhereInput!]
  OR: [EmploymentWhereInput!]
  NOT: [EmploymentWhereInput!]
  id: IntFilter
  employmentPosition: EnumPositionFilter
  participantId: StringFilter
  branchId: IntFilter
  groupId: IntFilter
  regionId: IntFilter
  participant: ParticipantRelationFilter
  branch: BranchRelationFilter
  group: GroupNullableRelationFilter
  region: RegionNullableRelationFilter
}

input EnumPositionFilter {
  equals: Position
  in: [Position!]
  notIn: [Position!]
  not: NestedEnumPositionFilter
}

input NestedEnumPositionFilter {
  equals: Position
  in: [Position!]
  notIn: [Position!]
  not: NestedEnumPositionFilter
}

input GroupNullableRelationFilter {
  is: GroupWhereInput
  isNot: GroupWhereInput
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employment: EmploymentListRelationFilter
}

input RegionNullableRelationFilter {
  is: RegionWhereInput
  isNot: RegionWhereInput
}

input RegionWhereInput {
  AND: [RegionWhereInput!]
  OR: [RegionWhereInput!]
  NOT: [RegionWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employment: EmploymentListRelationFilter
}

input ClaimFinancialListRelationFilter {
  every: ClaimFinancialWhereInput
  some: ClaimFinancialWhereInput
  none: ClaimFinancialWhereInput
}

input ClaimStatusRelationFilter {
  is: ClaimStatusWhereInput
  isNot: ClaimStatusWhereInput
}

input AnnouncementListRelationFilter {
  every: AnnouncementWhereInput
  some: AnnouncementWhereInput
  none: AnnouncementWhereInput
}

input AnnouncementWhereInput {
  AND: [AnnouncementWhereInput!]
  OR: [AnnouncementWhereInput!]
  NOT: [AnnouncementWhereInput!]
  id: IntFilter
  title: StringFilter
  content: StringFilter
  imageUrl: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  createdById: StringFilter
  createdBy: UserRelationFilter
}

input NotificationListRelationFilter {
  every: NotificationWhereInput
  some: NotificationWhereInput
  none: NotificationWhereInput
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  id: IntFilter
  title: StringFilter
  subtitle: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  isRead: BoolFilter
  isCleared: BoolFilter
  deepLink: StringNullableFilter
  fcmToken: StringNullableFilter
  userId: StringFilter
  user: UserRelationFilter
}

input BankAccountNullableRelationFilter {
  is: BankAccountWhereInput
  isNot: BankAccountWhereInput
}

input BankAccountWhereInput {
  AND: [BankAccountWhereInput!]
  OR: [BankAccountWhereInput!]
  NOT: [BankAccountWhereInput!]
  id: IntFilter
  accountNumber: FloatFilter
  accountName: StringFilter
  participantId: StringFilter
  participant: ParticipantRelationFilter
}

input ContactInfoListRelationFilter {
  every: ContactInfoWhereInput
  some: ContactInfoWhereInput
  none: ContactInfoWhereInput
}

input ContactInfoWhereInput {
  AND: [ContactInfoWhereInput!]
  OR: [ContactInfoWhereInput!]
  NOT: [ContactInfoWhereInput!]
  id: IntFilter
  telp: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  participantId: StringFilter
  addressId: IntFilter
  participant: ParticipantRelationFilter
  address: AddressRelationFilter
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IntFilter
  address: StringFilter
  cityId: IntFilter
  postalCode: StringFilter
  city: CityRelationFilter
  ContactInfo: ContactInfoListRelationFilter
}

input CityRelationFilter {
  is: CityWhereInput
  isNot: CityWhereInput
}

input CityWhereInput {
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  address: AddressListRelationFilter
}

input AddressListRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input ProgramParticipationListRelationFilter {
  every: ProgramParticipationWhereInput
  some: ProgramParticipationWhereInput
  none: ProgramParticipationWhereInput
}

input ProgramParticipationWhereInput {
  AND: [ProgramParticipationWhereInput!]
  OR: [ProgramParticipationWhereInput!]
  NOT: [ProgramParticipationWhereInput!]
  id: IntFilter
  bpjsNumber: StringNullableFilter
  nonActiveReason: StringNullableFilter
  effectiveDate: DateTimeFilter
  nonActiveDate: DateTimeNullableFilter
  participantId: StringFilter
  fundingId: IntFilter
  programId: IntNullableFilter
  participant: ParticipantRelationFilter
  funding: AccountRelationFilter
  Program: ProgramNullableRelationFilter
}

input AccountRelationFilter {
  is: AccountWhereInput
  isNot: AccountWhereInput
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: IntFilter
  currentBalance: FloatFilter
  currentBalanceLastUpdate: DateTimeNullableFilter
  participantId: StringFilter
  participant: ParticipantRelationFilter
  transactions: TransactionListRelationFilter
  programParticipation: ProgramParticipationListRelationFilter
}

input TransactionListRelationFilter {
  every: TransactionWhereInput
  some: TransactionWhereInput
  none: TransactionWhereInput
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  id: IntFilter
  amount: FloatFilter
  transactionType: EnumTransactionTypeFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  accountId: IntFilter
  account: AccountRelationFilter
}

input EnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  notIn: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
}

input NestedEnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  notIn: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
}

input ProgramNullableRelationFilter {
  is: ProgramWhereInput
  isNot: ProgramWhereInput
}

input ProgramWhereInput {
  AND: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  id: IntFilter
  plan: EnumApplicationTypeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  allowanceCeiling: FloatFilter
  class: EnumClassFilter
  maxAllowance: FloatFilter
  programParticipations: ProgramParticipationListRelationFilter
  claimType: ClaimTypeListRelationFilter
}

input EnumApplicationTypeFilter {
  equals: ApplicationType
  in: [ApplicationType!]
  notIn: [ApplicationType!]
  not: NestedEnumApplicationTypeFilter
}

input NestedEnumApplicationTypeFilter {
  equals: ApplicationType
  in: [ApplicationType!]
  notIn: [ApplicationType!]
  not: NestedEnumApplicationTypeFilter
}

input EnumClassFilter {
  equals: Class
  in: [Class!]
  notIn: [Class!]
  not: NestedEnumClassFilter
}

input NestedEnumClassFilter {
  equals: Class
  in: [Class!]
  notIn: [Class!]
  not: NestedEnumClassFilter
}

input ClaimTypeListRelationFilter {
  every: ClaimTypeWhereInput
  some: ClaimTypeWhereInput
  none: ClaimTypeWhereInput
}

input ClaimTypeWhereInput {
  AND: [ClaimTypeWhereInput!]
  OR: [ClaimTypeWhereInput!]
  NOT: [ClaimTypeWhereInput!]
  id: IntFilter
  jenis: StringFilter
  jenisRI: StringFilter
  plan: StringFilter
  programId: IntFilter
  claimId: IntFilter
  program: ProgramRelationFilter
  claims: ClaimNullableRelationFilter
}

input ProgramRelationFilter {
  is: ProgramWhereInput
  isNot: ProgramWhereInput
}

input AccountListRelationFilter {
  every: AccountWhereInput
  some: AccountWhereInput
  none: AccountWhereInput
}

input ParticipantListRelationFilter {
  every: ParticipantWhereInput
  some: ParticipantWhereInput
  none: ParticipantWhereInput
}

input ClaimFinancialRelationFilter {
  is: ClaimFinancialWhereInput
  isNot: ClaimFinancialWhereInput
}

input ClaimProcessRelationFilter {
  is: ClaimProcessWhereInput
  isNot: ClaimProcessWhereInput
}

input DiseaseNullableRelationFilter {
  is: DiseaseWhereInput
  isNot: DiseaseWhereInput
}

input DiseaseWhereInput {
  AND: [DiseaseWhereInput!]
  OR: [DiseaseWhereInput!]
  NOT: [DiseaseWhereInput!]
  id: IntFilter
  code: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  claims: ClaimListRelationFilter
}

input ClinicRelationFilter {
  is: ClinicWhereInput
  isNot: ClinicWhereInput
}

input ClinicWhereInput {
  AND: [ClinicWhereInput!]
  OR: [ClinicWhereInput!]
  NOT: [ClinicWhereInput!]
  id: IntFilter
  code: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  claims: ClaimListRelationFilter
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input ClaimTypeRelationFilter {
  is: ClaimTypeWhereInput
  isNot: ClaimTypeWhereInput
}

input TagListRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IntFilter
  name: StringFilter
  color: EnumColorFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Claims: ClaimListRelationFilter
}

input EnumColorFilter {
  equals: Color
  in: [Color!]
  notIn: [Color!]
  not: NestedEnumColorFilter
}

input NestedEnumColorFilter {
  equals: Color
  in: [Color!]
  notIn: [Color!]
  not: NestedEnumColorFilter
}

input ClaimOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  channel: SortOrder
  admedicaStatus: SortOrder
  companyId: SortOrder
  participantId: SortOrder
  claimFinancialId: SortOrder
  claimProcessId: SortOrder
  diseaseId: SortOrderInput
  clinicId: SortOrder
  inputedById: SortOrderInput
  claimTypeId: SortOrder
  company: CompanyOrderByWithRelationInput
  participant: ParticipantOrderByWithRelationInput
  claimFinancials: ClaimFinancialOrderByWithRelationInput
  claimProcesses: ClaimProcessOrderByWithRelationInput
  disease: DiseaseOrderByWithRelationInput
  clinics: ClinicOrderByWithRelationInput
  inputedBy: UserOrderByWithRelationInput
  claimTypes: ClaimTypeOrderByWithRelationInput
  tags: TagOrderByRelationAggregateInput
  claimStatuses: ClaimStatusOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  sort: SortOrder!
  nulls: NullsOrder
}

enum NullsOrder {
  first
  last
}

input CompanyOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  claims: ClaimOrderByRelationAggregateInput
}

input ClaimOrderByRelationAggregateInput {
  _count: SortOrder
}

input ParticipantOrderByWithRelationInput {
  gender: SortOrder
  birthDate: SortOrder
  isActive: SortOrder
  status: SortOrder
  userId: SortOrder
  relationId: SortOrderInput
  bankAccountId: SortOrder
  user: UserOrderByWithRelationInput
  relation: ParticipantOrderByWithRelationInput
  bankAccount: BankAccountOrderByWithRelationInput
  claims: ClaimOrderByRelationAggregateInput
  employments: EmploymentOrderByRelationAggregateInput
  contactInfos: ContactInfoOrderByRelationAggregateInput
  programParticipations: ProgramParticipationOrderByRelationAggregateInput
  balances: AccountOrderByRelationAggregateInput
  Participant: ParticipantOrderByRelationAggregateInput
}

input UserOrderByWithRelationInput {
  id: SortOrder
  fullName: SortOrder
  email: SortOrder
  emailVerifiedAt: SortOrderInput
  password: SortOrder
  profilePictureUrl: SortOrderInput
  deletedAt: SortOrderInput
  roleId: SortOrder
  participantId: SortOrderInput
  role: RoleOrderByWithRelationInput
  participant: ParticipantOrderByWithRelationInput
  claimsInput: ClaimOrderByRelationAggregateInput
  claimActions: ClaimStatusOrderByRelationAggregateInput
  announcementCreated: AnnouncementOrderByRelationAggregateInput
  notification: NotificationOrderByRelationAggregateInput
}

input RoleOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  description: SortOrderInput
  order: SortOrder
  higherLevelThanId: SortOrderInput
  higherLevelThan: RoleOrderByWithRelationInput
  rolePermissions: RolePermissionOrderByRelationAggregateInput
  users: UserOrderByRelationAggregateInput
  lowerLevelThan: RoleOrderByRelationAggregateInput
}

input RolePermissionOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input RoleOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClaimStatusOrderByRelationAggregateInput {
  _count: SortOrder
}

input AnnouncementOrderByRelationAggregateInput {
  _count: SortOrder
}

input NotificationOrderByRelationAggregateInput {
  _count: SortOrder
}

input BankAccountOrderByWithRelationInput {
  id: SortOrder
  accountNumber: SortOrder
  accountName: SortOrder
  participantId: SortOrder
  participant: ParticipantOrderByWithRelationInput
}

input EmploymentOrderByRelationAggregateInput {
  _count: SortOrder
}

input ContactInfoOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProgramParticipationOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input ParticipantOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClaimFinancialOrderByWithRelationInput {
  id: SortOrder
  requestedAmount: SortOrder
  paidAmount: SortOrderInput
  rejectedAmount: SortOrderInput
  transactionProcessDate: SortOrderInput
  transferDate: SortOrderInput
  claimId: SortOrder
  branchId: SortOrder
  claimStatusId: SortOrder
  branchPayee: BranchOrderByWithRelationInput
  claim: ClaimOrderByWithRelationInput
  claimStatus: ClaimStatusOrderByWithRelationInput
}

input BranchOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  employment: EmploymentOrderByRelationAggregateInput
  claimFinancial: ClaimFinancialOrderByRelationAggregateInput
}

input ClaimFinancialOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClaimStatusOrderByWithRelationInput {
  id: SortOrder
  description: SortOrderInput
  rejectionReason: SortOrderInput
  createdAt: SortOrder
  status: SortOrder
  createById: SortOrder
  claimId: SortOrder
  rejectionLetterId: SortOrderInput
  guaranteeLetterId: SortOrderInput
  transactionLetterId: SortOrderInput
  bookKeepingOrderId: SortOrderInput
  createBy: UserOrderByWithRelationInput
  claim: ClaimOrderByWithRelationInput
  rejectionLetter: DocumentOrderByWithRelationInput
  guaranteeLetter: DocumentOrderByWithRelationInput
  transactionLetter: DocumentOrderByWithRelationInput
  bookKeepingOrder: DocumentOrderByWithRelationInput
  claimFinancial: ClaimFinancialOrderByWithRelationInput
}

input DocumentOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  path: SortOrder
  size: SortOrder
  printCount: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  source: SortOrder
  type: SortOrder
  claimProcessId: SortOrderInput
  rejectionLetterOf: ClaimStatusOrderByWithRelationInput
  guaranteeLetterOf: ClaimStatusOrderByWithRelationInput
  transactionLetterOf: ClaimStatusOrderByWithRelationInput
  bookKeepingOrderOf: ClaimStatusOrderByWithRelationInput
  claimProcess: ClaimProcessOrderByWithRelationInput
}

input ClaimProcessOrderByWithRelationInput {
  id: SortOrder
  startTreatment: SortOrderInput
  endTreatment: SortOrderInput
  expeditionDate: SortOrderInput
  reclaim: SortOrderInput
  processDate: SortOrderInput
  submissionNote: SortOrder
  description: SortOrder
  additionalNote: SortOrder
  claimId: SortOrder
  claim: ClaimOrderByWithRelationInput
  documents: DocumentOrderByRelationAggregateInput
}

input DocumentOrderByRelationAggregateInput {
  _count: SortOrder
}

input DiseaseOrderByWithRelationInput {
  id: SortOrder
  code: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  claims: ClaimOrderByRelationAggregateInput
}

input ClinicOrderByWithRelationInput {
  id: SortOrder
  code: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  claims: ClaimOrderByRelationAggregateInput
}

input ClaimTypeOrderByWithRelationInput {
  id: SortOrder
  jenis: SortOrder
  jenisRI: SortOrder
  plan: SortOrder
  programId: SortOrder
  claimId: SortOrder
  program: ProgramOrderByWithRelationInput
  claims: ClaimOrderByWithRelationInput
}

input ProgramOrderByWithRelationInput {
  id: SortOrder
  plan: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  allowanceCeiling: SortOrder
  class: SortOrder
  maxAllowance: SortOrder
  programParticipations: ProgramParticipationOrderByRelationAggregateInput
  claimType: ClaimTypeOrderByRelationAggregateInput
}

input ClaimTypeOrderByRelationAggregateInput {
  _count: SortOrder
}

input TagOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClaimWhereUniqueInput {
  id: String
  claimFinancialId: Int
  claimProcessId: Int
  claimTypeId: Int
  AND: [ClaimWhereInput!]
  OR: [ClaimWhereInput!]
  NOT: [ClaimWhereInput!]
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  channel: EnumClaimChannelFilter
  admedicaStatus: EnumAdmedicaStatusFilter
  companyId: IntFilter
  participantId: StringFilter
  diseaseId: IntNullableFilter
  clinicId: IntFilter
  inputedById: StringNullableFilter
  company: CompanyRelationFilter
  participant: ParticipantRelationFilter
  claimFinancials: ClaimFinancialRelationFilter
  claimProcesses: ClaimProcessRelationFilter
  disease: DiseaseNullableRelationFilter
  clinics: ClinicRelationFilter
  inputedBy: UserNullableRelationFilter
  claimTypes: ClaimTypeRelationFilter
  tags: TagListRelationFilter
  claimStatuses: ClaimStatusListRelationFilter
}

enum ClaimScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  channel
  admedicaStatus
  companyId
  participantId
  claimFinancialId
  claimProcessId
  diseaseId
  clinicId
  inputedById
  claimTypeId
}

input ClaimFindOneByIdArgs {
  id: String!
}

input ClaimCountQuantityWhereArgs {
  where: ClaimWhereInput!
}

input ClaimStatusFindManyByClaimIdArgs {
  claimId: String!
}

input RoleFindOneByUserArgs {
  userId: String
}

input PermissionFindOneByUserIdArgs {
  userId: String!
}

input UserFindOneByIdArgs {
  id: String!
}

type Mutation {
  """
  Header wajib ada apollo-require-preflight = true agar tidak CSRF error. File JPG akan dicompress
  """
  claimImport(file: Upload): Boolean

  """Deskripsinya ada disini loh"""
  claimUpdateOne(claimUpdateOneOfStatusArgs: ClaimUpdateOneOfStatusArgs!): Claim

  """
  Header wajib ada apollo-require-preflight = true agar tidak CSRF error. File JPG akan dicompress
  """
  claimFileUpload(file: Upload): String

  """Deskripsinya ada disini loh"""
  claimCreateOne(claimFormCreateOneArgs: ClaimFormCreateOneArgs!): Claim

  """
  Header wajib ada apollo-require-preflight = true agar tidak CSRF error. File JPG akan dicompress
  """
  participantImport(file: Upload): Boolean

  """Deskripsinya ada disini loh"""
  userCreateOne(userCreateOneAsParticipantArgs: UserCreateOneAsParticipantArgs!): User

  """Deskripsinya ada disini loh"""
  userUpdateOne(userUpdateOneByIdArgs: UserUpdateOneByIdArgs!): User

  """Deskripsinya ada disini loh"""
  userDeleteOne(userDeleteOneByIdArgs: UserDeleteOneByIdArgs!): Boolean!

  """
  Header wajib ada apollo-require-preflight = true agar tidak CSRF error. File JPG akan dicompress
  """
  userImport(file: Upload): Boolean

  """Deskripsinya ada disini loh"""
  notificationUpdateOne(notificationUpdateOneIsReadAndIsClearedArgs: NotificationUpdateOneIsReadAndIsClearedArgs!): Notification

  """Deskripsinya ada disini loh"""
  notificationUpdateMany: Boolean
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ClaimUpdateOneOfStatusArgs {
  id: String!
  status: ClaimStatusType!
}

input ClaimFormCreateOneArgs {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  companyId: Int!
  participantId: String!
  claimFinancialsId: [Int!]!
  claimProcessesId: [Int!]!
  diseaseId: Int
  clinicsId: [Int!]!
  inputedBy: Int
  claimTypes: [Int!]!
  tags: [Int!]
  claimStatuses: [Int!]
}

input UserCreateOneAsParticipantArgs {
  fullName: String!
  email: String!
  emailVerifiedAt: DateTime
  password: String!
  profilePictureUrl: String
  participantId: String!
  roleId: Int!
}

input UserUpdateOneByIdArgs {
  id: String!
  fullName: String
  email: String
  emailVerifiedAt: DateTime
  password: String
  profilePictureUrl: String
}

input UserDeleteOneByIdArgs {
  id: String!
}

input NotificationUpdateOneIsReadAndIsClearedArgs {
  id: Int!
  isRead: Boolean
  isCleared: Boolean
}