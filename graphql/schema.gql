# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AccountAvgAggregate {
  id: Float
  currentBalance: Float
}

type AccountCountAggregate {
  id: Int!
  currentBalance: Int!
  currentBalanceLastUpdate: Int!
  _all: Int!
}

type AccountCount {
  transactions: Int!
  programParticipation: Int!
}

type AccountMaxAggregate {
  id: Int
  currentBalance: Float
  currentBalanceLastUpdate: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AccountMinAggregate {
  id: Int
  currentBalance: Float
  currentBalanceLastUpdate: DateTime
}

type AccountSumAggregate {
  id: Int
  currentBalance: Float
}

type Account {
  """Nomer Dana"""
  id: Int!

  """Sisa Plafon:	Sisa Plafon Santunan Harian Rawat Inap"""
  currentBalance: Float!
  currentBalanceLastUpdate: DateTime
  transactions: [Transaction!]
  programParticipation: [ProgramParticipation!]
  _count: AccountCount!
}

type AddressAvgAggregate {
  id: Float
  subdistrictId: Float
}

type AddressCountAggregate {
  id: Int!
  address: Int!
  subdistrictId: Int!
  _all: Int!
}

type AddressCount {
  ContactInfo: Int!
}

type AddressMaxAggregate {
  id: Int
  address: String
  subdistrictId: Int
}

type AddressMinAggregate {
  id: Int
  address: String
  subdistrictId: Int
}

type AddressSumAggregate {
  id: Int
  subdistrictId: Int
}

type Address {
  id: Int!

  """Alamat"""
  address: String!
  subdistrictId: Int!
  subdistrict: Subdistrict!
  ContactInfo: [ContactInfo!]
  _count: AddressCount!
}

type AnnouncementAvgAggregate {
  id: Float
}

type AnnouncementCountAggregate {
  id: Int!
  title: Int!
  content: Int!
  imageUrl: Int!
  createdAt: Int!
  updatedAt: Int!
  createdById: Int!
  _all: Int!
}

type AnnouncementMaxAggregate {
  id: Int
  title: String
  content: String
  imageUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  createdById: String
}

type AnnouncementMinAggregate {
  id: Int
  title: String
  content: String
  imageUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  createdById: String
}

type AnnouncementSumAggregate {
  id: Int
}

type Announcement {
  id: Int!
  title: String!
  content: String!
  imageUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
  createdById: String!
  createdBy: User!
}

type AggregateBackup {
  _count: BackupCountAggregate
  _avg: BackupAvgAggregate
  _sum: BackupSumAggregate
  _min: BackupMinAggregate
  _max: BackupMaxAggregate
}

type BackupAvgAggregate {
  id: Float
}

type BackupCountAggregate {
  id: Int!
  path: Int!
  isSuccessful: Int!
  type: Int!
  executionType: Int!
  createdAt: Int!
  _all: Int!
}

type BackupMaxAggregate {
  id: Int
  path: String
  isSuccessful: Boolean
  type: BackupType
  executionType: ExecutionType
  createdAt: DateTime
}

enum BackupType {
  DB
  FULL
}

enum ExecutionType {
  MANUAL
  AUTO
}

type BackupMinAggregate {
  id: Int
  path: String
  isSuccessful: Boolean
  type: BackupType
  executionType: ExecutionType
  createdAt: DateTime
}

type BackupSumAggregate {
  id: Int
}

type Backup {
  id: Int!
  path: String
  isSuccessful: Boolean!
  type: BackupType!
  executionType: ExecutionType!
  createdAt: DateTime!
}

type BankAccountAvgAggregate {
  id: Float
  accountNumber: Float
}

type BankAccountCountAggregate {
  id: Int!
  accountNumber: Int!
  accountName: Int!
  _all: Int!
}

type BankAccountMaxAggregate {
  id: Int
  accountNumber: Float
  accountName: String
}

type BankAccountMinAggregate {
  id: Int
  accountNumber: Float
  accountName: String
}

type BankAccountSumAggregate {
  id: Int
  accountNumber: Float
}

type BankAccount {
  id: Int!

  """No. Rekening	Nomer Rekening Penerimaan Manfaat Pensiun"""
  accountNumber: Float!

  """Rekening a/n.	Nama pada rekening bank"""
  accountName: String!
  participant: Participant
}

type BranchAvgAggregate {
  id: Float
}

type BranchCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type BranchCount {
  employment: Int!
  claimFinancial: Int!
}

type BranchMaxAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type BranchMinAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type BranchSumAggregate {
  id: Int
}

type Branch {
  id: Int!

  """Nama Cabang"""
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  employment: [Employment!]
  claimFinancial: [ClaimFinancial!]
  _count: BranchCount!
}

type CityAvgAggregate {
  id: Float
  provinceId: Float
}

type CityCountAggregate {
  id: Int!
  name: Int!
  provinceId: Int!
  _all: Int!
}

type CityCount {
  districts: Int!
}

type CityMaxAggregate {
  id: Int
  name: String
  provinceId: Int
}

type CityMinAggregate {
  id: Int
  name: String
  provinceId: Int
}

type CitySumAggregate {
  id: Int
  provinceId: Int
}

"""Kota"""
type City {
  id: Int!

  """Nama Kota"""
  name: String!
  provinceId: Int!
  province: Province!
  districts: [District!]
  _count: CityCount!
}

type ClaimAvgAggregate {
  claimFinancialId: Float
  claimProgramId: Float
}

type ClaimCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  channel: Int!
  admedicaStatus: Int!
  company: Int!
  participantId: Int!
  claimFinancialId: Int!
  claimProgramId: Int!
  inputedById: Int!
  waitingForId: Int!
  _all: Int!
}

type ClaimCount {
  tags: Int!
  claimStatuses: Int!
}

type ClaimMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  channel: ClaimChannel
  admedicaStatus: AdmedicaStatus
  company: String
  participantId: String
  claimFinancialId: Int
  claimProgramId: Int
  inputedById: String
  waitingForId: String
}

enum ClaimChannel {
  REGULER
  WA
  EMAIL
}

enum AdmedicaStatus {
  NON_ADMEDICA
  ADMEDICA
}

type ClaimMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  channel: ClaimChannel
  admedicaStatus: AdmedicaStatus
  company: String
  participantId: String
  claimFinancialId: Int
  claimProgramId: Int
  inputedById: String
  waitingForId: String
}

type ClaimSumAggregate {
  claimFinancialId: Int
  claimProgramId: Int
}

type Claim {
  """
  Nok:	Nomer Register Klaim
  Nomor Sm	nomer register Surat masuk (Klaim melalui WA/Reguler/Exception/Email)
  """
  id: String!

  """
  Tklaim:	Tanggal Klaim atau TProses Pengajuan:	Tanggal Proses pengajuan 
  """
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime

  """Metode Klaim:	WA,E-mail,Reguler, Telepon"""
  channel: ClaimChannel!

  """Stat. Admedika:	Status Admedika"""
  admedicaStatus: AdmedicaStatus!

  """Prsh:	Perusahaan"""
  company: String!
  participantId: String!
  claimFinancialId: Int!
  claimProgramId: Int!
  inputedById: String
  waitingForId: String
  participant: Participant!
  claimFinancials: ClaimFinancial!
  claimProgram: ClaimProgram!
  inputedBy: User
  waitingFor: User
  tags: [Tag!]
  claimStatuses: [ClaimStatus!]
  _count: ClaimCount!
}

type ClaimFinancialAvgAggregate {
  id: Float
  totalInvoiceProofAmount: Float
  requestedAmount: Float
  paidAmount: Float
  rejectedAmount: Float
  previousBalance: Float
  remainingBalance: Float
  branchId: Float
  claimStatusId: Float
  transactionId: Float
}

type ClaimFinancialCountAggregate {
  id: Int!
  totalInvoiceProofAmount: Int!
  requestedAmount: Int!
  paidAmount: Int!
  rejectedAmount: Int!
  previousBalance: Int!
  remainingBalance: Int!
  branchId: Int!
  claimStatusId: Int!
  transactionId: Int!
  _all: Int!
}

type ClaimFinancialMaxAggregate {
  id: Int
  totalInvoiceProofAmount: Float
  requestedAmount: Float
  paidAmount: Float
  rejectedAmount: Float
  previousBalance: Float
  remainingBalance: Float
  branchId: Int
  claimStatusId: Int
  transactionId: Int
}

type ClaimFinancialMinAggregate {
  id: Int
  totalInvoiceProofAmount: Float
  requestedAmount: Float
  paidAmount: Float
  rejectedAmount: Float
  previousBalance: Float
  remainingBalance: Float
  branchId: Int
  claimStatusId: Int
  transactionId: Int
}

type ClaimFinancialSumAggregate {
  id: Int
  totalInvoiceProofAmount: Float
  requestedAmount: Float
  paidAmount: Float
  rejectedAmount: Float
  previousBalance: Float
  remainingBalance: Float
  branchId: Int
  claimStatusId: Int
  transactionId: Int
}

type ClaimFinancial {
  id: Int!
  totalInvoiceProofAmount: Float!

  """Aju:	Jumlah nominal klaim diajukan"""
  requestedAmount: Float!

  """Bayar:	Jumlah nominal klaim dibayar"""
  paidAmount: Float

  """Tolak:	Jumlah Nominal Klaim ditolak"""
  rejectedAmount: Float

  """Saldo sebelum klaim dibayarkan"""
  previousBalance: Float!

  """Saldo setelah klaim dibayarkan"""
  remainingBalance: Float!

  """Cabang: Cabang Pembayar Pensiun"""
  branchId: Int
  claimStatusId: Int
  transactionId: Int

  """Cabang: Cabang Pembayar Pensiun"""
  branchPayee: Branch
  claim: Claim
  claimStatus: ClaimStatus
  transaction: Transaction
}

type ClaimProgramAvgAggregate {
  id: Float
  diseaseId: Float
  clinicId: Float
  programParticipationToProgramsProgramParticipationId: Float
  programParticipationToProgramsProgramId: Float
}

type ClaimProgramCountAggregate {
  id: Int!
  expeditionDate: Int!
  isReclaim: Int!
  isReclaimNoticeLetterDate: Int!
  submissionNote: Int!
  description: Int!
  additionalNote: Int!
  startTreatment: Int!
  endTreatment: Int!
  kurisRodaOrWalkerStoreName: Int!
  diseaseId: Int!
  clinicId: Int!
  programParticipationToProgramsProgramParticipationId: Int!
  programParticipationToProgramsProgramId: Int!
  _all: Int!
}

type ClaimProgramCount {
  documents: Int!
  invoiceProofs: Int!
}

type ClaimProgramMaxAggregate {
  id: Int
  expeditionDate: DateTime
  isReclaim: Boolean
  isReclaimNoticeLetterDate: DateTime
  submissionNote: String
  description: String
  additionalNote: String
  startTreatment: DateTime
  endTreatment: DateTime
  kurisRodaOrWalkerStoreName: String
  diseaseId: Int
  clinicId: Int
  programParticipationToProgramsProgramParticipationId: Int
  programParticipationToProgramsProgramId: Int
}

type ClaimProgramMinAggregate {
  id: Int
  expeditionDate: DateTime
  isReclaim: Boolean
  isReclaimNoticeLetterDate: DateTime
  submissionNote: String
  description: String
  additionalNote: String
  startTreatment: DateTime
  endTreatment: DateTime
  kurisRodaOrWalkerStoreName: String
  diseaseId: Int
  clinicId: Int
  programParticipationToProgramsProgramParticipationId: Int
  programParticipationToProgramsProgramId: Int
}

type ClaimProgramSumAggregate {
  id: Int
  diseaseId: Int
  clinicId: Int
  programParticipationToProgramsProgramParticipationId: Int
  programParticipationToProgramsProgramId: Int
}

type ClaimProgram {
  id: Int!

  """Tekspedisi	Tanggal ekspedisi"""
  expeditionDate: DateTime

  """Reklaim:	Keterangan untuk klaim ulang"""
  isReclaim: Boolean
  isReclaimNoticeLetterDate: DateTime

  """Ket.Pengajuan:	Keterangan konfirmasi"""
  submissionNote: String

  """Keterangan:	isi keterangan """
  description: String

  """Ket.Tambahan	keterangan tambahan"""
  additionalNote: String

  """Tmulairawat	Tanggal mulai Rawat"""
  startTreatment: DateTime

  """Takhirrawat	Tanggal akhir rawat"""
  endTreatment: DateTime

  """Nama toko atau tempat pembelian kursi roda"""
  kurisRodaOrWalkerStoreName: String

  """Penyakit:	Penyakit yang diderita"""
  diseaseId: Int
  clinicId: Int
  programParticipationToProgramsProgramParticipationId: Int!
  programParticipationToProgramsProgramId: Int!

  """Penyakit:	Penyakit yang diderita"""
  disease: Disease
  clinics: Clinic
  claim: Claim

  """memilih program mana?"""
  programParticipationToProgram: ProgramParticipationToPrograms!

  """Kwitansi, data, dll: Bukti Pembayaran/Invoice Rumah Sakit oleh Peserta"""
  documents: [Document!]

  """Kuitansi: Bukti2 pembayaran klinik atau rumah sakit"""
  invoiceProofs: [InvoiceProof!]
  _count: ClaimProgramCount!
}

type ClaimStatusAvgAggregate {
  id: Float
}

type ClaimStatusCountAggregate {
  id: Int!
  description: Int!
  rejectionReason: Int!
  createdAt: Int!
  type: Int!
  changedById: Int!
  claimId: Int!
  rejectionLetterId: Int!
  guaranteeLetterId: Int!
  transactionLetterId: Int!
  bookKeepingOrderId: Int!
  _all: Int!
}

type ClaimStatusMaxAggregate {
  id: Int
  description: String
  rejectionReason: String
  createdAt: DateTime
  type: ClaimStatusType
  changedById: String
  claimId: String
  rejectionLetterId: String
  guaranteeLetterId: String
  transactionLetterId: String
  bookKeepingOrderId: String
}

enum ClaimStatusType {
  PENDING
  APPROVED
  REJECTED
  RELEASE
  PAID
  COMPLETED
  CANCELLED
  REOPEN
}

type ClaimStatusMinAggregate {
  id: Int
  description: String
  rejectionReason: String
  createdAt: DateTime
  type: ClaimStatusType
  changedById: String
  claimId: String
  rejectionLetterId: String
  guaranteeLetterId: String
  transactionLetterId: String
  bookKeepingOrderId: String
}

type ClaimStatusSumAggregate {
  id: Int
}

type ClaimStatus {
  id: Int!
  description: String
  rejectionReason: String
  createdAt: DateTime!
  type: ClaimStatusType!
  changedById: String!
  claimId: String!

  """
  Nomor surat tolak
  Tanggal surat tolak
  """
  rejectionLetterId: String

  """No SurJam:	Nomer Surat jaminan"""
  guaranteeLetterId: String

  """Surat transaksi"""
  transactionLetterId: String
  bookKeepingOrderId: String
  changedBy: User!
  claim: Claim!

  """
  Nomor surat tolak
  Tanggal surat tolak
  """
  rejectionLetter: Document

  """No SurJam:	Nomer Surat jaminan"""
  guaranteeLetter: Document

  """Surat transaksi"""
  transactionLetter: Document
  bookKeepingOrder: Document

  """
  apabila status paid maka berelasi ke bukti pembayaran di claimFinancial
  """
  claimFinancial: ClaimFinancial
}

type ClinicAvgAggregate {
  id: Float
}

type ClinicCountAggregate {
  id: Int!
  code: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ClinicCount {
  claimProgram: Int!
}

type ClinicMaxAggregate {
  id: Int
  code: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ClinicMinAggregate {
  id: Int
  code: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ClinicSumAggregate {
  id: Int
}

type Clinic {
  id: Int!
  code: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  claimProgram: [ClaimProgram!]
  _count: ClinicCount!
}

type ContactInfoAvgAggregate {
  id: Float
  addressId: Float
}

type ContactInfoCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  addressId: Int!
  _all: Int!
}

type ContactInfoCount {
  phones: Int!
}

type ContactInfoMaxAggregate {
  id: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  addressId: Int
}

type ContactInfoMinAggregate {
  id: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  addressId: Int
}

type ContactInfoSumAggregate {
  id: Int
  addressId: Int
}

type ContactInfo {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  addressId: Int!
  phones: [phone!]
  participant: Participant
  address: Address!
  _count: ContactInfoCount!
}

type DiseaseAvgAggregate {
  id: Float
}

type DiseaseCountAggregate {
  id: Int!
  code: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type DiseaseCount {
  claimProgram: Int!
}

type DiseaseMaxAggregate {
  id: Int
  code: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type DiseaseMinAggregate {
  id: Int
  code: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type DiseaseSumAggregate {
  id: Int
}

type Disease {
  id: Int!

  """KodePenyakit: kode jenis penyakit"""
  code: String!

  """NamaPenyakit: nama penyakit"""
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  claimProgram: [ClaimProgram!]
  _count: DiseaseCount!
}

type DistrictAvgAggregate {
  id: Float
  cityId: Float
}

type DistrictCountAggregate {
  id: Int!
  name: Int!
  cityId: Int!
  _all: Int!
}

type DistrictCount {
  subdistricts: Int!
}

type DistrictMaxAggregate {
  id: Int
  name: String
  cityId: Int
}

type DistrictMinAggregate {
  id: Int
  name: String
  cityId: Int
}

type DistrictSumAggregate {
  id: Int
  cityId: Int
}

"""Kecamatan"""
type District {
  id: Int!

  """Nama Kecamatan"""
  name: String!
  cityId: Int!
  city: City!
  subdistricts: [Subdistrict!]
  _count: DistrictCount!
}

type DocumentAvgAggregate {
  size: Float
  claimProgramId: Float
}

type DocumentCountAggregate {
  id: Int!
  uploadedFileUrl: Int!
  pdfPath: Int!
  docxPath: Int!
  size: Int!
  createdAt: Int!
  updatedAt: Int!
  source: Int!
  type: Int!
  claimProgramId: Int!
  _all: Int!
}

type DocumentCount {
  printedby: Int!
}

type DocumentMaxAggregate {
  id: String
  uploadedFileUrl: String
  pdfPath: String
  docxPath: String
  size: Int
  createdAt: DateTime
  updatedAt: DateTime
  source: DocumentSource
  type: DocumentType
  claimProgramId: Int
}

enum DocumentSource {
  UPLOADED
  GENERATED
}

enum DocumentType {
  INVOICE
  CLAIM_FORM
  REJECTION_LETTER
  GUARANTEE_LETTER
  RECAP
  EXPEDITION
  TRANSFER
}

type DocumentMinAggregate {
  id: String
  uploadedFileUrl: String
  pdfPath: String
  docxPath: String
  size: Int
  createdAt: DateTime
  updatedAt: DateTime
  source: DocumentSource
  type: DocumentType
  claimProgramId: Int
}

type DocumentSumAggregate {
  size: Int
  claimProgramId: Int
}

type Document {
  """Nodok:	Nomer Dokumen"""
  id: String!

  """Masukkan url file dokumen yang telah diupload"""
  uploadedFileUrl: String

  """
  Path:	Path file dokumen versi pdf, Hanya bisa satu kali input path tidak bisa diupdate
  """
  pdfPath: String

  """
  Path:	Path file dokumen versi pdf, Hanya bisa satu kali input path tidak bisa diupdate
  """
  docxPath: String

  """Ukuran:	Ukuran dokumen"""
  size: Int!
  createdAt: DateTime!
  updatedAt: DateTime!

  """Sumber Dokumen"""
  source: DocumentSource!

  """Jenis dokumen"""
  type: DocumentType!
  claimProgramId: Int

  """Siapa saja yang telah mencetak dokumen ini"""
  printedby: [User!]
  rejectionLetterOf: ClaimStatus
  guaranteeLetterOf: ClaimStatus
  transactionLetterOf: ClaimStatus

  """Perintah Pembukuan"""
  bookKeepingOrderOf: ClaimStatus
  claimProgramm: ClaimProgram
  invoiceProof: InvoiceProof
  transaction: Transaction
  _count: DocumentCount!
}

type EmploymentAvgAggregate {
  id: Float
  branchId: Float
  groupId: Float
  regionId: Float
}

type EmploymentCountAggregate {
  id: Int!
  employmentPosition: Int!
  branchId: Int!
  groupId: Int!
  regionId: Int!
  _all: Int!
}

type EmploymentMaxAggregate {
  id: Int
  employmentPosition: Position
  branchId: Int
  groupId: Int
  regionId: Int
}

enum Position {
  AMGR
  AVP
  PGD
  MGR
  SASST
  VP
  SAVP
  SMGR
  SAMGR
  ASST
}

type EmploymentMinAggregate {
  id: Int
  employmentPosition: Position
  branchId: Int
  groupId: Int
  regionId: Int
}

type EmploymentSumAggregate {
  id: Int
  branchId: Int
  groupId: Int
  regionId: Int
}

type Employment {
  id: Int!

  """Jenjang Jabatan terakhir"""
  employmentPosition: Position!
  branchId: Int!
  groupId: Int
  regionId: Int
  participant: Participant
  branch: Branch!
  group: Group
  region: Region
}

type GroupAvgAggregate {
  id: Float
}

type GroupCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type GroupCount {
  employment: Int!
}

type GroupMaxAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type GroupMinAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type GroupSumAggregate {
  id: Int
}

type Group {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  employment: [Employment!]
  _count: GroupCount!
}

type InvoiceProofAvgAggregate {
  id: Float
  amount: Float
  claimProgramId: Float
}

type InvoiceProofCountAggregate {
  id: Int!
  issuedDate: Int!
  amount: Int!
  documentProofId: Int!
  claimProgramId: Int!
  _all: Int!
}

type InvoiceProofMaxAggregate {
  id: Int
  issuedDate: DateTime
  amount: Float
  documentProofId: String
  claimProgramId: Int
}

type InvoiceProofMinAggregate {
  id: Int
  issuedDate: DateTime
  amount: Float
  documentProofId: String
  claimProgramId: Int
}

type InvoiceProofSumAggregate {
  id: Int
  amount: Float
  claimProgramId: Int
}

"""Kuitansi bukti pembayaran klinik atau rumah sakit"""
type InvoiceProof {
  id: Int!

  """Tanggal saat kuitansi diterbitkan"""
  issuedDate: DateTime!

  """Nominal biaya sesuai dengan kuitansi"""
  amount: Float!

  """Bukti Kuitansi"""
  documentProofId: String!
  claimProgramId: Int

  """Bukti Kuitansi"""
  documentProof: Document!
  claimProgram: ClaimProgram
}

type NotificationAvgAggregate {
  id: Float
}

type NotificationCountAggregate {
  id: Int!
  title: Int!
  subtitle: Int!
  content: Int!
  isRead: Int!
  isCleared: Int!
  deepLink: Int!
  fcmToken: Int!
  createdAt: Int!
  updatedAt: Int!
  userId: Int!
  _all: Int!
}

type NotificationMaxAggregate {
  id: Int
  title: String
  subtitle: String
  content: String
  isRead: Boolean
  isCleared: Boolean
  deepLink: String
  fcmToken: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
}

type NotificationMinAggregate {
  id: Int
  title: String
  subtitle: String
  content: String
  isRead: Boolean
  isCleared: Boolean
  deepLink: String
  fcmToken: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
}

type NotificationSumAggregate {
  id: Int
}

type Notification {
  id: Int!
  title: String!
  subtitle: String!
  content: String!
  isRead: Boolean!
  isCleared: Boolean!
  deepLink: String
  fcmToken: String
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  user: User!
}

type ParticipantAvgAggregate {
  employmentId: Float
  bankAccountId: Float
  contactInfoId: Float
  programParticipationId: Float
}

type ParticipantCountAggregate {
  gender: Int!
  birthDate: Int!
  isActive: Int!
  status: Int!
  userId: Int!
  relationId: Int!
  employmentId: Int!
  bankAccountId: Int!
  contactInfoId: Int!
  programParticipationId: Int!
  _all: Int!
}

type ParticipantCount {
  claims: Int!
  relations: Int!
}

type ParticipantMaxAggregate {
  gender: Gender
  birthDate: DateTime
  isActive: Boolean
  status: ParticipantStatus
  userId: String
  relationId: String
  employmentId: Int
  bankAccountId: Int
  contactInfoId: Int
  programParticipationId: Int
}

enum Gender {
  UNKNOWN
  MALE
  FEMALE
}

enum ParticipantStatus {
  PENSIUNAN
  PASANGAN
  YATIM
  JANDADUDA6BULAN
}

type ParticipantMinAggregate {
  gender: Gender
  birthDate: DateTime
  isActive: Boolean
  status: ParticipantStatus
  userId: String
  relationId: String
  employmentId: Int
  bankAccountId: Int
  contactInfoId: Int
  programParticipationId: Int
}

type ParticipantSumAggregate {
  employmentId: Int
  bankAccountId: Int
  contactInfoId: Int
  programParticipationId: Int
}

type Participant {
  """Jenis Kelamin"""
  gender: Gender!

  """Tanggal Lahir"""
  birthDate: DateTime!

  """Aktif/Non Aktif:	Status Kepesertaan Aktif/non aktif"""
  isActive: Boolean!

  """Pensiunan,Pasangan, Yatim, Janda/duda 6 bulan"""
  status: ParticipantStatus!
  userId: String!
  relationId: String
  employmentId: Int!
  bankAccountId: Int!
  contactInfoId: Int!
  programParticipationId: Int!
  user: User!

  """Anggota keluarga dari"""
  relation: Participant
  employment: Employment!
  bankAccount: BankAccount!
  contactInfo: ContactInfo!
  programParticipation: ProgramParticipation!
  claims: [Claim!]

  """Anggota keluarga dari"""
  relations: [Participant!]
  _count: ParticipantCount!
}

type phone {
  number: Float!
  contactInfoId: Int!
  contactInfo: ContactInfo!
}

type PhoneAvgAggregate {
  number: Float
  contactInfoId: Float
}

type PhoneCountAggregate {
  number: Int!
  contactInfoId: Int!
  _all: Int!
}

type PhoneMaxAggregate {
  number: Float
  contactInfoId: Int
}

type PhoneMinAggregate {
  number: Float
  contactInfoId: Int
}

type PhoneSumAggregate {
  number: Float
  contactInfoId: Int
}

type AggregateProgram {
  _count: ProgramCountAggregate
  _avg: ProgramAvgAggregate
  _sum: ProgramSumAggregate
  _min: ProgramMinAggregate
  _max: ProgramMaxAggregate
}

type ProgramAvgAggregate {
  id: Float
  maxAllowancePercentage: Float
  allowanceCeiling: Float
  allowanceQuota: Float
  claimPeriodMax: Float
  reclaimPeriodMax: Float
}

type ProgramCountAggregate {
  id: Int!
  type: Int!
  santunanHarianRawatInapPlan: Int!
  tambahanBantuanRawatInapType: Int!
  maxAllowancePercentage: Int!
  allowanceCeiling: Int!
  allowanceCeilingPeriod: Int!
  allowanceQuota: Int!
  allowanceQuotaPeriod: Int!
  claimPeriodMax: Int!
  reclaimPeriodMax: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  _all: Int!
}

type ProgramCount {
  programParticipations: Int!
}

type ProgramMaxAggregate {
  id: Int
  type: ProgramType
  santunanHarianRawatInapPlan: SantunanHarianRawatInapPlan
  tambahanBantuanRawatInapType: TambahanBantuanRawatInapType
  maxAllowancePercentage: Int
  allowanceCeiling: Float
  allowanceCeilingPeriod: Period
  allowanceQuota: Int
  allowanceQuotaPeriod: Period
  claimPeriodMax: Int
  reclaimPeriodMax: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

enum ProgramType {
  SANTUNAN_HARIAN_RAWAT_INAP
  BANTUAN_BIAYA_CUCI_DARAH
  BANTUAN_KURSI_RODA
  BANTUAN_WALKER
  BANTUAN_IGD_UGD
  BANTUAN_RAWAT_INAP
}

enum SantunanHarianRawatInapPlan {
  I
  II
  III
}

enum TambahanBantuanRawatInapType {
  BPJS
  NON_BPJS
}

enum Period {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  BIENNIALLY
  ALLTIME
  EVENT
}

type ProgramMinAggregate {
  id: Int
  type: ProgramType
  santunanHarianRawatInapPlan: SantunanHarianRawatInapPlan
  tambahanBantuanRawatInapType: TambahanBantuanRawatInapType
  maxAllowancePercentage: Int
  allowanceCeiling: Float
  allowanceCeilingPeriod: Period
  allowanceQuota: Int
  allowanceQuotaPeriod: Period
  claimPeriodMax: Int
  reclaimPeriodMax: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ProgramSumAggregate {
  id: Int
  maxAllowancePercentage: Int
  allowanceCeiling: Float
  allowanceQuota: Int
  claimPeriodMax: Int
  reclaimPeriodMax: Int
}

"""Reference Document: https://rebrand.ly/d6i9uem"""
type Program {
  id: Int!

  """Nama Program/jenis program"""
  type: ProgramType!
  santunanHarianRawatInapPlan: SantunanHarianRawatInapPlan
  tambahanBantuanRawatInapType: TambahanBantuanRawatInapType

  """
  misal 50% dari biaya UGD/IGD, Plafon per pasangan maksimal Rp. 1.500.000 /tahun 
  """
  maxAllowancePercentage: Int

  """
  Plafon Santunan, contoh KELAS: Kelas sesuai Jenjab I=Rp.1.250.000 II=Rp.1.000.000  III= Rp.750.000 
  """
  allowanceCeiling: Float!

  """Periode Santunan"""
  allowanceCeilingPeriod: Period

  """
  Berapa kali? contoh: Plafon per orang maksimal Rp. 2.000.000 eenmaleg (hanya 1 kali) 
  contoh: Plafon per orang perminggu maksimal 2 kali kunjungan, per kunjunan maksimal Rp.700.000 
  """
  allowanceQuota: Int

  """Maksimal santunan [60] hari rawat inap/tahun/orang"""
  allowanceQuotaPeriod: Period

  """Masa klaim [60] hari sejak keluar rumah sakit/tanggal kuitansi"""
  claimPeriodMax: Int

  """Klaim ulang maksimal [60] hari sejak tanggal pemberitahuan"""
  reclaimPeriodMax: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  programParticipations: [ProgramParticipationToPrograms!]
  _count: ProgramCount!
}

type ProgramParticipationAvgAggregate {
  id: Float
  fundingId: Float
}

type ProgramParticipationCountAggregate {
  id: Int!
  bpjsNumber: Int!
  nonActiveReason: Int!
  effectiveDate: Int!
  nonActiveDate: Int!
  santunanHarianRawatInapPlan: Int!
  fundingId: Int!
  _all: Int!
}

type ProgramParticipationCount {
  programParticipationToPrograms: Int!
}

type ProgramParticipationMaxAggregate {
  id: Int
  bpjsNumber: String
  nonActiveReason: String
  effectiveDate: DateTime
  nonActiveDate: DateTime
  santunanHarianRawatInapPlan: SantunanHarianRawatInapPlan
  fundingId: Int
}

type ProgramParticipationMinAggregate {
  id: Int
  bpjsNumber: String
  nonActiveReason: String
  effectiveDate: DateTime
  nonActiveDate: DateTime
  santunanHarianRawatInapPlan: SantunanHarianRawatInapPlan
  fundingId: Int
}

type ProgramParticipationSumAggregate {
  id: Int
  fundingId: Int
}

type ProgramParticipation {
  """Nopol:	Nomer Polish"""
  id: Int!

  """No.BPJS/ASKES: Nomer kartu BPJS"""
  bpjsNumber: String

  """Keterangan Non Aktif:	keterangan perihal penonaktifan"""
  nonActiveReason: String

  """Tgl. Efektif: Tanggal mulai ikut program Fasilitas Kesehatan"""
  effectiveDate: DateTime!

  """Tgl Non Aktif:	tanggal penonaktifan peserta"""
  nonActiveDate: DateTime
  santunanHarianRawatInapPlan: SantunanHarianRawatInapPlan!

  """Nomor Dana"""
  fundingId: Int
  participant: Participant

  """Dana"""
  funding: Account
  programParticipationToPrograms: [ProgramParticipationToPrograms!]
  _count: ProgramParticipationCount!
}

type ProgramParticipationToProgramsAvgAggregate {
  allowanceCeilingRemaining: Float
  allowanceQuotaRemaining: Float
  programParticipationId: Float
  programId: Float
}

type ProgramParticipationToProgramsCountAggregate {
  description: Int!
  isAvailable: Int!
  allowanceCeilingRemaining: Int!
  allowanceCeilingRemainingLastResetDate: Int!
  allowanceQuotaRemaining: Int!
  allowanceQuotaRemainingLastResetDate: Int!
  updatedAt: Int!
  programParticipationId: Int!
  programId: Int!
  _all: Int!
}

type ProgramParticipationToProgramsCount {
  claimPrograms: Int!
}

type ProgramParticipationToProgramsMaxAggregate {
  description: String
  isAvailable: Boolean
  allowanceCeilingRemaining: Float
  allowanceCeilingRemainingLastResetDate: DateTime
  allowanceQuotaRemaining: Int
  allowanceQuotaRemainingLastResetDate: DateTime
  updatedAt: DateTime
  programParticipationId: Int
  programId: Int
}

type ProgramParticipationToProgramsMinAggregate {
  description: String
  isAvailable: Boolean
  allowanceCeilingRemaining: Float
  allowanceCeilingRemainingLastResetDate: DateTime
  allowanceQuotaRemaining: Int
  allowanceQuotaRemainingLastResetDate: DateTime
  updatedAt: DateTime
  programParticipationId: Int
  programId: Int
}

type ProgramParticipationToProgramsSumAggregate {
  allowanceCeilingRemaining: Float
  allowanceQuotaRemaining: Int
  programParticipationId: Int
  programId: Int
}

type ProgramParticipationToPrograms {
  description: String
  isAvailable: Boolean!

  """Sisa penggunaan plafon saat ini"""
  allowanceCeilingRemaining: Float!
  allowanceCeilingRemainingLastResetDate: DateTime

  """
  Sisa kesempatan klaim saat ini, namun tidak semua program memberlakukan quota penggunaan klaim
  """
  allowanceQuotaRemaining: Int
  allowanceQuotaRemainingLastResetDate: DateTime

  """allowanceCeiling & Quota Remaining LastUpdate"""
  updatedAt: DateTime!
  programParticipationId: Int!
  programId: Int!
  programParticipation: ProgramParticipation!
  program: Program!
  claimPrograms: [ClaimProgram!]
  _count: ProgramParticipationToProgramsCount!
}

type ProvinceAvgAggregate {
  id: Float
}

type ProvinceCountAggregate {
  id: Int!
  name: Int!
  _all: Int!
}

type ProvinceCount {
  cities: Int!
}

type ProvinceMaxAggregate {
  id: Int
  name: String
}

type ProvinceMinAggregate {
  id: Int
  name: String
}

type ProvinceSumAggregate {
  id: Int
}

"""Provinsi"""
type Province {
  id: Int!
  name: String!
  _count: ProvinceCount!
}

type RegionAvgAggregate {
  id: Float
}

type RegionCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type RegionCount {
  employment: Int!
}

type RegionMaxAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type RegionMinAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type RegionSumAggregate {
  id: Int
}

type Region {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  employment: [Employment!]
  _count: RegionCount!
}

type AggregateRole {
  _count: RoleCountAggregate
  _avg: RoleAvgAggregate
  _sum: RoleSumAggregate
  _min: RoleMinAggregate
  _max: RoleMaxAggregate
}

type RoleAvgAggregate {
  id: Float
  higherLevelThanId: Float
}

type RoleCountAggregate {
  id: Int!
  name: Int!
  description: Int!
  higherLevelThanId: Int!
  roleType: Int!
  _all: Int!
}

type RoleCount {
  rolePermissions: Int!
  users: Int!
  lowerLevelThan: Int!
}

type RoleMaxAggregate {
  id: Int
  name: String
  description: String
  higherLevelThanId: Int
  roleType: RoleType
}

enum RoleType {
  SUPERUSER
  PARTICIPANT
  ADMIN
}

type RoleMinAggregate {
  id: Int
  name: String
  description: String
  higherLevelThanId: Int
  roleType: RoleType
}

type RoleSumAggregate {
  id: Int
  higherLevelThanId: Int
}

type Role {
  id: Int!

  """E.g., 'superuser', 'analyst', 'group leader'"""
  name: String!
  description: String
  higherLevelThanId: Int
  roleType: RoleType
  higherLevelThan: Role
  rolePermissions: [RolePermission!]
  users: [User!]
  lowerLevelThan: [Role!]
  _count: RoleCount!
}

type RolePermissionAvgAggregate {
  id: Float
  roleId: Float
}

type RolePermissionCountAggregate {
  id: Int!
  roleId: Int!
  permission: Int!
  _all: Int!
}

type RolePermissionMaxAggregate {
  id: Int
  roleId: Int
  permission: Permission
}

enum Permission {
  CREATE_CLAIM
  UPDATE_CLAIM
  UPDATE_CLAIM_STATUS_TO_APPROVED
  UPDATE_CLAIM_STATUS_TO_CONDITIONAL_REJECT
  UPDATE_CLAIM_STATUS_TO_UNCONDITIONAL_REJECT
  UPDATE_CLAIM_STATUS_TO_RELEASED
  UPDATE_CLAIM_STATUS_TO_PAID
  UPDATE_CLAIM_STATUS_TO_COMPLETED
  DELETE_CLAIM_DOCUMENT
  CREATE_CLAIM_DOCUMENT
  IMPORT_CLAIM
  EXPORT_CLAIM
  CREATE_PARTICIPANT
  UPDATE_PARTICIPANT
  IMPORT_PARTICIPANT
  EXPORT_PARTICIPANT
}

type RolePermissionMinAggregate {
  id: Int
  roleId: Int
  permission: Permission
}

type RolePermissionSumAggregate {
  id: Int
  roleId: Int
}

type RolePermission {
  id: Int!
  roleId: Int
  permission: Permission!
  role: Role
}

type SubdistrictAvgAggregate {
  id: Float
  districtId: Float
}

type SubdistrictCountAggregate {
  id: Int!
  name: Int!
  districtId: Int!
  postalCode: Int!
  _all: Int!
}

type SubdistrictCount {
  address: Int!
}

type SubdistrictMaxAggregate {
  id: Int
  name: String
  districtId: Int
  postalCode: String
}

type SubdistrictMinAggregate {
  id: Int
  name: String
  districtId: Int
  postalCode: String
}

type SubdistrictSumAggregate {
  id: Int
  districtId: Int
}

"""Kelurahan"""
type Subdistrict {
  id: Int!

  """Nama Kelurahan"""
  name: String!
  districtId: Int!

  """Kode Pos"""
  postalCode: String!
  district: District!
  _count: SubdistrictCount!
}

type TagAvgAggregate {
  id: Float
}

type TagCountAggregate {
  id: Int!
  name: Int!
  color: Int!
  isException: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type TagCount {
  claims: Int!
}

type TagMaxAggregate {
  id: Int
  name: String
  color: Color
  isException: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

enum Color {
  WHITE
  BLUE
  RED
  YELLOW
  GREEN
}

type TagMinAggregate {
  id: Int
  name: String
  color: Color
  isException: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type TagSumAggregate {
  id: Int
}

type Tag {
  id: Int!
  name: String!
  color: Color!

  """Apakah pengecualian"""
  isException: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  claims: [Claim!]
  _count: TagCount!
}

type TransactionAvgAggregate {
  id: Float
  amount: Float
  accountId: Float
}

type TransactionCountAggregate {
  id: Int!
  amount: Int!
  transactionType: Int!
  description: Int!
  createdAt: Int!
  accountId: Int!
  proofId: Int!
  _all: Int!
}

type TransactionMaxAggregate {
  id: Int
  amount: Float
  transactionType: TransactionType
  description: String
  createdAt: DateTime
  accountId: Int
  proofId: String
}

enum TransactionType {
  CREDIT
  DEBIT
}

type TransactionMinAggregate {
  id: Int
  amount: Float
  transactionType: TransactionType
  description: String
  createdAt: DateTime
  accountId: Int
  proofId: String
}

type TransactionSumAggregate {
  id: Int
  amount: Float
  accountId: Int
}

type Transaction {
  id: Int!
  amount: Float!
  transactionType: TransactionType!
  description: String

  """
  TProses Transaksi:	Tanggal Proses Transaksi | ransfer:	Tanggal Transfer
  """
  createdAt: DateTime!
  accountId: Int!
  proofId: String

  """Transfer ke Tujuan nomor dana mana?"""
  account: Account!

  """Bukti Transfer"""
  proof: Document
  claimFinancial: ClaimFinancial
}

type UserAvgAggregate {
  roleId: Float
}

type UserCountAggregate {
  id: Int!
  fullName: Int!
  email: Int!
  emailVerifiedAt: Int!
  password: Int!
  profilePictureUrl: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  roleId: Int!
  _all: Int!
}

type UserCount {
  claimsInput: Int!
  claimActions: Int!
  announcementCreated: Int!
  notification: Int!
  claimsOnWait: Int!
  documentPrints: Int!
}

type UserMaxAggregate {
  id: String
  fullName: String
  email: String
  emailVerifiedAt: DateTime
  password: String
  profilePictureUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  roleId: Int
}

type UserMinAggregate {
  id: String
  fullName: String
  email: String
  emailVerifiedAt: DateTime
  password: String
  profilePictureUrl: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  roleId: Int
}

type UserSumAggregate {
  roleId: Int
}

type User {
  id: String!

  """Nama Lengkap"""
  fullName: String!
  email: String!
  emailVerifiedAt: DateTime
  password: String
  profilePictureUrl: String

  """Tgl.Masuk Peserta"""
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  roleId: Int!

  """
  catatan untuk web frontend, jangan menggunakan role.name sebagai identifikasi role, melainkan gunakan role.rolepermissions untuk melihat izin apa aja yang diberikan kepada user
  """
  role: Role!
  participant: Participant
  claimsInput: [Claim!]
  claimActions: [ClaimStatus!]
  announcementCreated: [Announcement!]
  notification: [Notification!]

  """claim-claim yang menunggu aksi dari user"""
  claimsOnWait: [Claim!]
  documentPrints: [Document!]
  _count: UserCount!
}

type ClaimCountQuantityByCustomRangeAndPeriodQuery {
  period: String
  quantityClaims: Int
}

type ClaimCountTotalPercentageVsCustomPeriodQuery {
  versus: String!
  percentage: Float!
  amount: Float!
}

type ClaimCountTotalByCustomRangeAndPeriodQuery {
  period: String
  totalClaims: Float
}

type ClaimCountQuantityByStatusQuery {
  status: ClaimStatusType!
  total: Int!
}

type BatchPayload {
  count: Float
}

type LoginResponse {
  """Akses token jwt"""
  accessToken: String!
  user: User!
}

type Query {
  """Deskripsinya ada disini loh"""
  programFindOne(where: ProgramWhereUniqueInput!): Program

  """Deskripsinya ada disini loh"""
  programFindMany(where: ProgramWhereInput, orderBy: [ProgramOrderByWithRelationInput!], cursor: ProgramWhereUniqueInput, take: Int, skip: Int, distinct: [ProgramScalarFieldEnum!]): [Program!]

  """Deskripsinya ada disini loh"""
  programFindFirst(where: ProgramWhereInput, orderBy: [ProgramOrderByWithRelationInput!], cursor: ProgramWhereUniqueInput, take: Int, skip: Int, distinct: [ProgramScalarFieldEnum!]): Program

  """Deskripsinya ada disini loh"""
  programAggregate(where: ProgramWhereInput, orderBy: [ProgramOrderByWithRelationInput!], cursor: ProgramWhereUniqueInput, take: Int, skip: Int, _count: ProgramCountAggregateInput, _avg: ProgramAvgAggregateInput, _sum: ProgramSumAggregateInput, _min: ProgramMinAggregateInput, _max: ProgramMaxAggregateInput): AggregateProgram

  """Deskripsinya ada disini loh"""
  programCount(where: ProgramWhereInput, orderBy: [ProgramOrderByWithRelationInput!], cursor: ProgramWhereUniqueInput, take: Int, skip: Int, distinct: [ProgramScalarFieldEnum!]): Float

  """Deskripsinya ada disini loh"""
  backupFindOne(where: BackupWhereUniqueInput!): Backup

  """Deskripsinya ada disini loh"""
  backupFindMany(where: BackupWhereInput, orderBy: [BackupOrderByWithRelationInput!], cursor: BackupWhereUniqueInput, take: Int, skip: Int, distinct: [BackupScalarFieldEnum!]): [Backup!]

  """Deskripsinya ada disini loh"""
  backupFindFirst(where: BackupWhereInput, orderBy: [BackupOrderByWithRelationInput!], cursor: BackupWhereUniqueInput, take: Int, skip: Int, distinct: [BackupScalarFieldEnum!]): Backup

  """Deskripsinya ada disini loh"""
  backupAggregate(where: BackupWhereInput, orderBy: [BackupOrderByWithRelationInput!], cursor: BackupWhereUniqueInput, take: Int, skip: Int, _count: BackupCountAggregateInput, _avg: BackupAvgAggregateInput, _sum: BackupSumAggregateInput, _min: BackupMinAggregateInput, _max: BackupMaxAggregateInput): AggregateBackup

  """Deskripsinya ada disini loh"""
  backupCount(where: BackupWhereInput, orderBy: [BackupOrderByWithRelationInput!], cursor: BackupWhereUniqueInput, take: Int, skip: Int, distinct: [BackupScalarFieldEnum!]): Float

  """Deskripsinya ada disini loh"""
  userFindOne(where: UserWhereUniqueInput!): User

  """Deskripsinya ada disini loh"""
  userFindMany(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]

  """Deskripsinya ada disini loh"""
  clinicFindMany(where: ClinicWhereInput, orderBy: [ClinicOrderByWithRelationInput!], cursor: ClinicWhereUniqueInput, take: Int, skip: Int, distinct: [ClinicScalarFieldEnum!]): [Clinic!]

  """Deskripsinya ada disini loh"""
  diseaseFindMany(where: DiseaseWhereInput, orderBy: [DiseaseOrderByWithRelationInput!], cursor: DiseaseWhereUniqueInput, take: Int, skip: Int, distinct: [DiseaseScalarFieldEnum!]): [Disease!]

  """Deskripsinya ada disini loh"""
  documentSourceFindMany: [String!]

  """Deskripsinya ada disini loh"""
  documentTypeFindMany: [String!]

  """Deskripsinya ada disini loh"""
  accountFindOne(where: AccountWhereUniqueInput!): Account

  """Deskripsinya ada disini loh"""
  claimFindOne(where: ClaimWhereUniqueInput!): Claim

  """Deskripsinya ada disini loh"""
  claimFindMany(where: ClaimWhereInput, orderBy: [ClaimOrderByWithRelationInput!], cursor: ClaimWhereUniqueInput, take: Int, skip: Int, distinct: [ClaimScalarFieldEnum!]): [Claim!]

  """Deskripsinya ada disini loh"""
  claimCount(where: ClaimWhereInput, orderBy: [ClaimOrderByWithRelationInput!], cursor: ClaimWhereUniqueInput, take: Int, skip: Int, distinct: [ClaimScalarFieldEnum!]): Float

  """Deskripsinya ada disini loh"""
  claimCountQuantityByCustomRangeAndPeriod(claimCountQuantityByCustomRangeAndPeriodArgs: ClaimCountQuantityByCustomRangeAndPeriodArgs!): [ClaimCountQuantityByCustomRangeAndPeriodQuery!]

  """Deskripsinya ada disini loh"""
  claimCountTotalPercentageVsCustomPeriod(claimCountTotalPercentageVsCustomPeriodArgs: ClaimCountTotalPercentageVsCustomPeriodArgs!): ClaimCountTotalPercentageVsCustomPeriodQuery

  """Deskripsinya ada disini loh"""
  claimCountTotalByCustomRangeAndPeriod(claimCountTotalByCustomRangeAndPeriodArgs: ClaimCountTotalByCustomRangeAndPeriodArgs!): [ClaimCountTotalByCustomRangeAndPeriodQuery!]

  """Deskripsinya ada disini loh"""
  claimCountQuantityByStatus: [ClaimCountQuantityByStatusQuery!]

  """Deskripsinya ada disini loh"""
  claimChannelFindMany: [String!]

  """Deskripsinya ada disini loh"""
  programTypeFindMany: [String!]

  """deskripsi nya disini loh"""
  claimExport: String!

  """Deskripsinya ada disini loh"""
  claimStatusFindMany(where: ClaimStatusWhereInput, orderBy: [ClaimStatusOrderByWithRelationInput!], cursor: ClaimStatusWhereUniqueInput, take: Int, skip: Int, distinct: [ClaimStatusScalarFieldEnum!]): [ClaimStatus!]

  """Deskripsinya ada disini loh"""
  claimStatusTypeFindMany: [String!]

  """Deskripsinya ada disini loh"""
  subdistrictFindMany(where: SubdistrictWhereInput, orderBy: [SubdistrictOrderByWithRelationInput!], cursor: SubdistrictWhereUniqueInput, take: Int, skip: Int, distinct: [SubdistrictScalarFieldEnum!]): [Subdistrict!]

  """Deskripsinya ada disini loh"""
  employmentPositionFindMany: [String!]

  """Deskripsinya ada disini loh"""
  branchFindMany(where: BranchWhereInput, orderBy: [BranchOrderByWithRelationInput!], cursor: BranchWhereUniqueInput, take: Int, skip: Int, distinct: [BranchScalarFieldEnum!]): [Branch!]

  """Deskripsinya ada disini loh"""
  groupFindMany(where: GroupWhereInput, orderBy: [GroupOrderByWithRelationInput!], cursor: GroupWhereUniqueInput, take: Int, skip: Int, distinct: [GroupScalarFieldEnum!]): [Group!]

  """Deskripsinya ada disini loh"""
  participantFindOne(where: ParticipantWhereUniqueInput!): Participant

  """Deskripsinya ada disini loh"""
  participantFindMany(where: ParticipantWhereInput, orderBy: [ParticipantOrderByWithRelationInput!], cursor: ParticipantWhereUniqueInput, take: Int, skip: Int, distinct: [ParticipantScalarFieldEnum!]): [Participant!]

  """Deskripsinya ada disini loh"""
  participantCount(where: ParticipantWhereInput, orderBy: [ParticipantOrderByWithRelationInput!], cursor: ParticipantWhereUniqueInput, take: Int, skip: Int, distinct: [ParticipantScalarFieldEnum!]): Float

  """Export participant data to excel file (xlsx)"""
  participantExport: String!

  """Deskripsinya ada disini loh"""
  admedicaStatusFindMany: [String!]

  """Deskripsinya ada disini loh"""
  regionFindMany(where: RegionWhereInput, orderBy: [RegionOrderByWithRelationInput!], cursor: RegionWhereUniqueInput, take: Int, skip: Int, distinct: [RegionScalarFieldEnum!]): [Region!]

  """Deskripsinya ada disini loh"""
  roleFindOne(where: RoleWhereUniqueInput!): Role

  """Deskripsinya ada disini loh"""
  roleFindMany(where: RoleWhereInput, orderBy: [RoleOrderByWithRelationInput!], cursor: RoleWhereUniqueInput, take: Int, skip: Int, distinct: [RoleScalarFieldEnum!]): [Role!]

  """Deskripsinya ada disini loh"""
  roleAggregate(where: RoleWhereInput, orderBy: [RoleOrderByWithRelationInput!], cursor: RoleWhereUniqueInput, take: Int, skip: Int, _count: RoleCountAggregateInput, _avg: RoleAvgAggregateInput, _sum: RoleSumAggregateInput, _min: RoleMinAggregateInput, _max: RoleMaxAggregateInput): AggregateRole

  """Deskripsinya ada disini loh"""
  roleCount(where: RoleWhereInput, orderBy: [RoleOrderByWithRelationInput!], cursor: RoleWhereUniqueInput, take: Int, skip: Int, distinct: [RoleScalarFieldEnum!]): Float

  """Deskripsinya ada disini loh"""
  permissionFindMany: [String!]

  """Deskripsinya ada disini loh"""
  tagFindMany(where: TagWhereInput, orderBy: [TagOrderByWithRelationInput!], cursor: TagWhereUniqueInput, take: Int, skip: Int, distinct: [TagScalarFieldEnum!]): [Tag!]

  """Deskripsinya ada disini loh"""
  tagColorFindMany: [String!]

  """Deskripsinya ada disini loh"""
  notificationFindMany(where: NotificationWhereInput, orderBy: [NotificationOrderByWithRelationInput!], cursor: NotificationWhereUniqueInput, take: Int, skip: Int, distinct: [NotificationScalarFieldEnum!]): [Notification!]

  """Deskripsinya ada disini loh"""
  notificationCount(where: NotificationWhereInput, orderBy: [NotificationOrderByWithRelationInput!], cursor: NotificationWhereUniqueInput, take: Int, skip: Int, distinct: [NotificationScalarFieldEnum!]): Float

  """Deskripsinya ada disini loh"""
  announcementFindMany(where: AnnouncementWhereInput, orderBy: [AnnouncementOrderByWithRelationInput!], cursor: AnnouncementWhereUniqueInput, take: Int, skip: Int, distinct: [AnnouncementScalarFieldEnum!]): [Announcement!]

  """Deskripsinya ada disini loh"""
  programParticipationToProgramsFindMany(where: ProgramParticipationToProgramsWhereInput, orderBy: [ProgramParticipationToProgramsOrderByWithRelationInput!], cursor: ProgramParticipationToProgramsWhereUniqueInput, take: Int, skip: Int, distinct: [ProgramParticipationToProgramsScalarFieldEnum!]): [ProgramParticipationToPrograms!]

  """Deskripsinya ada disini loh"""
  santunanHarianRawatInapPlanFindMany: [String!]
}

input ProgramWhereUniqueInput {
  id: Int
  AND: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  type: EnumProgramTypeFilter
  santunanHarianRawatInapPlan: EnumSantunanHarianRawatInapPlanNullableFilter
  tambahanBantuanRawatInapType: EnumTambahanBantuanRawatInapTypeNullableFilter
  maxAllowancePercentage: IntNullableFilter
  allowanceCeiling: FloatFilter
  allowanceCeilingPeriod: EnumPeriodNullableFilter
  allowanceQuota: IntNullableFilter
  allowanceQuotaPeriod: EnumPeriodNullableFilter
  claimPeriodMax: IntNullableFilter
  reclaimPeriodMax: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  programParticipations: ProgramParticipationToProgramsListRelationFilter
}

input ProgramWhereInput {
  AND: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  id: IntFilter
  type: EnumProgramTypeFilter
  santunanHarianRawatInapPlan: EnumSantunanHarianRawatInapPlanNullableFilter
  tambahanBantuanRawatInapType: EnumTambahanBantuanRawatInapTypeNullableFilter
  maxAllowancePercentage: IntNullableFilter
  allowanceCeiling: FloatFilter
  allowanceCeilingPeriod: EnumPeriodNullableFilter
  allowanceQuota: IntNullableFilter
  allowanceQuotaPeriod: EnumPeriodNullableFilter
  claimPeriodMax: IntNullableFilter
  reclaimPeriodMax: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  programParticipations: ProgramParticipationToProgramsListRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input EnumProgramTypeFilter {
  equals: ProgramType
  in: [ProgramType!]
  notIn: [ProgramType!]
  not: NestedEnumProgramTypeFilter
}

input NestedEnumProgramTypeFilter {
  equals: ProgramType
  in: [ProgramType!]
  notIn: [ProgramType!]
  not: NestedEnumProgramTypeFilter
}

input EnumSantunanHarianRawatInapPlanNullableFilter {
  equals: SantunanHarianRawatInapPlan
  in: [SantunanHarianRawatInapPlan!]
  notIn: [SantunanHarianRawatInapPlan!]
  not: NestedEnumSantunanHarianRawatInapPlanNullableFilter
}

input NestedEnumSantunanHarianRawatInapPlanNullableFilter {
  equals: SantunanHarianRawatInapPlan
  in: [SantunanHarianRawatInapPlan!]
  notIn: [SantunanHarianRawatInapPlan!]
  not: NestedEnumSantunanHarianRawatInapPlanNullableFilter
}

input EnumTambahanBantuanRawatInapTypeNullableFilter {
  equals: TambahanBantuanRawatInapType
  in: [TambahanBantuanRawatInapType!]
  notIn: [TambahanBantuanRawatInapType!]
  not: NestedEnumTambahanBantuanRawatInapTypeNullableFilter
}

input NestedEnumTambahanBantuanRawatInapTypeNullableFilter {
  equals: TambahanBantuanRawatInapType
  in: [TambahanBantuanRawatInapType!]
  notIn: [TambahanBantuanRawatInapType!]
  not: NestedEnumTambahanBantuanRawatInapTypeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input EnumPeriodNullableFilter {
  equals: Period
  in: [Period!]
  notIn: [Period!]
  not: NestedEnumPeriodNullableFilter
}

input NestedEnumPeriodNullableFilter {
  equals: Period
  in: [Period!]
  notIn: [Period!]
  not: NestedEnumPeriodNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input ProgramParticipationToProgramsListRelationFilter {
  every: ProgramParticipationToProgramsWhereInput
  some: ProgramParticipationToProgramsWhereInput
  none: ProgramParticipationToProgramsWhereInput
}

input ProgramParticipationToProgramsWhereInput {
  AND: [ProgramParticipationToProgramsWhereInput!]
  OR: [ProgramParticipationToProgramsWhereInput!]
  NOT: [ProgramParticipationToProgramsWhereInput!]
  description: StringNullableFilter
  isAvailable: BoolFilter
  allowanceCeilingRemaining: FloatFilter
  allowanceCeilingRemainingLastResetDate: DateTimeNullableFilter
  allowanceQuotaRemaining: IntNullableFilter
  allowanceQuotaRemainingLastResetDate: DateTimeNullableFilter
  updatedAt: DateTimeFilter
  programParticipationId: IntFilter
  programId: IntFilter
  programParticipation: ProgramParticipationRelationFilter
  program: ProgramRelationFilter
  claimPrograms: ClaimProgramListRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input ProgramParticipationRelationFilter {
  is: ProgramParticipationWhereInput
  isNot: ProgramParticipationWhereInput
}

input ProgramParticipationWhereInput {
  AND: [ProgramParticipationWhereInput!]
  OR: [ProgramParticipationWhereInput!]
  NOT: [ProgramParticipationWhereInput!]
  id: IntFilter
  bpjsNumber: StringNullableFilter
  nonActiveReason: StringNullableFilter
  effectiveDate: DateTimeFilter
  nonActiveDate: DateTimeNullableFilter
  santunanHarianRawatInapPlan: EnumSantunanHarianRawatInapPlanFilter
  fundingId: IntNullableFilter
  participant: ParticipantNullableRelationFilter
  funding: AccountNullableRelationFilter
  programParticipationToPrograms: ProgramParticipationToProgramsListRelationFilter
}

input EnumSantunanHarianRawatInapPlanFilter {
  equals: SantunanHarianRawatInapPlan
  in: [SantunanHarianRawatInapPlan!]
  notIn: [SantunanHarianRawatInapPlan!]
  not: NestedEnumSantunanHarianRawatInapPlanFilter
}

input NestedEnumSantunanHarianRawatInapPlanFilter {
  equals: SantunanHarianRawatInapPlan
  in: [SantunanHarianRawatInapPlan!]
  notIn: [SantunanHarianRawatInapPlan!]
  not: NestedEnumSantunanHarianRawatInapPlanFilter
}

input ParticipantNullableRelationFilter {
  is: ParticipantWhereInput
  isNot: ParticipantWhereInput
}

input ParticipantWhereInput {
  AND: [ParticipantWhereInput!]
  OR: [ParticipantWhereInput!]
  NOT: [ParticipantWhereInput!]
  gender: EnumGenderFilter
  birthDate: DateTimeFilter
  isActive: BoolFilter
  status: EnumParticipantStatusFilter
  userId: StringFilter
  relationId: StringNullableFilter
  employmentId: IntFilter
  bankAccountId: IntFilter
  contactInfoId: IntFilter
  programParticipationId: IntFilter
  user: UserRelationFilter
  relation: ParticipantNullableRelationFilter
  employment: EmploymentRelationFilter
  bankAccount: BankAccountRelationFilter
  contactInfo: ContactInfoRelationFilter
  programParticipation: ProgramParticipationRelationFilter
  claims: ClaimListRelationFilter
  relations: ParticipantListRelationFilter
}

input EnumGenderFilter {
  equals: Gender
  in: [Gender!]
  notIn: [Gender!]
  not: NestedEnumGenderFilter
}

input NestedEnumGenderFilter {
  equals: Gender
  in: [Gender!]
  notIn: [Gender!]
  not: NestedEnumGenderFilter
}

input EnumParticipantStatusFilter {
  equals: ParticipantStatus
  in: [ParticipantStatus!]
  notIn: [ParticipantStatus!]
  not: NestedEnumParticipantStatusFilter
}

input NestedEnumParticipantStatusFilter {
  equals: ParticipantStatus
  in: [ParticipantStatus!]
  notIn: [ParticipantStatus!]
  not: NestedEnumParticipantStatusFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  fullName: StringFilter
  email: StringFilter
  emailVerifiedAt: DateTimeNullableFilter
  password: StringNullableFilter
  profilePictureUrl: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  roleId: IntFilter
  role: RoleRelationFilter
  participant: ParticipantNullableRelationFilter
  claimsInput: ClaimListRelationFilter
  claimActions: ClaimStatusListRelationFilter
  announcementCreated: AnnouncementListRelationFilter
  notification: NotificationListRelationFilter
  claimsOnWait: ClaimListRelationFilter
  documentPrints: DocumentListRelationFilter
}

input RoleRelationFilter {
  is: RoleWhereInput
  isNot: RoleWhereInput
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringNullableFilter
  higherLevelThanId: IntNullableFilter
  roleType: EnumRoleTypeNullableFilter
  higherLevelThan: RoleNullableRelationFilter
  rolePermissions: RolePermissionListRelationFilter
  users: UserListRelationFilter
  lowerLevelThan: RoleListRelationFilter
}

input EnumRoleTypeNullableFilter {
  equals: RoleType
  in: [RoleType!]
  notIn: [RoleType!]
  not: NestedEnumRoleTypeNullableFilter
}

input NestedEnumRoleTypeNullableFilter {
  equals: RoleType
  in: [RoleType!]
  notIn: [RoleType!]
  not: NestedEnumRoleTypeNullableFilter
}

input RoleNullableRelationFilter {
  is: RoleWhereInput
  isNot: RoleWhereInput
}

input RolePermissionListRelationFilter {
  every: RolePermissionWhereInput
  some: RolePermissionWhereInput
  none: RolePermissionWhereInput
}

input RolePermissionWhereInput {
  AND: [RolePermissionWhereInput!]
  OR: [RolePermissionWhereInput!]
  NOT: [RolePermissionWhereInput!]
  id: IntFilter
  roleId: IntNullableFilter
  permission: EnumPermissionFilter
  role: RoleNullableRelationFilter
}

input EnumPermissionFilter {
  equals: Permission
  in: [Permission!]
  notIn: [Permission!]
  not: NestedEnumPermissionFilter
}

input NestedEnumPermissionFilter {
  equals: Permission
  in: [Permission!]
  notIn: [Permission!]
  not: NestedEnumPermissionFilter
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleListRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input ClaimListRelationFilter {
  every: ClaimWhereInput
  some: ClaimWhereInput
  none: ClaimWhereInput
}

input ClaimWhereInput {
  AND: [ClaimWhereInput!]
  OR: [ClaimWhereInput!]
  NOT: [ClaimWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  channel: EnumClaimChannelFilter
  admedicaStatus: EnumAdmedicaStatusFilter
  company: StringFilter
  participantId: StringFilter
  claimFinancialId: IntFilter
  claimProgramId: IntFilter
  inputedById: StringNullableFilter
  waitingForId: StringNullableFilter
  participant: ParticipantRelationFilter
  claimFinancials: ClaimFinancialRelationFilter
  claimProgram: ClaimProgramRelationFilter
  inputedBy: UserNullableRelationFilter
  waitingFor: UserNullableRelationFilter
  tags: TagListRelationFilter
  claimStatuses: ClaimStatusListRelationFilter
}

input EnumClaimChannelFilter {
  equals: ClaimChannel
  in: [ClaimChannel!]
  notIn: [ClaimChannel!]
  not: NestedEnumClaimChannelFilter
}

input NestedEnumClaimChannelFilter {
  equals: ClaimChannel
  in: [ClaimChannel!]
  notIn: [ClaimChannel!]
  not: NestedEnumClaimChannelFilter
}

input EnumAdmedicaStatusFilter {
  equals: AdmedicaStatus
  in: [AdmedicaStatus!]
  notIn: [AdmedicaStatus!]
  not: NestedEnumAdmedicaStatusFilter
}

input NestedEnumAdmedicaStatusFilter {
  equals: AdmedicaStatus
  in: [AdmedicaStatus!]
  notIn: [AdmedicaStatus!]
  not: NestedEnumAdmedicaStatusFilter
}

input ParticipantRelationFilter {
  is: ParticipantWhereInput
  isNot: ParticipantWhereInput
}

input ClaimFinancialRelationFilter {
  is: ClaimFinancialWhereInput
  isNot: ClaimFinancialWhereInput
}

input ClaimFinancialWhereInput {
  AND: [ClaimFinancialWhereInput!]
  OR: [ClaimFinancialWhereInput!]
  NOT: [ClaimFinancialWhereInput!]
  id: IntFilter
  totalInvoiceProofAmount: FloatFilter
  requestedAmount: FloatFilter
  paidAmount: FloatNullableFilter
  rejectedAmount: FloatNullableFilter
  previousBalance: FloatFilter
  remainingBalance: FloatFilter
  branchId: IntNullableFilter
  claimStatusId: IntNullableFilter
  transactionId: IntNullableFilter
  branchPayee: BranchNullableRelationFilter
  claim: ClaimNullableRelationFilter
  claimStatus: ClaimStatusNullableRelationFilter
  transaction: TransactionNullableRelationFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input NestedFloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input BranchNullableRelationFilter {
  is: BranchWhereInput
  isNot: BranchWhereInput
}

input BranchWhereInput {
  AND: [BranchWhereInput!]
  OR: [BranchWhereInput!]
  NOT: [BranchWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employment: EmploymentListRelationFilter
  claimFinancial: ClaimFinancialListRelationFilter
}

input EmploymentListRelationFilter {
  every: EmploymentWhereInput
  some: EmploymentWhereInput
  none: EmploymentWhereInput
}

input EmploymentWhereInput {
  AND: [EmploymentWhereInput!]
  OR: [EmploymentWhereInput!]
  NOT: [EmploymentWhereInput!]
  id: IntFilter
  employmentPosition: EnumPositionFilter
  branchId: IntFilter
  groupId: IntNullableFilter
  regionId: IntNullableFilter
  participant: ParticipantNullableRelationFilter
  branch: BranchRelationFilter
  group: GroupNullableRelationFilter
  region: RegionNullableRelationFilter
}

input EnumPositionFilter {
  equals: Position
  in: [Position!]
  notIn: [Position!]
  not: NestedEnumPositionFilter
}

input NestedEnumPositionFilter {
  equals: Position
  in: [Position!]
  notIn: [Position!]
  not: NestedEnumPositionFilter
}

input BranchRelationFilter {
  is: BranchWhereInput
  isNot: BranchWhereInput
}

input GroupNullableRelationFilter {
  is: GroupWhereInput
  isNot: GroupWhereInput
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employment: EmploymentListRelationFilter
}

input RegionNullableRelationFilter {
  is: RegionWhereInput
  isNot: RegionWhereInput
}

input RegionWhereInput {
  AND: [RegionWhereInput!]
  OR: [RegionWhereInput!]
  NOT: [RegionWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employment: EmploymentListRelationFilter
}

input ClaimFinancialListRelationFilter {
  every: ClaimFinancialWhereInput
  some: ClaimFinancialWhereInput
  none: ClaimFinancialWhereInput
}

input ClaimNullableRelationFilter {
  is: ClaimWhereInput
  isNot: ClaimWhereInput
}

input ClaimStatusNullableRelationFilter {
  is: ClaimStatusWhereInput
  isNot: ClaimStatusWhereInput
}

input ClaimStatusWhereInput {
  AND: [ClaimStatusWhereInput!]
  OR: [ClaimStatusWhereInput!]
  NOT: [ClaimStatusWhereInput!]
  id: IntFilter
  description: StringNullableFilter
  rejectionReason: StringNullableFilter
  createdAt: DateTimeFilter
  type: EnumClaimStatusTypeFilter
  changedById: StringFilter
  claimId: StringFilter
  rejectionLetterId: StringNullableFilter
  guaranteeLetterId: StringNullableFilter
  transactionLetterId: StringNullableFilter
  bookKeepingOrderId: StringNullableFilter
  changedBy: UserRelationFilter
  claim: ClaimRelationFilter
  rejectionLetter: DocumentNullableRelationFilter
  guaranteeLetter: DocumentNullableRelationFilter
  transactionLetter: DocumentNullableRelationFilter
  bookKeepingOrder: DocumentNullableRelationFilter
  claimFinancial: ClaimFinancialNullableRelationFilter
}

input EnumClaimStatusTypeFilter {
  equals: ClaimStatusType
  in: [ClaimStatusType!]
  notIn: [ClaimStatusType!]
  not: NestedEnumClaimStatusTypeFilter
}

input NestedEnumClaimStatusTypeFilter {
  equals: ClaimStatusType
  in: [ClaimStatusType!]
  notIn: [ClaimStatusType!]
  not: NestedEnumClaimStatusTypeFilter
}

input ClaimRelationFilter {
  is: ClaimWhereInput
  isNot: ClaimWhereInput
}

input DocumentNullableRelationFilter {
  is: DocumentWhereInput
  isNot: DocumentWhereInput
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  id: StringFilter
  uploadedFileUrl: StringNullableFilter
  pdfPath: StringNullableFilter
  docxPath: StringNullableFilter
  size: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  source: EnumDocumentSourceFilter
  type: EnumDocumentTypeFilter
  claimProgramId: IntNullableFilter
  printedby: UserListRelationFilter
  rejectionLetterOf: ClaimStatusNullableRelationFilter
  guaranteeLetterOf: ClaimStatusNullableRelationFilter
  transactionLetterOf: ClaimStatusNullableRelationFilter
  bookKeepingOrderOf: ClaimStatusNullableRelationFilter
  claimProgramm: ClaimProgramNullableRelationFilter
  invoiceProof: InvoiceProofNullableRelationFilter
  transaction: TransactionNullableRelationFilter
}

input EnumDocumentSourceFilter {
  equals: DocumentSource
  in: [DocumentSource!]
  notIn: [DocumentSource!]
  not: NestedEnumDocumentSourceFilter
}

input NestedEnumDocumentSourceFilter {
  equals: DocumentSource
  in: [DocumentSource!]
  notIn: [DocumentSource!]
  not: NestedEnumDocumentSourceFilter
}

input EnumDocumentTypeFilter {
  equals: DocumentType
  in: [DocumentType!]
  notIn: [DocumentType!]
  not: NestedEnumDocumentTypeFilter
}

input NestedEnumDocumentTypeFilter {
  equals: DocumentType
  in: [DocumentType!]
  notIn: [DocumentType!]
  not: NestedEnumDocumentTypeFilter
}

input ClaimProgramNullableRelationFilter {
  is: ClaimProgramWhereInput
  isNot: ClaimProgramWhereInput
}

input ClaimProgramWhereInput {
  AND: [ClaimProgramWhereInput!]
  OR: [ClaimProgramWhereInput!]
  NOT: [ClaimProgramWhereInput!]
  id: IntFilter
  expeditionDate: DateTimeNullableFilter
  isReclaim: BoolNullableFilter
  isReclaimNoticeLetterDate: DateTimeNullableFilter
  submissionNote: StringNullableFilter
  description: StringNullableFilter
  additionalNote: StringNullableFilter
  startTreatment: DateTimeNullableFilter
  endTreatment: DateTimeNullableFilter
  kurisRodaOrWalkerStoreName: StringNullableFilter
  diseaseId: IntNullableFilter
  clinicId: IntNullableFilter
  programParticipationToProgramsProgramParticipationId: IntFilter
  programParticipationToProgramsProgramId: IntFilter
  disease: DiseaseNullableRelationFilter
  clinics: ClinicNullableRelationFilter
  claim: ClaimNullableRelationFilter
  programParticipationToProgram: ProgramParticipationToProgramsRelationFilter
  documents: DocumentListRelationFilter
  invoiceProofs: InvoiceProofListRelationFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input DiseaseNullableRelationFilter {
  is: DiseaseWhereInput
  isNot: DiseaseWhereInput
}

input DiseaseWhereInput {
  AND: [DiseaseWhereInput!]
  OR: [DiseaseWhereInput!]
  NOT: [DiseaseWhereInput!]
  id: IntFilter
  code: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  claimProgram: ClaimProgramListRelationFilter
}

input ClaimProgramListRelationFilter {
  every: ClaimProgramWhereInput
  some: ClaimProgramWhereInput
  none: ClaimProgramWhereInput
}

input ClinicNullableRelationFilter {
  is: ClinicWhereInput
  isNot: ClinicWhereInput
}

input ClinicWhereInput {
  AND: [ClinicWhereInput!]
  OR: [ClinicWhereInput!]
  NOT: [ClinicWhereInput!]
  id: IntFilter
  code: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  claimProgram: ClaimProgramListRelationFilter
}

input ProgramParticipationToProgramsRelationFilter {
  is: ProgramParticipationToProgramsWhereInput
  isNot: ProgramParticipationToProgramsWhereInput
}

input DocumentListRelationFilter {
  every: DocumentWhereInput
  some: DocumentWhereInput
  none: DocumentWhereInput
}

input InvoiceProofListRelationFilter {
  every: InvoiceProofWhereInput
  some: InvoiceProofWhereInput
  none: InvoiceProofWhereInput
}

input InvoiceProofWhereInput {
  AND: [InvoiceProofWhereInput!]
  OR: [InvoiceProofWhereInput!]
  NOT: [InvoiceProofWhereInput!]
  id: IntFilter
  issuedDate: DateTimeFilter
  amount: FloatFilter
  documentProofId: StringFilter
  claimProgramId: IntNullableFilter
  documentProof: DocumentRelationFilter
  claimProgram: ClaimProgramNullableRelationFilter
}

input DocumentRelationFilter {
  is: DocumentWhereInput
  isNot: DocumentWhereInput
}

input InvoiceProofNullableRelationFilter {
  is: InvoiceProofWhereInput
  isNot: InvoiceProofWhereInput
}

input TransactionNullableRelationFilter {
  is: TransactionWhereInput
  isNot: TransactionWhereInput
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  id: IntFilter
  amount: FloatFilter
  transactionType: EnumTransactionTypeFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  accountId: IntFilter
  proofId: StringNullableFilter
  account: AccountRelationFilter
  proof: DocumentNullableRelationFilter
  claimFinancial: ClaimFinancialNullableRelationFilter
}

input EnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  notIn: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
}

input NestedEnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  notIn: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
}

input AccountRelationFilter {
  is: AccountWhereInput
  isNot: AccountWhereInput
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: IntFilter
  currentBalance: FloatFilter
  currentBalanceLastUpdate: DateTimeNullableFilter
  transactions: TransactionListRelationFilter
  programParticipation: ProgramParticipationListRelationFilter
}

input TransactionListRelationFilter {
  every: TransactionWhereInput
  some: TransactionWhereInput
  none: TransactionWhereInput
}

input ProgramParticipationListRelationFilter {
  every: ProgramParticipationWhereInput
  some: ProgramParticipationWhereInput
  none: ProgramParticipationWhereInput
}

input ClaimFinancialNullableRelationFilter {
  is: ClaimFinancialWhereInput
  isNot: ClaimFinancialWhereInput
}

input ClaimProgramRelationFilter {
  is: ClaimProgramWhereInput
  isNot: ClaimProgramWhereInput
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input TagListRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IntFilter
  name: StringFilter
  color: EnumColorFilter
  isException: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  claims: ClaimListRelationFilter
}

input EnumColorFilter {
  equals: Color
  in: [Color!]
  notIn: [Color!]
  not: NestedEnumColorFilter
}

input NestedEnumColorFilter {
  equals: Color
  in: [Color!]
  notIn: [Color!]
  not: NestedEnumColorFilter
}

input ClaimStatusListRelationFilter {
  every: ClaimStatusWhereInput
  some: ClaimStatusWhereInput
  none: ClaimStatusWhereInput
}

input AnnouncementListRelationFilter {
  every: AnnouncementWhereInput
  some: AnnouncementWhereInput
  none: AnnouncementWhereInput
}

input AnnouncementWhereInput {
  AND: [AnnouncementWhereInput!]
  OR: [AnnouncementWhereInput!]
  NOT: [AnnouncementWhereInput!]
  id: IntFilter
  title: StringFilter
  content: StringFilter
  imageUrl: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  createdById: StringFilter
  createdBy: UserRelationFilter
}

input NotificationListRelationFilter {
  every: NotificationWhereInput
  some: NotificationWhereInput
  none: NotificationWhereInput
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  id: IntFilter
  isRead: BoolFilter
  isCleared: BoolFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
}

input EmploymentRelationFilter {
  is: EmploymentWhereInput
  isNot: EmploymentWhereInput
}

input BankAccountRelationFilter {
  is: BankAccountWhereInput
  isNot: BankAccountWhereInput
}

input BankAccountWhereInput {
  AND: [BankAccountWhereInput!]
  OR: [BankAccountWhereInput!]
  NOT: [BankAccountWhereInput!]
  id: IntFilter
  accountNumber: FloatFilter
  accountName: StringFilter
  participant: ParticipantNullableRelationFilter
}

input ContactInfoRelationFilter {
  is: ContactInfoWhereInput
  isNot: ContactInfoWhereInput
}

input ContactInfoWhereInput {
  AND: [ContactInfoWhereInput!]
  OR: [ContactInfoWhereInput!]
  NOT: [ContactInfoWhereInput!]
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  addressId: IntFilter
  phones: PhoneListRelationFilter
  participant: ParticipantNullableRelationFilter
  address: AddressRelationFilter
}

input PhoneListRelationFilter {
  every: phoneWhereInput
  some: phoneWhereInput
  none: phoneWhereInput
}

input phoneWhereInput {
  AND: [phoneWhereInput!]
  OR: [phoneWhereInput!]
  NOT: [phoneWhereInput!]
  number: FloatFilter
  contactInfoId: IntFilter
  contactInfo: ContactInfoRelationFilter
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IntFilter
  address: StringFilter
  subdistrictId: IntFilter
  subdistrict: SubdistrictRelationFilter
  ContactInfo: ContactInfoListRelationFilter
}

input SubdistrictRelationFilter {
  is: SubdistrictWhereInput
  isNot: SubdistrictWhereInput
}

input SubdistrictWhereInput {
  AND: [SubdistrictWhereInput!]
  OR: [SubdistrictWhereInput!]
  NOT: [SubdistrictWhereInput!]
  id: IntFilter
  name: StringFilter
  districtId: IntFilter
  postalCode: StringFilter
  district: DistrictRelationFilter
  address: AddressListRelationFilter
}

input DistrictRelationFilter {
  is: DistrictWhereInput
  isNot: DistrictWhereInput
}

input DistrictWhereInput {
  AND: [DistrictWhereInput!]
  OR: [DistrictWhereInput!]
  NOT: [DistrictWhereInput!]
  id: IntFilter
  name: StringFilter
  cityId: IntFilter
  city: CityRelationFilter
  subdistricts: SubdistrictListRelationFilter
}

input CityRelationFilter {
  is: CityWhereInput
  isNot: CityWhereInput
}

input CityWhereInput {
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
  id: IntFilter
  name: StringFilter
  provinceId: IntFilter
  province: ProvinceRelationFilter
  districts: DistrictListRelationFilter
}

input ProvinceRelationFilter {
  is: ProvinceWhereInput
  isNot: ProvinceWhereInput
}

input ProvinceWhereInput {
  AND: [ProvinceWhereInput!]
  OR: [ProvinceWhereInput!]
  NOT: [ProvinceWhereInput!]
  id: IntFilter
  name: StringFilter
  cities: CityListRelationFilter
}

input CityListRelationFilter {
  every: CityWhereInput
  some: CityWhereInput
  none: CityWhereInput
}

input DistrictListRelationFilter {
  every: DistrictWhereInput
  some: DistrictWhereInput
  none: DistrictWhereInput
}

input SubdistrictListRelationFilter {
  every: SubdistrictWhereInput
  some: SubdistrictWhereInput
  none: SubdistrictWhereInput
}

input AddressListRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input ContactInfoListRelationFilter {
  every: ContactInfoWhereInput
  some: ContactInfoWhereInput
  none: ContactInfoWhereInput
}

input ParticipantListRelationFilter {
  every: ParticipantWhereInput
  some: ParticipantWhereInput
  none: ParticipantWhereInput
}

input AccountNullableRelationFilter {
  is: AccountWhereInput
  isNot: AccountWhereInput
}

input ProgramRelationFilter {
  is: ProgramWhereInput
  isNot: ProgramWhereInput
}

input ProgramOrderByWithRelationInput {
  id: SortOrder
  type: SortOrder
  santunanHarianRawatInapPlan: SortOrderInput
  tambahanBantuanRawatInapType: SortOrderInput
  maxAllowancePercentage: SortOrderInput
  allowanceCeiling: SortOrder
  allowanceCeilingPeriod: SortOrderInput
  allowanceQuota: SortOrderInput
  allowanceQuotaPeriod: SortOrderInput
  claimPeriodMax: SortOrderInput
  reclaimPeriodMax: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  programParticipations: ProgramParticipationToProgramsOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  sort: SortOrder!
  nulls: NullsOrder
}

enum NullsOrder {
  first
  last
}

input ProgramParticipationToProgramsOrderByRelationAggregateInput {
  _count: SortOrder
}

enum ProgramScalarFieldEnum {
  id
  type
  santunanHarianRawatInapPlan
  tambahanBantuanRawatInapType
  maxAllowancePercentage
  allowanceCeiling
  allowanceCeilingPeriod
  allowanceQuota
  allowanceQuotaPeriod
  claimPeriodMax
  reclaimPeriodMax
  createdAt
  updatedAt
  deletedAt
}

input ProgramCountAggregateInput {
  id: Boolean
  type: Boolean
  santunanHarianRawatInapPlan: Boolean
  tambahanBantuanRawatInapType: Boolean
  maxAllowancePercentage: Boolean
  allowanceCeiling: Boolean
  allowanceCeilingPeriod: Boolean
  allowanceQuota: Boolean
  allowanceQuotaPeriod: Boolean
  claimPeriodMax: Boolean
  reclaimPeriodMax: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
  _all: Boolean
}

input ProgramAvgAggregateInput {
  id: Boolean
  maxAllowancePercentage: Boolean
  allowanceCeiling: Boolean
  allowanceQuota: Boolean
  claimPeriodMax: Boolean
  reclaimPeriodMax: Boolean
}

input ProgramSumAggregateInput {
  id: Boolean
  maxAllowancePercentage: Boolean
  allowanceCeiling: Boolean
  allowanceQuota: Boolean
  claimPeriodMax: Boolean
  reclaimPeriodMax: Boolean
}

input ProgramMinAggregateInput {
  id: Boolean
  type: Boolean
  santunanHarianRawatInapPlan: Boolean
  tambahanBantuanRawatInapType: Boolean
  maxAllowancePercentage: Boolean
  allowanceCeiling: Boolean
  allowanceCeilingPeriod: Boolean
  allowanceQuota: Boolean
  allowanceQuotaPeriod: Boolean
  claimPeriodMax: Boolean
  reclaimPeriodMax: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
}

input ProgramMaxAggregateInput {
  id: Boolean
  type: Boolean
  santunanHarianRawatInapPlan: Boolean
  tambahanBantuanRawatInapType: Boolean
  maxAllowancePercentage: Boolean
  allowanceCeiling: Boolean
  allowanceCeilingPeriod: Boolean
  allowanceQuota: Boolean
  allowanceQuotaPeriod: Boolean
  claimPeriodMax: Boolean
  reclaimPeriodMax: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
}

input BackupWhereUniqueInput {
  id: Int
  AND: [BackupWhereInput!]
  OR: [BackupWhereInput!]
  NOT: [BackupWhereInput!]
  path: StringNullableFilter
  isSuccessful: BoolFilter
  type: EnumBackupTypeFilter
  executionType: EnumExecutionTypeFilter
  createdAt: DateTimeFilter
}

input BackupWhereInput {
  AND: [BackupWhereInput!]
  OR: [BackupWhereInput!]
  NOT: [BackupWhereInput!]
  id: IntFilter
  path: StringNullableFilter
  isSuccessful: BoolFilter
  type: EnumBackupTypeFilter
  executionType: EnumExecutionTypeFilter
  createdAt: DateTimeFilter
}

input EnumBackupTypeFilter {
  equals: BackupType
  in: [BackupType!]
  notIn: [BackupType!]
  not: NestedEnumBackupTypeFilter
}

input NestedEnumBackupTypeFilter {
  equals: BackupType
  in: [BackupType!]
  notIn: [BackupType!]
  not: NestedEnumBackupTypeFilter
}

input EnumExecutionTypeFilter {
  equals: ExecutionType
  in: [ExecutionType!]
  notIn: [ExecutionType!]
  not: NestedEnumExecutionTypeFilter
}

input NestedEnumExecutionTypeFilter {
  equals: ExecutionType
  in: [ExecutionType!]
  notIn: [ExecutionType!]
  not: NestedEnumExecutionTypeFilter
}

input BackupOrderByWithRelationInput {
  id: SortOrder
  path: SortOrderInput
  isSuccessful: SortOrder
  type: SortOrder
  executionType: SortOrder
  createdAt: SortOrder
}

enum BackupScalarFieldEnum {
  id
  path
  isSuccessful
  type
  executionType
  createdAt
}

input BackupCountAggregateInput {
  id: Boolean
  path: Boolean
  isSuccessful: Boolean
  type: Boolean
  executionType: Boolean
  createdAt: Boolean
  _all: Boolean
}

input BackupAvgAggregateInput {
  id: Boolean
}

input BackupSumAggregateInput {
  id: Boolean
}

input BackupMinAggregateInput {
  id: Boolean
  path: Boolean
  isSuccessful: Boolean
  type: Boolean
  executionType: Boolean
  createdAt: Boolean
}

input BackupMaxAggregateInput {
  id: Boolean
  path: Boolean
  isSuccessful: Boolean
  type: Boolean
  executionType: Boolean
  createdAt: Boolean
}

input UserWhereUniqueInput {
  id: String
  email: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  fullName: StringFilter
  emailVerifiedAt: DateTimeNullableFilter
  password: StringNullableFilter
  profilePictureUrl: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  roleId: IntFilter
  role: RoleRelationFilter
  participant: ParticipantNullableRelationFilter
  claimsInput: ClaimListRelationFilter
  claimActions: ClaimStatusListRelationFilter
  announcementCreated: AnnouncementListRelationFilter
  notification: NotificationListRelationFilter
  claimsOnWait: ClaimListRelationFilter
  documentPrints: DocumentListRelationFilter
}

input UserOrderByWithRelationInput {
  id: SortOrder
  fullName: SortOrder
  email: SortOrder
  emailVerifiedAt: SortOrderInput
  password: SortOrderInput
  profilePictureUrl: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  roleId: SortOrder
  role: RoleOrderByWithRelationInput
  participant: ParticipantOrderByWithRelationInput
  claimsInput: ClaimOrderByRelationAggregateInput
  claimActions: ClaimStatusOrderByRelationAggregateInput
  announcementCreated: AnnouncementOrderByRelationAggregateInput
  notification: NotificationOrderByRelationAggregateInput
  claimsOnWait: ClaimOrderByRelationAggregateInput
  documentPrints: DocumentOrderByRelationAggregateInput
}

input RoleOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  description: SortOrderInput
  higherLevelThanId: SortOrderInput
  roleType: SortOrderInput
  higherLevelThan: RoleOrderByWithRelationInput
  rolePermissions: RolePermissionOrderByRelationAggregateInput
  users: UserOrderByRelationAggregateInput
  lowerLevelThan: RoleOrderByRelationAggregateInput
}

input RolePermissionOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input RoleOrderByRelationAggregateInput {
  _count: SortOrder
}

input ParticipantOrderByWithRelationInput {
  gender: SortOrder
  birthDate: SortOrder
  isActive: SortOrder
  status: SortOrder
  userId: SortOrder
  relationId: SortOrderInput
  employmentId: SortOrder
  bankAccountId: SortOrder
  contactInfoId: SortOrder
  programParticipationId: SortOrder
  user: UserOrderByWithRelationInput
  relation: ParticipantOrderByWithRelationInput
  employment: EmploymentOrderByWithRelationInput
  bankAccount: BankAccountOrderByWithRelationInput
  contactInfo: ContactInfoOrderByWithRelationInput
  programParticipation: ProgramParticipationOrderByWithRelationInput
  claims: ClaimOrderByRelationAggregateInput
  relations: ParticipantOrderByRelationAggregateInput
}

input EmploymentOrderByWithRelationInput {
  id: SortOrder
  employmentPosition: SortOrder
  branchId: SortOrder
  groupId: SortOrderInput
  regionId: SortOrderInput
  participant: ParticipantOrderByWithRelationInput
  branch: BranchOrderByWithRelationInput
  group: GroupOrderByWithRelationInput
  region: RegionOrderByWithRelationInput
}

input BranchOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  employment: EmploymentOrderByRelationAggregateInput
  claimFinancial: ClaimFinancialOrderByRelationAggregateInput
}

input EmploymentOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClaimFinancialOrderByRelationAggregateInput {
  _count: SortOrder
}

input GroupOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  employment: EmploymentOrderByRelationAggregateInput
}

input RegionOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  employment: EmploymentOrderByRelationAggregateInput
}

input BankAccountOrderByWithRelationInput {
  id: SortOrder
  accountNumber: SortOrder
  accountName: SortOrder
  participant: ParticipantOrderByWithRelationInput
}

input ContactInfoOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  addressId: SortOrder
  phones: phoneOrderByRelationAggregateInput
  participant: ParticipantOrderByWithRelationInput
  address: AddressOrderByWithRelationInput
}

input phoneOrderByRelationAggregateInput {
  _count: SortOrder
}

input AddressOrderByWithRelationInput {
  id: SortOrder
  address: SortOrder
  subdistrictId: SortOrder
  subdistrict: SubdistrictOrderByWithRelationInput
  ContactInfo: ContactInfoOrderByRelationAggregateInput
}

input SubdistrictOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  districtId: SortOrder
  postalCode: SortOrder
  district: DistrictOrderByWithRelationInput
  address: AddressOrderByRelationAggregateInput
}

input DistrictOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  cityId: SortOrder
  city: CityOrderByWithRelationInput
  subdistricts: SubdistrictOrderByRelationAggregateInput
}

input CityOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  provinceId: SortOrder
  province: ProvinceOrderByWithRelationInput
  districts: DistrictOrderByRelationAggregateInput
}

input ProvinceOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  cities: CityOrderByRelationAggregateInput
}

input CityOrderByRelationAggregateInput {
  _count: SortOrder
}

input DistrictOrderByRelationAggregateInput {
  _count: SortOrder
}

input SubdistrictOrderByRelationAggregateInput {
  _count: SortOrder
}

input AddressOrderByRelationAggregateInput {
  _count: SortOrder
}

input ContactInfoOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProgramParticipationOrderByWithRelationInput {
  id: SortOrder
  bpjsNumber: SortOrderInput
  nonActiveReason: SortOrderInput
  effectiveDate: SortOrder
  nonActiveDate: SortOrderInput
  santunanHarianRawatInapPlan: SortOrder
  fundingId: SortOrderInput
  participant: ParticipantOrderByWithRelationInput
  funding: AccountOrderByWithRelationInput
  programParticipationToPrograms: ProgramParticipationToProgramsOrderByRelationAggregateInput
}

input AccountOrderByWithRelationInput {
  id: SortOrder
  currentBalance: SortOrder
  currentBalanceLastUpdate: SortOrderInput
  transactions: TransactionOrderByRelationAggregateInput
  programParticipation: ProgramParticipationOrderByRelationAggregateInput
}

input TransactionOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProgramParticipationOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClaimOrderByRelationAggregateInput {
  _count: SortOrder
}

input ParticipantOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClaimStatusOrderByRelationAggregateInput {
  _count: SortOrder
}

input AnnouncementOrderByRelationAggregateInput {
  _count: SortOrder
}

input NotificationOrderByRelationAggregateInput {
  _count: SortOrder
}

input DocumentOrderByRelationAggregateInput {
  _count: SortOrder
}

enum UserScalarFieldEnum {
  id
  fullName
  email
  emailVerifiedAt
  password
  profilePictureUrl
  createdAt
  updatedAt
  deletedAt
  roleId
}

input ClinicOrderByWithRelationInput {
  id: SortOrder
  code: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  claimProgram: ClaimProgramOrderByRelationAggregateInput
}

input ClaimProgramOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClinicWhereUniqueInput {
  id: Int
  AND: [ClinicWhereInput!]
  OR: [ClinicWhereInput!]
  NOT: [ClinicWhereInput!]
  code: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  claimProgram: ClaimProgramListRelationFilter
}

enum ClinicScalarFieldEnum {
  id
  code
  name
  createdAt
  updatedAt
}

input DiseaseOrderByWithRelationInput {
  id: SortOrder
  code: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  claimProgram: ClaimProgramOrderByRelationAggregateInput
}

input DiseaseWhereUniqueInput {
  id: Int
  AND: [DiseaseWhereInput!]
  OR: [DiseaseWhereInput!]
  NOT: [DiseaseWhereInput!]
  code: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  claimProgram: ClaimProgramListRelationFilter
}

enum DiseaseScalarFieldEnum {
  id
  code
  name
  createdAt
  updatedAt
}

input AccountWhereUniqueInput {
  id: Int
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  currentBalance: FloatFilter
  currentBalanceLastUpdate: DateTimeNullableFilter
  transactions: TransactionListRelationFilter
  programParticipation: ProgramParticipationListRelationFilter
}

input ClaimWhereUniqueInput {
  id: String
  claimFinancialId: Int
  claimProgramId: Int
  AND: [ClaimWhereInput!]
  OR: [ClaimWhereInput!]
  NOT: [ClaimWhereInput!]
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  channel: EnumClaimChannelFilter
  admedicaStatus: EnumAdmedicaStatusFilter
  company: StringFilter
  participantId: StringFilter
  inputedById: StringNullableFilter
  waitingForId: StringNullableFilter
  participant: ParticipantRelationFilter
  claimFinancials: ClaimFinancialRelationFilter
  claimProgram: ClaimProgramRelationFilter
  inputedBy: UserNullableRelationFilter
  waitingFor: UserNullableRelationFilter
  tags: TagListRelationFilter
  claimStatuses: ClaimStatusListRelationFilter
}

input ClaimOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  channel: SortOrder
  admedicaStatus: SortOrder
  company: SortOrder
  participantId: SortOrder
  claimFinancialId: SortOrder
  claimProgramId: SortOrder
  inputedById: SortOrderInput
  waitingForId: SortOrderInput
  participant: ParticipantOrderByWithRelationInput
  claimFinancials: ClaimFinancialOrderByWithRelationInput
  claimProgram: ClaimProgramOrderByWithRelationInput
  inputedBy: UserOrderByWithRelationInput
  waitingFor: UserOrderByWithRelationInput
  tags: TagOrderByRelationAggregateInput
  claimStatuses: ClaimStatusOrderByRelationAggregateInput
}

input ClaimFinancialOrderByWithRelationInput {
  id: SortOrder
  totalInvoiceProofAmount: SortOrder
  requestedAmount: SortOrder
  paidAmount: SortOrderInput
  rejectedAmount: SortOrderInput
  previousBalance: SortOrder
  remainingBalance: SortOrder
  branchId: SortOrderInput
  claimStatusId: SortOrderInput
  transactionId: SortOrderInput
  branchPayee: BranchOrderByWithRelationInput
  claim: ClaimOrderByWithRelationInput
  claimStatus: ClaimStatusOrderByWithRelationInput
  transaction: TransactionOrderByWithRelationInput
}

input ClaimStatusOrderByWithRelationInput {
  id: SortOrder
  description: SortOrderInput
  rejectionReason: SortOrderInput
  createdAt: SortOrder
  type: SortOrder
  changedById: SortOrder
  claimId: SortOrder
  rejectionLetterId: SortOrderInput
  guaranteeLetterId: SortOrderInput
  transactionLetterId: SortOrderInput
  bookKeepingOrderId: SortOrderInput
  changedBy: UserOrderByWithRelationInput
  claim: ClaimOrderByWithRelationInput
  rejectionLetter: DocumentOrderByWithRelationInput
  guaranteeLetter: DocumentOrderByWithRelationInput
  transactionLetter: DocumentOrderByWithRelationInput
  bookKeepingOrder: DocumentOrderByWithRelationInput
  claimFinancial: ClaimFinancialOrderByWithRelationInput
}

input DocumentOrderByWithRelationInput {
  id: SortOrder
  uploadedFileUrl: SortOrderInput
  pdfPath: SortOrderInput
  docxPath: SortOrderInput
  size: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  source: SortOrder
  type: SortOrder
  claimProgramId: SortOrderInput
  printedby: UserOrderByRelationAggregateInput
  rejectionLetterOf: ClaimStatusOrderByWithRelationInput
  guaranteeLetterOf: ClaimStatusOrderByWithRelationInput
  transactionLetterOf: ClaimStatusOrderByWithRelationInput
  bookKeepingOrderOf: ClaimStatusOrderByWithRelationInput
  claimProgramm: ClaimProgramOrderByWithRelationInput
  invoiceProof: InvoiceProofOrderByWithRelationInput
  transaction: TransactionOrderByWithRelationInput
}

input ClaimProgramOrderByWithRelationInput {
  id: SortOrder
  expeditionDate: SortOrderInput
  isReclaim: SortOrderInput
  isReclaimNoticeLetterDate: SortOrderInput
  submissionNote: SortOrderInput
  description: SortOrderInput
  additionalNote: SortOrderInput
  startTreatment: SortOrderInput
  endTreatment: SortOrderInput
  kurisRodaOrWalkerStoreName: SortOrderInput
  diseaseId: SortOrderInput
  clinicId: SortOrderInput
  programParticipationToProgramsProgramParticipationId: SortOrder
  programParticipationToProgramsProgramId: SortOrder
  disease: DiseaseOrderByWithRelationInput
  clinics: ClinicOrderByWithRelationInput
  claim: ClaimOrderByWithRelationInput
  programParticipationToProgram: ProgramParticipationToProgramsOrderByWithRelationInput
  documents: DocumentOrderByRelationAggregateInput
  invoiceProofs: InvoiceProofOrderByRelationAggregateInput
}

input ProgramParticipationToProgramsOrderByWithRelationInput {
  description: SortOrderInput
  isAvailable: SortOrder
  allowanceCeilingRemaining: SortOrder
  allowanceCeilingRemainingLastResetDate: SortOrderInput
  allowanceQuotaRemaining: SortOrderInput
  allowanceQuotaRemainingLastResetDate: SortOrderInput
  updatedAt: SortOrder
  programParticipationId: SortOrder
  programId: SortOrder
  programParticipation: ProgramParticipationOrderByWithRelationInput
  program: ProgramOrderByWithRelationInput
  claimPrograms: ClaimProgramOrderByRelationAggregateInput
}

input InvoiceProofOrderByRelationAggregateInput {
  _count: SortOrder
}

input InvoiceProofOrderByWithRelationInput {
  id: SortOrder
  issuedDate: SortOrder
  amount: SortOrder
  documentProofId: SortOrder
  claimProgramId: SortOrderInput
  documentProof: DocumentOrderByWithRelationInput
  claimProgram: ClaimProgramOrderByWithRelationInput
}

input TransactionOrderByWithRelationInput {
  id: SortOrder
  amount: SortOrder
  transactionType: SortOrder
  description: SortOrderInput
  createdAt: SortOrder
  accountId: SortOrder
  proofId: SortOrderInput
  account: AccountOrderByWithRelationInput
  proof: DocumentOrderByWithRelationInput
  claimFinancial: ClaimFinancialOrderByWithRelationInput
}

input TagOrderByRelationAggregateInput {
  _count: SortOrder
}

enum ClaimScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  channel
  admedicaStatus
  company
  participantId
  claimFinancialId
  claimProgramId
  inputedById
  waitingForId
}

input ClaimCountQuantityByCustomRangeAndPeriodArgs {
  start: DateTime!
  end: DateTime!
  period: Period!
}

input ClaimCountTotalPercentageVsCustomPeriodArgs {
  period: Period!
}

input ClaimCountTotalByCustomRangeAndPeriodArgs {
  start: DateTime!
  end: DateTime!
  period: Period!
}

input ClaimStatusWhereUniqueInput {
  id: Int
  rejectionLetterId: String
  guaranteeLetterId: String
  transactionLetterId: String
  bookKeepingOrderId: String
  AND: [ClaimStatusWhereInput!]
  OR: [ClaimStatusWhereInput!]
  NOT: [ClaimStatusWhereInput!]
  description: StringNullableFilter
  rejectionReason: StringNullableFilter
  createdAt: DateTimeFilter
  type: EnumClaimStatusTypeFilter
  changedById: StringFilter
  claimId: StringFilter
  changedBy: UserRelationFilter
  claim: ClaimRelationFilter
  rejectionLetter: DocumentNullableRelationFilter
  guaranteeLetter: DocumentNullableRelationFilter
  transactionLetter: DocumentNullableRelationFilter
  bookKeepingOrder: DocumentNullableRelationFilter
  claimFinancial: ClaimFinancialNullableRelationFilter
}

enum ClaimStatusScalarFieldEnum {
  id
  description
  rejectionReason
  createdAt
  type
  changedById
  claimId
  rejectionLetterId
  guaranteeLetterId
  transactionLetterId
  bookKeepingOrderId
}

input SubdistrictWhereUniqueInput {
  id: Int
  AND: [SubdistrictWhereInput!]
  OR: [SubdistrictWhereInput!]
  NOT: [SubdistrictWhereInput!]
  name: StringFilter
  districtId: IntFilter
  postalCode: StringFilter
  district: DistrictRelationFilter
  address: AddressListRelationFilter
}

enum SubdistrictScalarFieldEnum {
  id
  name
  districtId
  postalCode
}

input BranchWhereUniqueInput {
  id: Int
  AND: [BranchWhereInput!]
  OR: [BranchWhereInput!]
  NOT: [BranchWhereInput!]
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employment: EmploymentListRelationFilter
  claimFinancial: ClaimFinancialListRelationFilter
}

enum BranchScalarFieldEnum {
  id
  name
  createdAt
  updatedAt
}

input GroupWhereUniqueInput {
  id: Int
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employment: EmploymentListRelationFilter
}

enum GroupScalarFieldEnum {
  id
  name
  createdAt
  updatedAt
}

input ParticipantWhereUniqueInput {
  userId: String
  employmentId: Int
  bankAccountId: Int
  contactInfoId: Int
  programParticipationId: Int
  AND: [ParticipantWhereInput!]
  OR: [ParticipantWhereInput!]
  NOT: [ParticipantWhereInput!]
  gender: EnumGenderFilter
  birthDate: DateTimeFilter
  isActive: BoolFilter
  status: EnumParticipantStatusFilter
  relationId: StringNullableFilter
  user: UserRelationFilter
  relation: ParticipantNullableRelationFilter
  employment: EmploymentRelationFilter
  bankAccount: BankAccountRelationFilter
  contactInfo: ContactInfoRelationFilter
  programParticipation: ProgramParticipationRelationFilter
  claims: ClaimListRelationFilter
  relations: ParticipantListRelationFilter
}

enum ParticipantScalarFieldEnum {
  gender
  birthDate
  isActive
  status
  userId
  relationId
  employmentId
  bankAccountId
  contactInfoId
  programParticipationId
}

input RegionWhereUniqueInput {
  id: Int
  AND: [RegionWhereInput!]
  OR: [RegionWhereInput!]
  NOT: [RegionWhereInput!]
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  employment: EmploymentListRelationFilter
}

enum RegionScalarFieldEnum {
  id
  name
  createdAt
  updatedAt
}

input RoleWhereUniqueInput {
  id: Int
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  name: StringFilter
  description: StringNullableFilter
  higherLevelThanId: IntNullableFilter
  roleType: EnumRoleTypeNullableFilter
  higherLevelThan: RoleNullableRelationFilter
  rolePermissions: RolePermissionListRelationFilter
  users: UserListRelationFilter
  lowerLevelThan: RoleListRelationFilter
}

enum RoleScalarFieldEnum {
  id
  name
  description
  higherLevelThanId
  roleType
}

input RoleCountAggregateInput {
  id: Boolean
  name: Boolean
  description: Boolean
  higherLevelThanId: Boolean
  roleType: Boolean
  _all: Boolean
}

input RoleAvgAggregateInput {
  id: Boolean
  higherLevelThanId: Boolean
}

input RoleSumAggregateInput {
  id: Boolean
  higherLevelThanId: Boolean
}

input RoleMinAggregateInput {
  id: Boolean
  name: Boolean
  description: Boolean
  higherLevelThanId: Boolean
  roleType: Boolean
}

input RoleMaxAggregateInput {
  id: Boolean
  name: Boolean
  description: Boolean
  higherLevelThanId: Boolean
  roleType: Boolean
}

input TagOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  color: SortOrder
  isException: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  claims: ClaimOrderByRelationAggregateInput
}

input TagWhereUniqueInput {
  id: Int
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  name: StringFilter
  color: EnumColorFilter
  isException: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  claims: ClaimListRelationFilter
}

enum TagScalarFieldEnum {
  id
  name
  color
  isException
  createdAt
  updatedAt
}

input NotificationOrderByWithRelationInput {
  id: SortOrder
  isRead: SortOrder
  isCleared: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
}

input NotificationWhereUniqueInput {
  id: Int
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  isRead: BoolFilter
  isCleared: BoolFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
}

enum NotificationScalarFieldEnum {
  id
  title
  subtitle
  content
  isRead
  isCleared
  deepLink
  fcmToken
  createdAt
  updatedAt
  userId
}

input AnnouncementOrderByWithRelationInput {
  id: SortOrder
  title: SortOrder
  content: SortOrder
  imageUrl: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  createdById: SortOrder
  createdBy: UserOrderByWithRelationInput
}

input AnnouncementWhereUniqueInput {
  id: Int
  AND: [AnnouncementWhereInput!]
  OR: [AnnouncementWhereInput!]
  NOT: [AnnouncementWhereInput!]
  title: StringFilter
  content: StringFilter
  imageUrl: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  createdById: StringFilter
  createdBy: UserRelationFilter
}

enum AnnouncementScalarFieldEnum {
  id
  title
  content
  imageUrl
  createdAt
  updatedAt
  createdById
}

input ProgramParticipationToProgramsWhereUniqueInput {
  programParticipationId_programId: ProgramParticipationToProgramsProgramParticipationIdProgramIdCompoundUniqueInput
  AND: [ProgramParticipationToProgramsWhereInput!]
  OR: [ProgramParticipationToProgramsWhereInput!]
  NOT: [ProgramParticipationToProgramsWhereInput!]
  description: StringNullableFilter
  isAvailable: BoolFilter
  allowanceCeilingRemaining: FloatFilter
  allowanceCeilingRemainingLastResetDate: DateTimeNullableFilter
  allowanceQuotaRemaining: IntNullableFilter
  allowanceQuotaRemainingLastResetDate: DateTimeNullableFilter
  updatedAt: DateTimeFilter
  programParticipationId: IntFilter
  programId: IntFilter
  programParticipation: ProgramParticipationRelationFilter
  program: ProgramRelationFilter
  claimPrograms: ClaimProgramListRelationFilter
}

input ProgramParticipationToProgramsProgramParticipationIdProgramIdCompoundUniqueInput {
  programParticipationId: Int!
  programId: Int!
}

enum ProgramParticipationToProgramsScalarFieldEnum {
  description
  isAvailable
  allowanceCeilingRemaining
  allowanceCeilingRemainingLastResetDate
  allowanceQuotaRemaining
  allowanceQuotaRemainingLastResetDate
  updatedAt
  programParticipationId
  programId
}

type Mutation {
  """Deskripsinya ada disini loh"""
  programCreateOne(data: ProgramCreateInput!): Program

  """Deskripsinya ada disini loh"""
  programCreateMany(data: [ProgramCreateManyInput!]!, skipDuplicates: Boolean): BatchPayload

  """Deskripsinya ada disini loh"""
  programUpdateOne(data: ProgramUpdateInput!, where: ProgramWhereUniqueInput!): Program

  """Deskripsinya ada disini loh"""
  programUpdateMany(data: ProgramUpdateManyMutationInput!, where: ProgramWhereInput): Program

  """Deskripsinya ada disini loh"""
  programDelete(where: ProgramWhereUniqueInput!): Boolean!

  """Deskripsinya ada disini loh"""
  programDeleteMany(where: ProgramWhereInput): Boolean!

  """Deskripsinya ada disini loh"""
  backupCreateOne(data: BackupCreateInput!): Backup

  """Deskripsinya ada disini loh"""
  backupCreateMany(data: [BackupCreateManyInput!]!, skipDuplicates: Boolean): BatchPayload

  """Deskripsinya ada disini loh"""
  backupUpdateOne(data: BackupUpdateInput!, where: BackupWhereUniqueInput!): Backup

  """Deskripsinya ada disini loh"""
  backupUpdateMany(data: BackupUpdateManyMutationInput!, where: BackupWhereInput): Backup

  """Deskripsinya ada disini loh"""
  backupDelete(where: BackupWhereUniqueInput!): Boolean!

  """Deskripsinya ada disini loh"""
  backupDeleteMany(where: BackupWhereInput): Boolean!

  """
  catatan untuk web frontend, jangan menggunakan role.name sebagai identifikasi role, melainkan gunakan role.rolepermissions untuk melihat izin apa aja yang diberikan kepada user
  """
  authLogin(loginArgs: LoginArgs!): LoginResponse

  """Deskripsinya ada disini loh"""
  userCreateOne(data: UserCreateInput!): User

  """Deskripsinya ada disini loh"""
  userUpdateOne(data: UserUpdateInput!, where: UserWhereUniqueInput!): User

  """Deskripsinya ada disini loh"""
  userDelete(where: UserWhereUniqueInput!): Boolean!

  """Deskripsinya ada disini loh"""
  documentCreateOne(data: DocumentCreateInput!): Document

  """Deskripsinya ada disini loh"""
  documentDeleteOne(where: DocumentWhereUniqueInput!): Boolean!

  """
  Header wajib ada apollo-require-preflight = true agar tidak CSRF error. File JPG akan dicompress
  """
  uploadSingleFile(file: Upload): String

  """Deskripsinya ada disini loh"""
  claimCreateOne(data: ClaimCreateInput!): Claim

  """
  Header wajib ada apollo-require-preflight = true agar tidak CSRF error. File JPG akan dicompress
  """
  claimImport(file: Upload): Boolean

  """Deskripsinya ada disini loh"""
  claimUpdateOne(claimUpdateOneOfStatusArgs: ClaimUpdateOneOfStatusArgs!): Claim

  """
  Header wajib ada apollo-require-preflight = true agar tidak CSRF error. File JPG akan dicompress
  """
  claimFileUpload(file: Upload): String

  """Deskripsinya ada disini loh"""
  claimStatusCreateOne(data: ClaimStatusCreateInput!): ClaimStatus

  """Deskripsinya ada disini loh"""
  contactInfoUpdateOne(data: ContactInfoUpdateInput!, where: ContactInfoWhereUniqueInput!): ContactInfo

  """Deskripsinya ada disini loh"""
  participantCreateOne(data: ParticipantCreateInput!): Participant

  """Deskripsinya ada disini loh"""
  participantUpdateOne(data: ParticipantUpdateInput!, where: ParticipantWhereUniqueInput!): Participant

  """Import participant data from xlsx file"""
  participantImport(file: Upload): Boolean

  """Deskripsinya ada disini loh"""
  roleCreateOne(data: RoleCreateInput!): Role

  """Deskripsinya ada disini loh"""
  roleUpdateOne(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role

  """Deskripsinya ada disini loh"""
  roleDelete(where: RoleWhereUniqueInput!): Boolean!

  """Deskripsinya ada disini loh"""
  tagCreateOne(data: TagCreateInput!): Tag

  """
  update nama dan warna tag di database bukan hanya di dokumen claim saja. 
  """
  tagUpdateOne(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag

  """Permanently delete all tag also from all claims"""
  tagDelete(where: TagWhereUniqueInput!): Boolean!

  """Deskripsinya ada disini loh"""
  notificationUpdateOne(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification

  """Deskripsinya ada disini loh"""
  notificationUpdateMany(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): Notification

  """Deskripsinya ada disini loh"""
  announcementCreateOne(data: AnnouncementCreateInput!): Announcement
}

input ProgramCreateInput {
  type: ProgramType!
  santunanHarianRawatInapPlan: SantunanHarianRawatInapPlan
  tambahanBantuanRawatInapType: TambahanBantuanRawatInapType
  maxAllowancePercentage: Int
  allowanceCeiling: Float!
  allowanceCeilingPeriod: Period
  allowanceQuota: Int
  allowanceQuotaPeriod: Period
  claimPeriodMax: Int
  reclaimPeriodMax: Int
  programParticipations: ProgramParticipationToProgramsCreateNestedManyWithoutProgramInput
}

input ProgramParticipationToProgramsCreateNestedManyWithoutProgramInput {
  create: [ProgramParticipationToProgramsCreateWithoutProgramInput!]
  connectOrCreate: [ProgramParticipationToProgramsCreateOrConnectWithoutProgramInput!]
  createMany: ProgramParticipationToProgramsCreateManyProgramInputEnvelope
  connect: [ProgramParticipationToProgramsWhereUniqueInput!]
}

input ProgramParticipationToProgramsCreateWithoutProgramInput {
  description: String
  programParticipation: ProgramParticipationCreateNestedOneWithoutProgramParticipationToProgramsInput!
  claimPrograms: ClaimProgramCreateNestedManyWithoutProgramParticipationToProgramInput
}

input ProgramParticipationCreateNestedOneWithoutProgramParticipationToProgramsInput {
  create: ProgramParticipationCreateWithoutProgramParticipationToProgramsInput
  connectOrCreate: ProgramParticipationCreateOrConnectWithoutProgramParticipationToProgramsInput
  connect: ProgramParticipationWhereUniqueInput
}

input ProgramParticipationCreateWithoutProgramParticipationToProgramsInput {
  bpjsNumber: String
  nonActiveReason: String
  effectiveDate: DateTime!
  nonActiveDate: DateTime
  santunanHarianRawatInapPlan: SantunanHarianRawatInapPlan!
  participant: ParticipantCreateNestedOneWithoutProgramParticipationInput
}

input ParticipantCreateNestedOneWithoutProgramParticipationInput {
  create: ParticipantCreateWithoutProgramParticipationInput
  connectOrCreate: ParticipantCreateOrConnectWithoutProgramParticipationInput
  connect: ParticipantWhereUniqueInput
}

input ParticipantCreateWithoutProgramParticipationInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  user: UserCreateNestedOneWithoutParticipantInput!
  relation: ParticipantCreateNestedOneWithoutRelationsInput
  employment: EmploymentCreateNestedOneWithoutParticipantInput!
  bankAccount: BankAccountCreateNestedOneWithoutParticipantInput!
  contactInfo: ContactInfoCreateNestedOneWithoutParticipantInput!
  relations: ParticipantCreateNestedManyWithoutRelationInput
}

input UserCreateNestedOneWithoutParticipantInput {
  create: UserCreateWithoutParticipantInput
  connectOrCreate: UserCreateOrConnectWithoutParticipantInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutParticipantInput {
  fullName: String!
  email: String!
  password: String
  profilePictureUrl: String
  role: RoleCreateNestedOneWithoutUsersInput
}

input RoleCreateNestedOneWithoutUsersInput {
  create: RoleCreateWithoutUsersInput
  connectOrCreate: RoleCreateOrConnectWithoutUsersInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutUsersInput {
  name: String!
  description: String
  roleType: RoleType
  higherLevelThan: RoleCreateNestedOneWithoutLowerLevelThanInput
  rolePermissions: RolePermissionCreateNestedManyWithoutRoleInput
  lowerLevelThan: RoleCreateNestedManyWithoutHigherLevelThanInput
}

input RoleCreateNestedOneWithoutLowerLevelThanInput {
  create: RoleCreateWithoutLowerLevelThanInput
  connectOrCreate: RoleCreateOrConnectWithoutLowerLevelThanInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutLowerLevelThanInput {
  name: String!
  description: String
  roleType: RoleType
  higherLevelThan: RoleCreateNestedOneWithoutLowerLevelThanInput
  rolePermissions: RolePermissionCreateNestedManyWithoutRoleInput
  users: UserCreateNestedManyWithoutRoleInput
}

input RolePermissionCreateNestedManyWithoutRoleInput {
  create: [RolePermissionCreateWithoutRoleInput!]
  connectOrCreate: [RolePermissionCreateOrConnectWithoutRoleInput!]
  createMany: RolePermissionCreateManyRoleInputEnvelope
  connect: [RolePermissionWhereUniqueInput!]
}

input RolePermissionCreateWithoutRoleInput {
  permission: Permission!
}

input RolePermissionCreateOrConnectWithoutRoleInput {
  where: RolePermissionWhereUniqueInput!
  create: RolePermissionCreateWithoutRoleInput!
}

input RolePermissionWhereUniqueInput {
  id: Int
  AND: [RolePermissionWhereInput!]
  OR: [RolePermissionWhereInput!]
  NOT: [RolePermissionWhereInput!]
  roleId: IntNullableFilter
  permission: EnumPermissionFilter
  role: RoleNullableRelationFilter
}

input RolePermissionCreateManyRoleInputEnvelope {
  data: [RolePermissionCreateManyRoleInput!]!
  skipDuplicates: Boolean
}

input RolePermissionCreateManyRoleInput {
  id: Int
  permission: Permission!
}

input UserCreateNestedManyWithoutRoleInput {
  create: [UserCreateWithoutRoleInput!]
  connectOrCreate: [UserCreateOrConnectWithoutRoleInput!]
  createMany: UserCreateManyRoleInputEnvelope
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutRoleInput {
  fullName: String!
  email: String!
  password: String
  profilePictureUrl: String
  participant: ParticipantCreateNestedOneWithoutUserInput
}

input ParticipantCreateNestedOneWithoutUserInput {
  create: ParticipantCreateWithoutUserInput
  connectOrCreate: ParticipantCreateOrConnectWithoutUserInput
  connect: ParticipantWhereUniqueInput
}

input ParticipantCreateWithoutUserInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  relation: ParticipantCreateNestedOneWithoutRelationsInput
  employment: EmploymentCreateNestedOneWithoutParticipantInput!
  bankAccount: BankAccountCreateNestedOneWithoutParticipantInput!
  contactInfo: ContactInfoCreateNestedOneWithoutParticipantInput!
  programParticipation: ProgramParticipationCreateNestedOneWithoutParticipantInput!
  relations: ParticipantCreateNestedManyWithoutRelationInput
}

input ParticipantCreateNestedOneWithoutRelationsInput {
  create: ParticipantCreateWithoutRelationsInput
  connectOrCreate: ParticipantCreateOrConnectWithoutRelationsInput
  connect: ParticipantWhereUniqueInput
}

input ParticipantCreateWithoutRelationsInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  user: UserCreateNestedOneWithoutParticipantInput!
  relation: ParticipantCreateNestedOneWithoutRelationsInput
  employment: EmploymentCreateNestedOneWithoutParticipantInput!
  bankAccount: BankAccountCreateNestedOneWithoutParticipantInput!
  contactInfo: ContactInfoCreateNestedOneWithoutParticipantInput!
  programParticipation: ProgramParticipationCreateNestedOneWithoutParticipantInput!
}

input EmploymentCreateNestedOneWithoutParticipantInput {
  create: EmploymentCreateWithoutParticipantInput
  connectOrCreate: EmploymentCreateOrConnectWithoutParticipantInput
  connect: EmploymentWhereUniqueInput
}

input EmploymentCreateWithoutParticipantInput {
  employmentPosition: Position!
  branch: BranchCreateNestedOneWithoutEmploymentInput!
  group: GroupCreateNestedOneWithoutEmploymentInput
  region: RegionCreateNestedOneWithoutEmploymentInput
}

input BranchCreateNestedOneWithoutEmploymentInput {
  create: BranchCreateWithoutEmploymentInput
  connectOrCreate: BranchCreateOrConnectWithoutEmploymentInput
  connect: BranchWhereUniqueInput
}

input BranchCreateWithoutEmploymentInput {
  name: String!
  claimFinancial: ClaimFinancialCreateNestedManyWithoutBranchPayeeInput
}

input ClaimFinancialCreateNestedManyWithoutBranchPayeeInput {
  create: [ClaimFinancialCreateWithoutBranchPayeeInput!]
  connectOrCreate: [ClaimFinancialCreateOrConnectWithoutBranchPayeeInput!]
  createMany: ClaimFinancialCreateManyBranchPayeeInputEnvelope
  connect: [ClaimFinancialWhereUniqueInput!]
}

input ClaimFinancialCreateWithoutBranchPayeeInput {
  requestedAmount: Float!
}

input ClaimFinancialCreateOrConnectWithoutBranchPayeeInput {
  where: ClaimFinancialWhereUniqueInput!
  create: ClaimFinancialCreateWithoutBranchPayeeInput!
}

input ClaimFinancialWhereUniqueInput {
  id: Int
  claimStatusId: Int
  transactionId: Int
  AND: [ClaimFinancialWhereInput!]
  OR: [ClaimFinancialWhereInput!]
  NOT: [ClaimFinancialWhereInput!]
  totalInvoiceProofAmount: FloatFilter
  requestedAmount: FloatFilter
  paidAmount: FloatNullableFilter
  rejectedAmount: FloatNullableFilter
  previousBalance: FloatFilter
  remainingBalance: FloatFilter
  branchId: IntNullableFilter
  branchPayee: BranchNullableRelationFilter
  claim: ClaimNullableRelationFilter
  claimStatus: ClaimStatusNullableRelationFilter
  transaction: TransactionNullableRelationFilter
}

input ClaimFinancialCreateManyBranchPayeeInputEnvelope {
  data: [ClaimFinancialCreateManyBranchPayeeInput!]!
  skipDuplicates: Boolean
}

input ClaimFinancialCreateManyBranchPayeeInput {
  requestedAmount: Float!
}

input BranchCreateOrConnectWithoutEmploymentInput {
  where: BranchWhereUniqueInput!
  create: BranchCreateWithoutEmploymentInput!
}

input GroupCreateNestedOneWithoutEmploymentInput {
  create: GroupCreateWithoutEmploymentInput
  connectOrCreate: GroupCreateOrConnectWithoutEmploymentInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutEmploymentInput {
  name: String!
}

input GroupCreateOrConnectWithoutEmploymentInput {
  where: GroupWhereUniqueInput!
  create: GroupCreateWithoutEmploymentInput!
}

input RegionCreateNestedOneWithoutEmploymentInput {
  create: RegionCreateWithoutEmploymentInput
  connectOrCreate: RegionCreateOrConnectWithoutEmploymentInput
  connect: RegionWhereUniqueInput
}

input RegionCreateWithoutEmploymentInput {
  name: String!
}

input RegionCreateOrConnectWithoutEmploymentInput {
  where: RegionWhereUniqueInput!
  create: RegionCreateWithoutEmploymentInput!
}

input EmploymentCreateOrConnectWithoutParticipantInput {
  where: EmploymentWhereUniqueInput!
  create: EmploymentCreateWithoutParticipantInput!
}

input EmploymentWhereUniqueInput {
  id: Int
  AND: [EmploymentWhereInput!]
  OR: [EmploymentWhereInput!]
  NOT: [EmploymentWhereInput!]
  employmentPosition: EnumPositionFilter
  branchId: IntFilter
  groupId: IntNullableFilter
  regionId: IntNullableFilter
  participant: ParticipantNullableRelationFilter
  branch: BranchRelationFilter
  group: GroupNullableRelationFilter
  region: RegionNullableRelationFilter
}

input BankAccountCreateNestedOneWithoutParticipantInput {
  create: BankAccountCreateWithoutParticipantInput
  connectOrCreate: BankAccountCreateOrConnectWithoutParticipantInput
  connect: BankAccountWhereUniqueInput
}

input BankAccountCreateWithoutParticipantInput {
  accountNumber: Float!
  accountName: String!
}

input BankAccountCreateOrConnectWithoutParticipantInput {
  where: BankAccountWhereUniqueInput!
  create: BankAccountCreateWithoutParticipantInput!
}

input BankAccountWhereUniqueInput {
  id: Int
  AND: [BankAccountWhereInput!]
  OR: [BankAccountWhereInput!]
  NOT: [BankAccountWhereInput!]
  accountNumber: FloatFilter
  accountName: StringFilter
  participant: ParticipantNullableRelationFilter
}

input ContactInfoCreateNestedOneWithoutParticipantInput {
  create: ContactInfoCreateWithoutParticipantInput
  connectOrCreate: ContactInfoCreateOrConnectWithoutParticipantInput
  connect: ContactInfoWhereUniqueInput
}

input ContactInfoCreateWithoutParticipantInput {
  phones: phoneCreateNestedManyWithoutContactInfoInput
  address: AddressCreateNestedOneWithoutContactInfoInput!
}

input phoneCreateNestedManyWithoutContactInfoInput {
  create: [phoneCreateWithoutContactInfoInput!]
  connectOrCreate: [phoneCreateOrConnectWithoutContactInfoInput!]
  createMany: phoneCreateManyContactInfoInputEnvelope
  connect: [phoneWhereUniqueInput!]
}

input phoneCreateWithoutContactInfoInput {
  number: Float!
}

input phoneCreateOrConnectWithoutContactInfoInput {
  where: phoneWhereUniqueInput!
  create: phoneCreateWithoutContactInfoInput!
}

input phoneWhereUniqueInput {
  number: Float
  AND: [phoneWhereInput!]
  OR: [phoneWhereInput!]
  NOT: [phoneWhereInput!]
  contactInfoId: IntFilter
  contactInfo: ContactInfoRelationFilter
}

input phoneCreateManyContactInfoInputEnvelope {
  data: [phoneCreateManyContactInfoInput!]!
  skipDuplicates: Boolean
}

input phoneCreateManyContactInfoInput {
  number: Float!
}

input AddressCreateNestedOneWithoutContactInfoInput {
  create: AddressCreateWithoutContactInfoInput
  connectOrCreate: AddressCreateOrConnectWithoutContactInfoInput
  connect: AddressWhereUniqueInput
}

input AddressCreateWithoutContactInfoInput {
  address: String!
  subdistrict: SubdistrictCreateNestedOneWithoutAddressInput!
}

input SubdistrictCreateNestedOneWithoutAddressInput {
  create: SubdistrictCreateWithoutAddressInput
  connectOrCreate: SubdistrictCreateOrConnectWithoutAddressInput
  connect: SubdistrictWhereUniqueInput
}

input SubdistrictCreateWithoutAddressInput {
  name: String!
  postalCode: String!
  district: DistrictCreateNestedOneWithoutSubdistrictsInput!
}

input DistrictCreateNestedOneWithoutSubdistrictsInput {
  create: DistrictCreateWithoutSubdistrictsInput
  connectOrCreate: DistrictCreateOrConnectWithoutSubdistrictsInput
  connect: DistrictWhereUniqueInput
}

input DistrictCreateWithoutSubdistrictsInput {
  name: String!
  city: CityCreateNestedOneWithoutDistrictsInput!
}

input CityCreateNestedOneWithoutDistrictsInput {
  create: CityCreateWithoutDistrictsInput
  connectOrCreate: CityCreateOrConnectWithoutDistrictsInput
  connect: CityWhereUniqueInput
}

input CityCreateWithoutDistrictsInput {
  name: String!
  province: ProvinceCreateNestedOneWithoutCitiesInput!
}

input ProvinceCreateNestedOneWithoutCitiesInput {
  create: ProvinceCreateWithoutCitiesInput
  connectOrCreate: ProvinceCreateOrConnectWithoutCitiesInput
  connect: ProvinceWhereUniqueInput
}

input ProvinceCreateWithoutCitiesInput {
  name: String!
}

input ProvinceCreateOrConnectWithoutCitiesInput {
  where: ProvinceWhereUniqueInput!
  create: ProvinceCreateWithoutCitiesInput!
}

input ProvinceWhereUniqueInput {
  id: Int
  name: String
  AND: [ProvinceWhereInput!]
  OR: [ProvinceWhereInput!]
  NOT: [ProvinceWhereInput!]
  cities: CityListRelationFilter
}

input CityCreateOrConnectWithoutDistrictsInput {
  where: CityWhereUniqueInput!
  create: CityCreateWithoutDistrictsInput!
}

input CityWhereUniqueInput {
  id: Int
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
  name: StringFilter
  provinceId: IntFilter
  province: ProvinceRelationFilter
  districts: DistrictListRelationFilter
}

input DistrictCreateOrConnectWithoutSubdistrictsInput {
  where: DistrictWhereUniqueInput!
  create: DistrictCreateWithoutSubdistrictsInput!
}

input DistrictWhereUniqueInput {
  id: Int
  AND: [DistrictWhereInput!]
  OR: [DistrictWhereInput!]
  NOT: [DistrictWhereInput!]
  name: StringFilter
  cityId: IntFilter
  city: CityRelationFilter
  subdistricts: SubdistrictListRelationFilter
}

input SubdistrictCreateOrConnectWithoutAddressInput {
  where: SubdistrictWhereUniqueInput!
  create: SubdistrictCreateWithoutAddressInput!
}

input AddressCreateOrConnectWithoutContactInfoInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutContactInfoInput!
}

input AddressWhereUniqueInput {
  id: Int
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  address: StringFilter
  subdistrictId: IntFilter
  subdistrict: SubdistrictRelationFilter
  ContactInfo: ContactInfoListRelationFilter
}

input ContactInfoCreateOrConnectWithoutParticipantInput {
  where: ContactInfoWhereUniqueInput!
  create: ContactInfoCreateWithoutParticipantInput!
}

input ContactInfoWhereUniqueInput {
  id: Int
  AND: [ContactInfoWhereInput!]
  OR: [ContactInfoWhereInput!]
  NOT: [ContactInfoWhereInput!]
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  addressId: IntFilter
  phones: PhoneListRelationFilter
  participant: ParticipantNullableRelationFilter
  address: AddressRelationFilter
}

input ProgramParticipationCreateNestedOneWithoutParticipantInput {
  create: ProgramParticipationCreateWithoutParticipantInput
  connectOrCreate: ProgramParticipationCreateOrConnectWithoutParticipantInput
  connect: ProgramParticipationWhereUniqueInput
}

input ProgramParticipationCreateWithoutParticipantInput {
  bpjsNumber: String
  nonActiveReason: String
  effectiveDate: DateTime!
  nonActiveDate: DateTime
  santunanHarianRawatInapPlan: SantunanHarianRawatInapPlan!
}

input ProgramParticipationCreateOrConnectWithoutParticipantInput {
  where: ProgramParticipationWhereUniqueInput!
  create: ProgramParticipationCreateWithoutParticipantInput!
}

input ProgramParticipationWhereUniqueInput {
  id: Int
  AND: [ProgramParticipationWhereInput!]
  OR: [ProgramParticipationWhereInput!]
  NOT: [ProgramParticipationWhereInput!]
  bpjsNumber: StringNullableFilter
  nonActiveReason: StringNullableFilter
  effectiveDate: DateTimeFilter
  nonActiveDate: DateTimeNullableFilter
  santunanHarianRawatInapPlan: EnumSantunanHarianRawatInapPlanFilter
  fundingId: IntNullableFilter
  participant: ParticipantNullableRelationFilter
  funding: AccountNullableRelationFilter
  programParticipationToPrograms: ProgramParticipationToProgramsListRelationFilter
}

input ParticipantCreateOrConnectWithoutRelationsInput {
  where: ParticipantWhereUniqueInput!
  create: ParticipantCreateWithoutRelationsInput!
}

input ParticipantCreateNestedManyWithoutRelationInput {
  create: [ParticipantCreateWithoutRelationInput!]
  connectOrCreate: [ParticipantCreateOrConnectWithoutRelationInput!]
  createMany: ParticipantCreateManyRelationInputEnvelope
  connect: [ParticipantWhereUniqueInput!]
}

input ParticipantCreateWithoutRelationInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  user: UserCreateNestedOneWithoutParticipantInput!
  employment: EmploymentCreateNestedOneWithoutParticipantInput!
  bankAccount: BankAccountCreateNestedOneWithoutParticipantInput!
  contactInfo: ContactInfoCreateNestedOneWithoutParticipantInput!
  programParticipation: ProgramParticipationCreateNestedOneWithoutParticipantInput!
  relations: ParticipantCreateNestedManyWithoutRelationInput
}

input ParticipantCreateOrConnectWithoutRelationInput {
  where: ParticipantWhereUniqueInput!
  create: ParticipantCreateWithoutRelationInput!
}

input ParticipantCreateManyRelationInputEnvelope {
  data: [ParticipantCreateManyRelationInput!]!
  skipDuplicates: Boolean
}

input ParticipantCreateManyRelationInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  userId: String!
  employmentId: Int!
  bankAccountId: Int!
  contactInfoId: Int!
  programParticipationId: Int!
}

input ParticipantCreateOrConnectWithoutUserInput {
  where: ParticipantWhereUniqueInput!
  create: ParticipantCreateWithoutUserInput!
}

input UserCreateOrConnectWithoutRoleInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutRoleInput!
}

input UserCreateManyRoleInputEnvelope {
  data: [UserCreateManyRoleInput!]!
  skipDuplicates: Boolean
}

input UserCreateManyRoleInput {
  fullName: String!
  email: String!
  password: String
  profilePictureUrl: String
}

input RoleCreateOrConnectWithoutLowerLevelThanInput {
  where: RoleWhereUniqueInput!
  create: RoleCreateWithoutLowerLevelThanInput!
}

input RoleCreateNestedManyWithoutHigherLevelThanInput {
  create: [RoleCreateWithoutHigherLevelThanInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutHigherLevelThanInput!]
  createMany: RoleCreateManyHigherLevelThanInputEnvelope
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateWithoutHigherLevelThanInput {
  name: String!
  description: String
  roleType: RoleType
  rolePermissions: RolePermissionCreateNestedManyWithoutRoleInput
  users: UserCreateNestedManyWithoutRoleInput
  lowerLevelThan: RoleCreateNestedManyWithoutHigherLevelThanInput
}

input RoleCreateOrConnectWithoutHigherLevelThanInput {
  where: RoleWhereUniqueInput!
  create: RoleCreateWithoutHigherLevelThanInput!
}

input RoleCreateManyHigherLevelThanInputEnvelope {
  data: [RoleCreateManyHigherLevelThanInput!]!
  skipDuplicates: Boolean
}

input RoleCreateManyHigherLevelThanInput {
  id: Int
  name: String!
  description: String
  roleType: RoleType
}

input RoleCreateOrConnectWithoutUsersInput {
  where: RoleWhereUniqueInput!
  create: RoleCreateWithoutUsersInput!
}

input UserCreateOrConnectWithoutParticipantInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutParticipantInput!
}

input ParticipantCreateOrConnectWithoutProgramParticipationInput {
  where: ParticipantWhereUniqueInput!
  create: ParticipantCreateWithoutProgramParticipationInput!
}

input ProgramParticipationCreateOrConnectWithoutProgramParticipationToProgramsInput {
  where: ProgramParticipationWhereUniqueInput!
  create: ProgramParticipationCreateWithoutProgramParticipationToProgramsInput!
}

input ClaimProgramCreateNestedManyWithoutProgramParticipationToProgramInput {
  create: [ClaimProgramCreateWithoutProgramParticipationToProgramInput!]
  connectOrCreate: [ClaimProgramCreateOrConnectWithoutProgramParticipationToProgramInput!]
  createMany: ClaimProgramCreateManyProgramParticipationToProgramInputEnvelope
  connect: [ClaimProgramWhereUniqueInput!]
}

input ClaimProgramCreateWithoutProgramParticipationToProgramInput {
  isReclaim: Boolean
  isReclaimNoticeLetterDate: DateTime
  submissionNote: String
  description: String
  additionalNote: String
  startTreatment: DateTime
  endTreatment: DateTime
  kurisRodaOrWalkerStoreName: String
  disease: DiseaseCreateNestedOneWithoutClaimProgramInput
  clinics: ClinicCreateNestedOneWithoutClaimProgramInput
  claim: ClaimCreateNestedOneWithoutClaimProgramInput
  documents: DocumentCreateNestedManyWithoutClaimProgrammInput
  invoiceProofs: InvoiceProofCreateNestedManyWithoutClaimProgramInput
}

input DiseaseCreateNestedOneWithoutClaimProgramInput {
  create: DiseaseCreateWithoutClaimProgramInput
  connectOrCreate: DiseaseCreateOrConnectWithoutClaimProgramInput
  connect: DiseaseWhereUniqueInput
}

input DiseaseCreateWithoutClaimProgramInput {
  code: String!
  name: String!
}

input DiseaseCreateOrConnectWithoutClaimProgramInput {
  where: DiseaseWhereUniqueInput!
  create: DiseaseCreateWithoutClaimProgramInput!
}

input ClinicCreateNestedOneWithoutClaimProgramInput {
  create: ClinicCreateWithoutClaimProgramInput
  connectOrCreate: ClinicCreateOrConnectWithoutClaimProgramInput
  connect: ClinicWhereUniqueInput
}

input ClinicCreateWithoutClaimProgramInput {
  code: String!
  name: String!
}

input ClinicCreateOrConnectWithoutClaimProgramInput {
  where: ClinicWhereUniqueInput!
  create: ClinicCreateWithoutClaimProgramInput!
}

input ClaimCreateNestedOneWithoutClaimProgramInput {
  create: ClaimCreateWithoutClaimProgramInput
  connectOrCreate: ClaimCreateOrConnectWithoutClaimProgramInput
  connect: ClaimWhereUniqueInput
}

input ClaimCreateWithoutClaimProgramInput {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  company: String!
  participant: ParticipantCreateNestedOneWithoutClaimsInput!
  claimFinancials: ClaimFinancialCreateNestedOneWithoutClaimInput!
  tags: TagCreateNestedManyWithoutClaimsInput
}

input ParticipantCreateNestedOneWithoutClaimsInput {
  create: ParticipantCreateWithoutClaimsInput
  connectOrCreate: ParticipantCreateOrConnectWithoutClaimsInput
  connect: ParticipantWhereUniqueInput
}

input ParticipantCreateWithoutClaimsInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  user: UserCreateNestedOneWithoutParticipantInput!
  relation: ParticipantCreateNestedOneWithoutRelationsInput
  employment: EmploymentCreateNestedOneWithoutParticipantInput!
  bankAccount: BankAccountCreateNestedOneWithoutParticipantInput!
  contactInfo: ContactInfoCreateNestedOneWithoutParticipantInput!
  programParticipation: ProgramParticipationCreateNestedOneWithoutParticipantInput!
  relations: ParticipantCreateNestedManyWithoutRelationInput
}

input ParticipantCreateOrConnectWithoutClaimsInput {
  where: ParticipantWhereUniqueInput!
  create: ParticipantCreateWithoutClaimsInput!
}

input ClaimFinancialCreateNestedOneWithoutClaimInput {
  create: ClaimFinancialCreateWithoutClaimInput
  connectOrCreate: ClaimFinancialCreateOrConnectWithoutClaimInput
  connect: ClaimFinancialWhereUniqueInput
}

input ClaimFinancialCreateWithoutClaimInput {
  requestedAmount: Float!
  branchPayee: BranchCreateNestedOneWithoutClaimFinancialInput
}

input BranchCreateNestedOneWithoutClaimFinancialInput {
  create: BranchCreateWithoutClaimFinancialInput
  connectOrCreate: BranchCreateOrConnectWithoutClaimFinancialInput
  connect: BranchWhereUniqueInput
}

input BranchCreateWithoutClaimFinancialInput {
  name: String!
  employment: EmploymentCreateNestedManyWithoutBranchInput
}

input EmploymentCreateNestedManyWithoutBranchInput {
  create: [EmploymentCreateWithoutBranchInput!]
  connectOrCreate: [EmploymentCreateOrConnectWithoutBranchInput!]
  createMany: EmploymentCreateManyBranchInputEnvelope
  connect: [EmploymentWhereUniqueInput!]
}

input EmploymentCreateWithoutBranchInput {
  employmentPosition: Position!
  group: GroupCreateNestedOneWithoutEmploymentInput
  region: RegionCreateNestedOneWithoutEmploymentInput
}

input EmploymentCreateOrConnectWithoutBranchInput {
  where: EmploymentWhereUniqueInput!
  create: EmploymentCreateWithoutBranchInput!
}

input EmploymentCreateManyBranchInputEnvelope {
  data: [EmploymentCreateManyBranchInput!]!
  skipDuplicates: Boolean
}

input EmploymentCreateManyBranchInput {
  id: Int
  employmentPosition: Position!
  groupId: Int
  regionId: Int
}

input BranchCreateOrConnectWithoutClaimFinancialInput {
  where: BranchWhereUniqueInput!
  create: BranchCreateWithoutClaimFinancialInput!
}

input ClaimFinancialCreateOrConnectWithoutClaimInput {
  where: ClaimFinancialWhereUniqueInput!
  create: ClaimFinancialCreateWithoutClaimInput!
}

input TagCreateNestedManyWithoutClaimsInput {
  create: [TagCreateWithoutClaimsInput!]
  connectOrCreate: [TagCreateOrConnectWithoutClaimsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutClaimsInput {
  name: String!
  color: Color!
}

input TagCreateOrConnectWithoutClaimsInput {
  where: TagWhereUniqueInput!
  create: TagCreateWithoutClaimsInput!
}

input ClaimCreateOrConnectWithoutClaimProgramInput {
  where: ClaimWhereUniqueInput!
  create: ClaimCreateWithoutClaimProgramInput!
}

input DocumentCreateNestedManyWithoutClaimProgrammInput {
  create: [DocumentCreateWithoutClaimProgrammInput!]
  connectOrCreate: [DocumentCreateOrConnectWithoutClaimProgrammInput!]
  createMany: DocumentCreateManyClaimProgrammInputEnvelope
  connect: [DocumentWhereUniqueInput!]
}

input DocumentCreateWithoutClaimProgrammInput {
  uploadedFileUrl: String
  type: DocumentType!
}

input DocumentCreateOrConnectWithoutClaimProgrammInput {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutClaimProgrammInput!
}

input DocumentWhereUniqueInput {
  id: String
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  uploadedFileUrl: StringNullableFilter
  pdfPath: StringNullableFilter
  docxPath: StringNullableFilter
  size: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  source: EnumDocumentSourceFilter
  type: EnumDocumentTypeFilter
  claimProgramId: IntNullableFilter
  printedby: UserListRelationFilter
  rejectionLetterOf: ClaimStatusNullableRelationFilter
  guaranteeLetterOf: ClaimStatusNullableRelationFilter
  transactionLetterOf: ClaimStatusNullableRelationFilter
  bookKeepingOrderOf: ClaimStatusNullableRelationFilter
  claimProgramm: ClaimProgramNullableRelationFilter
  invoiceProof: InvoiceProofNullableRelationFilter
  transaction: TransactionNullableRelationFilter
}

input DocumentCreateManyClaimProgrammInputEnvelope {
  data: [DocumentCreateManyClaimProgrammInput!]!
  skipDuplicates: Boolean
}

input DocumentCreateManyClaimProgrammInput {
  uploadedFileUrl: String
  type: DocumentType!
}

input InvoiceProofCreateNestedManyWithoutClaimProgramInput {
  create: [InvoiceProofCreateWithoutClaimProgramInput!]
  connectOrCreate: [InvoiceProofCreateOrConnectWithoutClaimProgramInput!]
  createMany: InvoiceProofCreateManyClaimProgramInputEnvelope
  connect: [InvoiceProofWhereUniqueInput!]
}

input InvoiceProofCreateWithoutClaimProgramInput {
  issuedDate: DateTime!
  amount: Float!
  documentProof: DocumentCreateNestedOneWithoutInvoiceProofInput!
}

input DocumentCreateNestedOneWithoutInvoiceProofInput {
  create: DocumentCreateWithoutInvoiceProofInput
  connectOrCreate: DocumentCreateOrConnectWithoutInvoiceProofInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateWithoutInvoiceProofInput {
  uploadedFileUrl: String
  type: DocumentType!
}

input DocumentCreateOrConnectWithoutInvoiceProofInput {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutInvoiceProofInput!
}

input InvoiceProofCreateOrConnectWithoutClaimProgramInput {
  where: InvoiceProofWhereUniqueInput!
  create: InvoiceProofCreateWithoutClaimProgramInput!
}

input InvoiceProofWhereUniqueInput {
  id: Int
  documentProofId: String
  AND: [InvoiceProofWhereInput!]
  OR: [InvoiceProofWhereInput!]
  NOT: [InvoiceProofWhereInput!]
  issuedDate: DateTimeFilter
  amount: FloatFilter
  claimProgramId: IntNullableFilter
  documentProof: DocumentRelationFilter
  claimProgram: ClaimProgramNullableRelationFilter
}

input InvoiceProofCreateManyClaimProgramInputEnvelope {
  data: [InvoiceProofCreateManyClaimProgramInput!]!
  skipDuplicates: Boolean
}

input InvoiceProofCreateManyClaimProgramInput {
  issuedDate: DateTime!
  amount: Float!
  documentProofId: String!
}

input ClaimProgramCreateOrConnectWithoutProgramParticipationToProgramInput {
  where: ClaimProgramWhereUniqueInput!
  create: ClaimProgramCreateWithoutProgramParticipationToProgramInput!
}

input ClaimProgramWhereUniqueInput {
  id: Int
  AND: [ClaimProgramWhereInput!]
  OR: [ClaimProgramWhereInput!]
  NOT: [ClaimProgramWhereInput!]
  expeditionDate: DateTimeNullableFilter
  isReclaim: BoolNullableFilter
  isReclaimNoticeLetterDate: DateTimeNullableFilter
  submissionNote: StringNullableFilter
  description: StringNullableFilter
  additionalNote: StringNullableFilter
  startTreatment: DateTimeNullableFilter
  endTreatment: DateTimeNullableFilter
  kurisRodaOrWalkerStoreName: StringNullableFilter
  diseaseId: IntNullableFilter
  clinicId: IntNullableFilter
  programParticipationToProgramsProgramParticipationId: IntFilter
  programParticipationToProgramsProgramId: IntFilter
  disease: DiseaseNullableRelationFilter
  clinics: ClinicNullableRelationFilter
  claim: ClaimNullableRelationFilter
  programParticipationToProgram: ProgramParticipationToProgramsRelationFilter
  documents: DocumentListRelationFilter
  invoiceProofs: InvoiceProofListRelationFilter
}

input ClaimProgramCreateManyProgramParticipationToProgramInputEnvelope {
  data: [ClaimProgramCreateManyProgramParticipationToProgramInput!]!
  skipDuplicates: Boolean
}

input ClaimProgramCreateManyProgramParticipationToProgramInput {
  isReclaim: Boolean
  isReclaimNoticeLetterDate: DateTime
  submissionNote: String
  description: String
  additionalNote: String
  startTreatment: DateTime
  endTreatment: DateTime
  kurisRodaOrWalkerStoreName: String
  clinicId: Int
}

input ProgramParticipationToProgramsCreateOrConnectWithoutProgramInput {
  where: ProgramParticipationToProgramsWhereUniqueInput!
  create: ProgramParticipationToProgramsCreateWithoutProgramInput!
}

input ProgramParticipationToProgramsCreateManyProgramInputEnvelope {
  data: [ProgramParticipationToProgramsCreateManyProgramInput!]!
  skipDuplicates: Boolean
}

input ProgramParticipationToProgramsCreateManyProgramInput {
  description: String
}

input ProgramCreateManyInput {
  id: Int
  type: ProgramType!
  santunanHarianRawatInapPlan: SantunanHarianRawatInapPlan
  tambahanBantuanRawatInapType: TambahanBantuanRawatInapType
  maxAllowancePercentage: Int
  allowanceCeiling: Float!
  allowanceCeilingPeriod: Period
  allowanceQuota: Int
  allowanceQuotaPeriod: Period
  claimPeriodMax: Int
  reclaimPeriodMax: Int
}

input ProgramUpdateInput {
  type: EnumProgramTypeFieldUpdateOperationsInput
  santunanHarianRawatInapPlan: NullableEnumSantunanHarianRawatInapPlanFieldUpdateOperationsInput
  tambahanBantuanRawatInapType: NullableEnumTambahanBantuanRawatInapTypeFieldUpdateOperationsInput
  maxAllowancePercentage: NullableIntFieldUpdateOperationsInput
  allowanceCeiling: FloatFieldUpdateOperationsInput
  allowanceCeilingPeriod: NullableEnumPeriodFieldUpdateOperationsInput
  allowanceQuota: NullableIntFieldUpdateOperationsInput
  allowanceQuotaPeriod: NullableEnumPeriodFieldUpdateOperationsInput
  claimPeriodMax: NullableIntFieldUpdateOperationsInput
  reclaimPeriodMax: NullableIntFieldUpdateOperationsInput
  programParticipations: ProgramParticipationToProgramsUpdateManyWithoutProgramNestedInput
}

input EnumProgramTypeFieldUpdateOperationsInput {
  set: ProgramType
}

input NullableEnumSantunanHarianRawatInapPlanFieldUpdateOperationsInput {
  set: SantunanHarianRawatInapPlan
}

input NullableEnumTambahanBantuanRawatInapTypeFieldUpdateOperationsInput {
  set: TambahanBantuanRawatInapType
}

input NullableIntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input FloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input NullableEnumPeriodFieldUpdateOperationsInput {
  set: Period
}

input ProgramParticipationToProgramsUpdateManyWithoutProgramNestedInput {
  create: [ProgramParticipationToProgramsCreateWithoutProgramInput!]
  connectOrCreate: [ProgramParticipationToProgramsCreateOrConnectWithoutProgramInput!]
  upsert: [ProgramParticipationToProgramsUpsertWithWhereUniqueWithoutProgramInput!]
  createMany: ProgramParticipationToProgramsCreateManyProgramInputEnvelope
  set: [ProgramParticipationToProgramsWhereUniqueInput!]
  disconnect: [ProgramParticipationToProgramsWhereUniqueInput!]
  delete: [ProgramParticipationToProgramsWhereUniqueInput!]
  connect: [ProgramParticipationToProgramsWhereUniqueInput!]
  update: [ProgramParticipationToProgramsUpdateWithWhereUniqueWithoutProgramInput!]
  updateMany: [ProgramParticipationToProgramsUpdateManyWithWhereWithoutProgramInput!]
  deleteMany: [ProgramParticipationToProgramsScalarWhereInput!]
}

input ProgramParticipationToProgramsUpsertWithWhereUniqueWithoutProgramInput {
  where: ProgramParticipationToProgramsWhereUniqueInput!
  update: ProgramParticipationToProgramsUpdateWithoutProgramInput!
  create: ProgramParticipationToProgramsCreateWithoutProgramInput!
}

input ProgramParticipationToProgramsUpdateWithoutProgramInput {
  description: NullableStringFieldUpdateOperationsInput
  programParticipation: ProgramParticipationUpdateOneRequiredWithoutProgramParticipationToProgramsNestedInput
  claimPrograms: ClaimProgramUpdateManyWithoutProgramParticipationToProgramNestedInput
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input ProgramParticipationUpdateOneRequiredWithoutProgramParticipationToProgramsNestedInput {
  create: ProgramParticipationCreateWithoutProgramParticipationToProgramsInput
  connectOrCreate: ProgramParticipationCreateOrConnectWithoutProgramParticipationToProgramsInput
  upsert: ProgramParticipationUpsertWithoutProgramParticipationToProgramsInput
  connect: ProgramParticipationWhereUniqueInput
  update: ProgramParticipationUpdateToOneWithWhereWithoutProgramParticipationToProgramsInput
}

input ProgramParticipationUpsertWithoutProgramParticipationToProgramsInput {
  update: ProgramParticipationUpdateWithoutProgramParticipationToProgramsInput!
  create: ProgramParticipationCreateWithoutProgramParticipationToProgramsInput!
  where: ProgramParticipationWhereInput
}

input ProgramParticipationUpdateWithoutProgramParticipationToProgramsInput {
  bpjsNumber: NullableStringFieldUpdateOperationsInput
  nonActiveReason: NullableStringFieldUpdateOperationsInput
  effectiveDate: DateTimeFieldUpdateOperationsInput
  nonActiveDate: NullableDateTimeFieldUpdateOperationsInput
  santunanHarianRawatInapPlan: EnumSantunanHarianRawatInapPlanFieldUpdateOperationsInput
  participant: ParticipantUpdateOneWithoutProgramParticipationNestedInput
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input EnumSantunanHarianRawatInapPlanFieldUpdateOperationsInput {
  set: SantunanHarianRawatInapPlan
}

input ParticipantUpdateOneWithoutProgramParticipationNestedInput {
  create: ParticipantCreateWithoutProgramParticipationInput
  connectOrCreate: ParticipantCreateOrConnectWithoutProgramParticipationInput
  upsert: ParticipantUpsertWithoutProgramParticipationInput
  disconnect: ParticipantWhereInput
  delete: ParticipantWhereInput
  connect: ParticipantWhereUniqueInput
  update: ParticipantUpdateToOneWithWhereWithoutProgramParticipationInput
}

input ParticipantUpsertWithoutProgramParticipationInput {
  update: ParticipantUpdateWithoutProgramParticipationInput!
  create: ParticipantCreateWithoutProgramParticipationInput!
  where: ParticipantWhereInput
}

input ParticipantUpdateWithoutProgramParticipationInput {
  gender: EnumGenderFieldUpdateOperationsInput
  birthDate: DateTimeFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  status: EnumParticipantStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutParticipantNestedInput
  relation: ParticipantUpdateOneWithoutRelationsNestedInput
  employment: EmploymentUpdateOneRequiredWithoutParticipantNestedInput
  bankAccount: BankAccountUpdateOneRequiredWithoutParticipantNestedInput
  contactInfo: ContactInfoUpdateOneRequiredWithoutParticipantNestedInput
  relations: ParticipantUpdateManyWithoutRelationNestedInput
}

input EnumGenderFieldUpdateOperationsInput {
  set: Gender
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input EnumParticipantStatusFieldUpdateOperationsInput {
  set: ParticipantStatus
}

input UserUpdateOneRequiredWithoutParticipantNestedInput {
  create: UserCreateWithoutParticipantInput
  connectOrCreate: UserCreateOrConnectWithoutParticipantInput
  upsert: UserUpsertWithoutParticipantInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutParticipantInput
}

input UserUpsertWithoutParticipantInput {
  update: UserUpdateWithoutParticipantInput!
  create: UserCreateWithoutParticipantInput!
  where: UserWhereInput
}

input UserUpdateWithoutParticipantInput {
  fullName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  profilePictureUrl: NullableStringFieldUpdateOperationsInput
  role: RoleUpdateOneRequiredWithoutUsersNestedInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input RoleUpdateOneRequiredWithoutUsersNestedInput {
  create: RoleCreateWithoutUsersInput
  connectOrCreate: RoleCreateOrConnectWithoutUsersInput
  upsert: RoleUpsertWithoutUsersInput
  connect: RoleWhereUniqueInput
  update: RoleUpdateToOneWithWhereWithoutUsersInput
}

input RoleUpsertWithoutUsersInput {
  update: RoleUpdateWithoutUsersInput!
  create: RoleCreateWithoutUsersInput!
  where: RoleWhereInput
}

input RoleUpdateWithoutUsersInput {
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  roleType: NullableEnumRoleTypeFieldUpdateOperationsInput
  higherLevelThan: RoleUpdateOneWithoutLowerLevelThanNestedInput
  rolePermissions: RolePermissionUpdateManyWithoutRoleNestedInput
  lowerLevelThan: RoleUpdateManyWithoutHigherLevelThanNestedInput
}

input NullableEnumRoleTypeFieldUpdateOperationsInput {
  set: RoleType
}

input RoleUpdateOneWithoutLowerLevelThanNestedInput {
  create: RoleCreateWithoutLowerLevelThanInput
  connectOrCreate: RoleCreateOrConnectWithoutLowerLevelThanInput
  upsert: RoleUpsertWithoutLowerLevelThanInput
  disconnect: RoleWhereInput
  delete: RoleWhereInput
  connect: RoleWhereUniqueInput
  update: RoleUpdateToOneWithWhereWithoutLowerLevelThanInput
}

input RoleUpsertWithoutLowerLevelThanInput {
  update: RoleUpdateWithoutLowerLevelThanInput!
  create: RoleCreateWithoutLowerLevelThanInput!
  where: RoleWhereInput
}

input RoleUpdateWithoutLowerLevelThanInput {
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  roleType: NullableEnumRoleTypeFieldUpdateOperationsInput
  higherLevelThan: RoleUpdateOneWithoutLowerLevelThanNestedInput
  rolePermissions: RolePermissionUpdateManyWithoutRoleNestedInput
  users: UserUpdateManyWithoutRoleNestedInput
}

input RolePermissionUpdateManyWithoutRoleNestedInput {
  create: [RolePermissionCreateWithoutRoleInput!]
  connectOrCreate: [RolePermissionCreateOrConnectWithoutRoleInput!]
  upsert: [RolePermissionUpsertWithWhereUniqueWithoutRoleInput!]
  createMany: RolePermissionCreateManyRoleInputEnvelope
  set: [RolePermissionWhereUniqueInput!]
  disconnect: [RolePermissionWhereUniqueInput!]
  delete: [RolePermissionWhereUniqueInput!]
  connect: [RolePermissionWhereUniqueInput!]
  update: [RolePermissionUpdateWithWhereUniqueWithoutRoleInput!]
  updateMany: [RolePermissionUpdateManyWithWhereWithoutRoleInput!]
  deleteMany: [RolePermissionScalarWhereInput!]
}

input RolePermissionUpsertWithWhereUniqueWithoutRoleInput {
  where: RolePermissionWhereUniqueInput!
  update: RolePermissionUpdateWithoutRoleInput!
  create: RolePermissionCreateWithoutRoleInput!
}

input RolePermissionUpdateWithoutRoleInput {
  permission: EnumPermissionFieldUpdateOperationsInput
}

input EnumPermissionFieldUpdateOperationsInput {
  set: Permission
}

input RolePermissionUpdateWithWhereUniqueWithoutRoleInput {
  where: RolePermissionWhereUniqueInput!
  data: RolePermissionUpdateWithoutRoleInput!
}

input RolePermissionUpdateManyWithWhereWithoutRoleInput {
  where: RolePermissionScalarWhereInput!
  data: RolePermissionUpdateManyMutationInput!
}

input RolePermissionScalarWhereInput {
  AND: [RolePermissionScalarWhereInput!]
  OR: [RolePermissionScalarWhereInput!]
  NOT: [RolePermissionScalarWhereInput!]
  id: IntFilter
  roleId: IntNullableFilter
  permission: EnumPermissionFilter
}

input RolePermissionUpdateManyMutationInput {
  permission: EnumPermissionFieldUpdateOperationsInput
}

input UserUpdateManyWithoutRoleNestedInput {
  create: [UserCreateWithoutRoleInput!]
  connectOrCreate: [UserCreateOrConnectWithoutRoleInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutRoleInput!]
  createMany: UserCreateManyRoleInputEnvelope
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutRoleInput!]
  updateMany: [UserUpdateManyWithWhereWithoutRoleInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpsertWithWhereUniqueWithoutRoleInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutRoleInput!
  create: UserCreateWithoutRoleInput!
}

input UserUpdateWithoutRoleInput {
  fullName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  profilePictureUrl: NullableStringFieldUpdateOperationsInput
  participant: ParticipantUpdateOneWithoutUserNestedInput
}

input ParticipantUpdateOneWithoutUserNestedInput {
  create: ParticipantCreateWithoutUserInput
  connectOrCreate: ParticipantCreateOrConnectWithoutUserInput
  upsert: ParticipantUpsertWithoutUserInput
  disconnect: ParticipantWhereInput
  delete: ParticipantWhereInput
  connect: ParticipantWhereUniqueInput
  update: ParticipantUpdateToOneWithWhereWithoutUserInput
}

input ParticipantUpsertWithoutUserInput {
  update: ParticipantUpdateWithoutUserInput!
  create: ParticipantCreateWithoutUserInput!
  where: ParticipantWhereInput
}

input ParticipantUpdateWithoutUserInput {
  gender: EnumGenderFieldUpdateOperationsInput
  birthDate: DateTimeFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  status: EnumParticipantStatusFieldUpdateOperationsInput
  relation: ParticipantUpdateOneWithoutRelationsNestedInput
  employment: EmploymentUpdateOneRequiredWithoutParticipantNestedInput
  bankAccount: BankAccountUpdateOneRequiredWithoutParticipantNestedInput
  contactInfo: ContactInfoUpdateOneRequiredWithoutParticipantNestedInput
  programParticipation: ProgramParticipationUpdateOneRequiredWithoutParticipantNestedInput
  relations: ParticipantUpdateManyWithoutRelationNestedInput
}

input ParticipantUpdateOneWithoutRelationsNestedInput {
  create: ParticipantCreateWithoutRelationsInput
  connectOrCreate: ParticipantCreateOrConnectWithoutRelationsInput
  upsert: ParticipantUpsertWithoutRelationsInput
  disconnect: ParticipantWhereInput
  delete: ParticipantWhereInput
  connect: ParticipantWhereUniqueInput
  update: ParticipantUpdateToOneWithWhereWithoutRelationsInput
}

input ParticipantUpsertWithoutRelationsInput {
  update: ParticipantUpdateWithoutRelationsInput!
  create: ParticipantCreateWithoutRelationsInput!
  where: ParticipantWhereInput
}

input ParticipantUpdateWithoutRelationsInput {
  gender: EnumGenderFieldUpdateOperationsInput
  birthDate: DateTimeFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  status: EnumParticipantStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutParticipantNestedInput
  relation: ParticipantUpdateOneWithoutRelationsNestedInput
  employment: EmploymentUpdateOneRequiredWithoutParticipantNestedInput
  bankAccount: BankAccountUpdateOneRequiredWithoutParticipantNestedInput
  contactInfo: ContactInfoUpdateOneRequiredWithoutParticipantNestedInput
  programParticipation: ProgramParticipationUpdateOneRequiredWithoutParticipantNestedInput
}

input EmploymentUpdateOneRequiredWithoutParticipantNestedInput {
  create: EmploymentCreateWithoutParticipantInput
  connectOrCreate: EmploymentCreateOrConnectWithoutParticipantInput
  upsert: EmploymentUpsertWithoutParticipantInput
  connect: EmploymentWhereUniqueInput
  update: EmploymentUpdateToOneWithWhereWithoutParticipantInput
}

input EmploymentUpsertWithoutParticipantInput {
  update: EmploymentUpdateWithoutParticipantInput!
  create: EmploymentCreateWithoutParticipantInput!
  where: EmploymentWhereInput
}

input EmploymentUpdateWithoutParticipantInput {
  employmentPosition: EnumPositionFieldUpdateOperationsInput
  branch: BranchUpdateOneRequiredWithoutEmploymentNestedInput
  group: GroupUpdateOneWithoutEmploymentNestedInput
  region: RegionUpdateOneWithoutEmploymentNestedInput
}

input EnumPositionFieldUpdateOperationsInput {
  set: Position
}

input BranchUpdateOneRequiredWithoutEmploymentNestedInput {
  create: BranchCreateWithoutEmploymentInput
  connectOrCreate: BranchCreateOrConnectWithoutEmploymentInput
  upsert: BranchUpsertWithoutEmploymentInput
  connect: BranchWhereUniqueInput
  update: BranchUpdateToOneWithWhereWithoutEmploymentInput
}

input BranchUpsertWithoutEmploymentInput {
  update: BranchUpdateWithoutEmploymentInput!
  create: BranchCreateWithoutEmploymentInput!
  where: BranchWhereInput
}

input BranchUpdateWithoutEmploymentInput {
  name: StringFieldUpdateOperationsInput
  claimFinancial: ClaimFinancialUpdateManyWithoutBranchPayeeNestedInput
}

input ClaimFinancialUpdateManyWithoutBranchPayeeNestedInput {
  create: [ClaimFinancialCreateWithoutBranchPayeeInput!]
  connectOrCreate: [ClaimFinancialCreateOrConnectWithoutBranchPayeeInput!]
  upsert: [ClaimFinancialUpsertWithWhereUniqueWithoutBranchPayeeInput!]
  createMany: ClaimFinancialCreateManyBranchPayeeInputEnvelope
  set: [ClaimFinancialWhereUniqueInput!]
  disconnect: [ClaimFinancialWhereUniqueInput!]
  delete: [ClaimFinancialWhereUniqueInput!]
  connect: [ClaimFinancialWhereUniqueInput!]
  update: [ClaimFinancialUpdateWithWhereUniqueWithoutBranchPayeeInput!]
  updateMany: [ClaimFinancialUpdateManyWithWhereWithoutBranchPayeeInput!]
  deleteMany: [ClaimFinancialScalarWhereInput!]
}

input ClaimFinancialUpsertWithWhereUniqueWithoutBranchPayeeInput {
  where: ClaimFinancialWhereUniqueInput!
  update: ClaimFinancialUpdateWithoutBranchPayeeInput!
  create: ClaimFinancialCreateWithoutBranchPayeeInput!
}

input ClaimFinancialUpdateWithoutBranchPayeeInput {
  requestedAmount: FloatFieldUpdateOperationsInput
  paidAmount: NullableFloatFieldUpdateOperationsInput
  rejectedAmount: NullableFloatFieldUpdateOperationsInput
}

input NullableFloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input ClaimFinancialUpdateWithWhereUniqueWithoutBranchPayeeInput {
  where: ClaimFinancialWhereUniqueInput!
  data: ClaimFinancialUpdateWithoutBranchPayeeInput!
}

input ClaimFinancialUpdateManyWithWhereWithoutBranchPayeeInput {
  where: ClaimFinancialScalarWhereInput!
  data: ClaimFinancialUpdateManyMutationInput!
}

input ClaimFinancialScalarWhereInput {
  AND: [ClaimFinancialScalarWhereInput!]
  OR: [ClaimFinancialScalarWhereInput!]
  NOT: [ClaimFinancialScalarWhereInput!]
  id: IntFilter
  totalInvoiceProofAmount: FloatFilter
  requestedAmount: FloatFilter
  paidAmount: FloatNullableFilter
  rejectedAmount: FloatNullableFilter
  previousBalance: FloatFilter
  remainingBalance: FloatFilter
  branchId: IntNullableFilter
  claimStatusId: IntNullableFilter
  transactionId: IntNullableFilter
}

input ClaimFinancialUpdateManyMutationInput {
  requestedAmount: FloatFieldUpdateOperationsInput
  paidAmount: NullableFloatFieldUpdateOperationsInput
  rejectedAmount: NullableFloatFieldUpdateOperationsInput
}

input BranchUpdateToOneWithWhereWithoutEmploymentInput {
  where: BranchWhereInput
  data: BranchUpdateWithoutEmploymentInput!
}

input GroupUpdateOneWithoutEmploymentNestedInput {
  create: GroupCreateWithoutEmploymentInput
  connectOrCreate: GroupCreateOrConnectWithoutEmploymentInput
  upsert: GroupUpsertWithoutEmploymentInput
  disconnect: GroupWhereInput
  delete: GroupWhereInput
  connect: GroupWhereUniqueInput
  update: GroupUpdateToOneWithWhereWithoutEmploymentInput
}

input GroupUpsertWithoutEmploymentInput {
  update: GroupUpdateWithoutEmploymentInput!
  create: GroupCreateWithoutEmploymentInput!
  where: GroupWhereInput
}

input GroupUpdateWithoutEmploymentInput {
  name: StringFieldUpdateOperationsInput
}

input GroupUpdateToOneWithWhereWithoutEmploymentInput {
  where: GroupWhereInput
  data: GroupUpdateWithoutEmploymentInput!
}

input RegionUpdateOneWithoutEmploymentNestedInput {
  create: RegionCreateWithoutEmploymentInput
  connectOrCreate: RegionCreateOrConnectWithoutEmploymentInput
  upsert: RegionUpsertWithoutEmploymentInput
  disconnect: RegionWhereInput
  delete: RegionWhereInput
  connect: RegionWhereUniqueInput
  update: RegionUpdateToOneWithWhereWithoutEmploymentInput
}

input RegionUpsertWithoutEmploymentInput {
  update: RegionUpdateWithoutEmploymentInput!
  create: RegionCreateWithoutEmploymentInput!
  where: RegionWhereInput
}

input RegionUpdateWithoutEmploymentInput {
  name: StringFieldUpdateOperationsInput
}

input RegionUpdateToOneWithWhereWithoutEmploymentInput {
  where: RegionWhereInput
  data: RegionUpdateWithoutEmploymentInput!
}

input EmploymentUpdateToOneWithWhereWithoutParticipantInput {
  where: EmploymentWhereInput
  data: EmploymentUpdateWithoutParticipantInput!
}

input BankAccountUpdateOneRequiredWithoutParticipantNestedInput {
  create: BankAccountCreateWithoutParticipantInput
  connectOrCreate: BankAccountCreateOrConnectWithoutParticipantInput
  upsert: BankAccountUpsertWithoutParticipantInput
  connect: BankAccountWhereUniqueInput
  update: BankAccountUpdateToOneWithWhereWithoutParticipantInput
}

input BankAccountUpsertWithoutParticipantInput {
  update: BankAccountUpdateWithoutParticipantInput!
  create: BankAccountCreateWithoutParticipantInput!
  where: BankAccountWhereInput
}

input BankAccountUpdateWithoutParticipantInput {
  accountNumber: FloatFieldUpdateOperationsInput
  accountName: StringFieldUpdateOperationsInput
}

input BankAccountUpdateToOneWithWhereWithoutParticipantInput {
  where: BankAccountWhereInput
  data: BankAccountUpdateWithoutParticipantInput!
}

input ContactInfoUpdateOneRequiredWithoutParticipantNestedInput {
  create: ContactInfoCreateWithoutParticipantInput
  connectOrCreate: ContactInfoCreateOrConnectWithoutParticipantInput
  upsert: ContactInfoUpsertWithoutParticipantInput
  connect: ContactInfoWhereUniqueInput
  update: ContactInfoUpdateToOneWithWhereWithoutParticipantInput
}

input ContactInfoUpsertWithoutParticipantInput {
  update: ContactInfoUpdateWithoutParticipantInput!
  create: ContactInfoCreateWithoutParticipantInput!
  where: ContactInfoWhereInput
}

input ContactInfoUpdateWithoutParticipantInput {
  phones: phoneUpdateManyWithoutContactInfoNestedInput
  address: AddressUpdateOneRequiredWithoutContactInfoNestedInput
}

input phoneUpdateManyWithoutContactInfoNestedInput {
  create: [phoneCreateWithoutContactInfoInput!]
  connectOrCreate: [phoneCreateOrConnectWithoutContactInfoInput!]
  upsert: [phoneUpsertWithWhereUniqueWithoutContactInfoInput!]
  createMany: phoneCreateManyContactInfoInputEnvelope
  set: [phoneWhereUniqueInput!]
  disconnect: [phoneWhereUniqueInput!]
  delete: [phoneWhereUniqueInput!]
  connect: [phoneWhereUniqueInput!]
  update: [phoneUpdateWithWhereUniqueWithoutContactInfoInput!]
  updateMany: [phoneUpdateManyWithWhereWithoutContactInfoInput!]
  deleteMany: [phoneScalarWhereInput!]
}

input phoneUpsertWithWhereUniqueWithoutContactInfoInput {
  where: phoneWhereUniqueInput!
  update: phoneUpdateWithoutContactInfoInput!
  create: phoneCreateWithoutContactInfoInput!
}

input phoneUpdateWithoutContactInfoInput {
  number: FloatFieldUpdateOperationsInput
}

input phoneUpdateWithWhereUniqueWithoutContactInfoInput {
  where: phoneWhereUniqueInput!
  data: phoneUpdateWithoutContactInfoInput!
}

input phoneUpdateManyWithWhereWithoutContactInfoInput {
  where: phoneScalarWhereInput!
  data: phoneUpdateManyMutationInput!
}

input phoneScalarWhereInput {
  AND: [phoneScalarWhereInput!]
  OR: [phoneScalarWhereInput!]
  NOT: [phoneScalarWhereInput!]
  number: FloatFilter
  contactInfoId: IntFilter
}

input phoneUpdateManyMutationInput {
  number: FloatFieldUpdateOperationsInput
}

input AddressUpdateOneRequiredWithoutContactInfoNestedInput {
  create: AddressCreateWithoutContactInfoInput
  connectOrCreate: AddressCreateOrConnectWithoutContactInfoInput
  upsert: AddressUpsertWithoutContactInfoInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutContactInfoInput
}

input AddressUpsertWithoutContactInfoInput {
  update: AddressUpdateWithoutContactInfoInput!
  create: AddressCreateWithoutContactInfoInput!
  where: AddressWhereInput
}

input AddressUpdateWithoutContactInfoInput {
  address: StringFieldUpdateOperationsInput
  subdistrict: SubdistrictUpdateOneRequiredWithoutAddressNestedInput
}

input SubdistrictUpdateOneRequiredWithoutAddressNestedInput {
  create: SubdistrictCreateWithoutAddressInput
  connectOrCreate: SubdistrictCreateOrConnectWithoutAddressInput
  upsert: SubdistrictUpsertWithoutAddressInput
  connect: SubdistrictWhereUniqueInput
  update: SubdistrictUpdateToOneWithWhereWithoutAddressInput
}

input SubdistrictUpsertWithoutAddressInput {
  update: SubdistrictUpdateWithoutAddressInput!
  create: SubdistrictCreateWithoutAddressInput!
  where: SubdistrictWhereInput
}

input SubdistrictUpdateWithoutAddressInput {
  name: StringFieldUpdateOperationsInput
  postalCode: StringFieldUpdateOperationsInput
  district: DistrictUpdateOneRequiredWithoutSubdistrictsNestedInput
}

input DistrictUpdateOneRequiredWithoutSubdistrictsNestedInput {
  create: DistrictCreateWithoutSubdistrictsInput
  connectOrCreate: DistrictCreateOrConnectWithoutSubdistrictsInput
  upsert: DistrictUpsertWithoutSubdistrictsInput
  connect: DistrictWhereUniqueInput
  update: DistrictUpdateToOneWithWhereWithoutSubdistrictsInput
}

input DistrictUpsertWithoutSubdistrictsInput {
  update: DistrictUpdateWithoutSubdistrictsInput!
  create: DistrictCreateWithoutSubdistrictsInput!
  where: DistrictWhereInput
}

input DistrictUpdateWithoutSubdistrictsInput {
  name: StringFieldUpdateOperationsInput
  city: CityUpdateOneRequiredWithoutDistrictsNestedInput
}

input CityUpdateOneRequiredWithoutDistrictsNestedInput {
  create: CityCreateWithoutDistrictsInput
  connectOrCreate: CityCreateOrConnectWithoutDistrictsInput
  upsert: CityUpsertWithoutDistrictsInput
  connect: CityWhereUniqueInput
  update: CityUpdateToOneWithWhereWithoutDistrictsInput
}

input CityUpsertWithoutDistrictsInput {
  update: CityUpdateWithoutDistrictsInput!
  create: CityCreateWithoutDistrictsInput!
  where: CityWhereInput
}

input CityUpdateWithoutDistrictsInput {
  name: StringFieldUpdateOperationsInput
  province: ProvinceUpdateOneRequiredWithoutCitiesNestedInput
}

input ProvinceUpdateOneRequiredWithoutCitiesNestedInput {
  create: ProvinceCreateWithoutCitiesInput
  connectOrCreate: ProvinceCreateOrConnectWithoutCitiesInput
  upsert: ProvinceUpsertWithoutCitiesInput
  connect: ProvinceWhereUniqueInput
  update: ProvinceUpdateToOneWithWhereWithoutCitiesInput
}

input ProvinceUpsertWithoutCitiesInput {
  update: ProvinceUpdateWithoutCitiesInput!
  create: ProvinceCreateWithoutCitiesInput!
  where: ProvinceWhereInput
}

input ProvinceUpdateWithoutCitiesInput {
  name: StringFieldUpdateOperationsInput
}

input ProvinceUpdateToOneWithWhereWithoutCitiesInput {
  where: ProvinceWhereInput
  data: ProvinceUpdateWithoutCitiesInput!
}

input CityUpdateToOneWithWhereWithoutDistrictsInput {
  where: CityWhereInput
  data: CityUpdateWithoutDistrictsInput!
}

input DistrictUpdateToOneWithWhereWithoutSubdistrictsInput {
  where: DistrictWhereInput
  data: DistrictUpdateWithoutSubdistrictsInput!
}

input SubdistrictUpdateToOneWithWhereWithoutAddressInput {
  where: SubdistrictWhereInput
  data: SubdistrictUpdateWithoutAddressInput!
}

input AddressUpdateToOneWithWhereWithoutContactInfoInput {
  where: AddressWhereInput
  data: AddressUpdateWithoutContactInfoInput!
}

input ContactInfoUpdateToOneWithWhereWithoutParticipantInput {
  where: ContactInfoWhereInput
  data: ContactInfoUpdateWithoutParticipantInput!
}

input ProgramParticipationUpdateOneRequiredWithoutParticipantNestedInput {
  create: ProgramParticipationCreateWithoutParticipantInput
  connectOrCreate: ProgramParticipationCreateOrConnectWithoutParticipantInput
  upsert: ProgramParticipationUpsertWithoutParticipantInput
  connect: ProgramParticipationWhereUniqueInput
  update: ProgramParticipationUpdateToOneWithWhereWithoutParticipantInput
}

input ProgramParticipationUpsertWithoutParticipantInput {
  update: ProgramParticipationUpdateWithoutParticipantInput!
  create: ProgramParticipationCreateWithoutParticipantInput!
  where: ProgramParticipationWhereInput
}

input ProgramParticipationUpdateWithoutParticipantInput {
  bpjsNumber: NullableStringFieldUpdateOperationsInput
  nonActiveReason: NullableStringFieldUpdateOperationsInput
  effectiveDate: DateTimeFieldUpdateOperationsInput
  nonActiveDate: NullableDateTimeFieldUpdateOperationsInput
  santunanHarianRawatInapPlan: EnumSantunanHarianRawatInapPlanFieldUpdateOperationsInput
}

input ProgramParticipationUpdateToOneWithWhereWithoutParticipantInput {
  where: ProgramParticipationWhereInput
  data: ProgramParticipationUpdateWithoutParticipantInput!
}

input ParticipantUpdateToOneWithWhereWithoutRelationsInput {
  where: ParticipantWhereInput
  data: ParticipantUpdateWithoutRelationsInput!
}

input ParticipantUpdateManyWithoutRelationNestedInput {
  create: [ParticipantCreateWithoutRelationInput!]
  connectOrCreate: [ParticipantCreateOrConnectWithoutRelationInput!]
  upsert: [ParticipantUpsertWithWhereUniqueWithoutRelationInput!]
  createMany: ParticipantCreateManyRelationInputEnvelope
  set: [ParticipantWhereUniqueInput!]
  disconnect: [ParticipantWhereUniqueInput!]
  delete: [ParticipantWhereUniqueInput!]
  connect: [ParticipantWhereUniqueInput!]
  update: [ParticipantUpdateWithWhereUniqueWithoutRelationInput!]
  updateMany: [ParticipantUpdateManyWithWhereWithoutRelationInput!]
  deleteMany: [ParticipantScalarWhereInput!]
}

input ParticipantUpsertWithWhereUniqueWithoutRelationInput {
  where: ParticipantWhereUniqueInput!
  update: ParticipantUpdateWithoutRelationInput!
  create: ParticipantCreateWithoutRelationInput!
}

input ParticipantUpdateWithoutRelationInput {
  gender: EnumGenderFieldUpdateOperationsInput
  birthDate: DateTimeFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  status: EnumParticipantStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutParticipantNestedInput
  employment: EmploymentUpdateOneRequiredWithoutParticipantNestedInput
  bankAccount: BankAccountUpdateOneRequiredWithoutParticipantNestedInput
  contactInfo: ContactInfoUpdateOneRequiredWithoutParticipantNestedInput
  programParticipation: ProgramParticipationUpdateOneRequiredWithoutParticipantNestedInput
  relations: ParticipantUpdateManyWithoutRelationNestedInput
}

input ParticipantUpdateWithWhereUniqueWithoutRelationInput {
  where: ParticipantWhereUniqueInput!
  data: ParticipantUpdateWithoutRelationInput!
}

input ParticipantUpdateManyWithWhereWithoutRelationInput {
  where: ParticipantScalarWhereInput!
  data: ParticipantUpdateManyMutationInput!
}

input ParticipantScalarWhereInput {
  AND: [ParticipantScalarWhereInput!]
  OR: [ParticipantScalarWhereInput!]
  NOT: [ParticipantScalarWhereInput!]
  gender: EnumGenderFilter
  birthDate: DateTimeFilter
  isActive: BoolFilter
  status: EnumParticipantStatusFilter
  userId: StringFilter
  relationId: StringNullableFilter
  employmentId: IntFilter
  bankAccountId: IntFilter
  contactInfoId: IntFilter
  programParticipationId: IntFilter
}

input ParticipantUpdateManyMutationInput {
  gender: EnumGenderFieldUpdateOperationsInput
  birthDate: DateTimeFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  status: EnumParticipantStatusFieldUpdateOperationsInput
}

input ParticipantUpdateToOneWithWhereWithoutUserInput {
  where: ParticipantWhereInput
  data: ParticipantUpdateWithoutUserInput!
}

input UserUpdateWithWhereUniqueWithoutRoleInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutRoleInput!
}

input UserUpdateManyWithWhereWithoutRoleInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  id: StringFilter
  fullName: StringFilter
  email: StringFilter
  emailVerifiedAt: DateTimeNullableFilter
  password: StringNullableFilter
  profilePictureUrl: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  roleId: IntFilter
}

input UserUpdateManyMutationInput {
  fullName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  profilePictureUrl: NullableStringFieldUpdateOperationsInput
}

input RoleUpdateToOneWithWhereWithoutLowerLevelThanInput {
  where: RoleWhereInput
  data: RoleUpdateWithoutLowerLevelThanInput!
}

input RoleUpdateManyWithoutHigherLevelThanNestedInput {
  create: [RoleCreateWithoutHigherLevelThanInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutHigherLevelThanInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutHigherLevelThanInput!]
  createMany: RoleCreateManyHigherLevelThanInputEnvelope
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  connect: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutHigherLevelThanInput!]
  updateMany: [RoleUpdateManyWithWhereWithoutHigherLevelThanInput!]
  deleteMany: [RoleScalarWhereInput!]
}

input RoleUpsertWithWhereUniqueWithoutHigherLevelThanInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutHigherLevelThanInput!
  create: RoleCreateWithoutHigherLevelThanInput!
}

input RoleUpdateWithoutHigherLevelThanInput {
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  roleType: NullableEnumRoleTypeFieldUpdateOperationsInput
  rolePermissions: RolePermissionUpdateManyWithoutRoleNestedInput
  users: UserUpdateManyWithoutRoleNestedInput
  lowerLevelThan: RoleUpdateManyWithoutHigherLevelThanNestedInput
}

input RoleUpdateWithWhereUniqueWithoutHigherLevelThanInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutHigherLevelThanInput!
}

input RoleUpdateManyWithWhereWithoutHigherLevelThanInput {
  where: RoleScalarWhereInput!
  data: RoleUpdateManyMutationInput!
}

input RoleScalarWhereInput {
  AND: [RoleScalarWhereInput!]
  OR: [RoleScalarWhereInput!]
  NOT: [RoleScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringNullableFilter
  higherLevelThanId: IntNullableFilter
  roleType: EnumRoleTypeNullableFilter
}

input RoleUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  roleType: NullableEnumRoleTypeFieldUpdateOperationsInput
}

input RoleUpdateToOneWithWhereWithoutUsersInput {
  where: RoleWhereInput
  data: RoleUpdateWithoutUsersInput!
}

input UserUpdateToOneWithWhereWithoutParticipantInput {
  where: UserWhereInput
  data: UserUpdateWithoutParticipantInput!
}

input ParticipantUpdateToOneWithWhereWithoutProgramParticipationInput {
  where: ParticipantWhereInput
  data: ParticipantUpdateWithoutProgramParticipationInput!
}

input ProgramParticipationUpdateToOneWithWhereWithoutProgramParticipationToProgramsInput {
  where: ProgramParticipationWhereInput
  data: ProgramParticipationUpdateWithoutProgramParticipationToProgramsInput!
}

input ClaimProgramUpdateManyWithoutProgramParticipationToProgramNestedInput {
  create: [ClaimProgramCreateWithoutProgramParticipationToProgramInput!]
  connectOrCreate: [ClaimProgramCreateOrConnectWithoutProgramParticipationToProgramInput!]
  upsert: [ClaimProgramUpsertWithWhereUniqueWithoutProgramParticipationToProgramInput!]
  createMany: ClaimProgramCreateManyProgramParticipationToProgramInputEnvelope
  set: [ClaimProgramWhereUniqueInput!]
  disconnect: [ClaimProgramWhereUniqueInput!]
  delete: [ClaimProgramWhereUniqueInput!]
  connect: [ClaimProgramWhereUniqueInput!]
  update: [ClaimProgramUpdateWithWhereUniqueWithoutProgramParticipationToProgramInput!]
  updateMany: [ClaimProgramUpdateManyWithWhereWithoutProgramParticipationToProgramInput!]
  deleteMany: [ClaimProgramScalarWhereInput!]
}

input ClaimProgramUpsertWithWhereUniqueWithoutProgramParticipationToProgramInput {
  where: ClaimProgramWhereUniqueInput!
  update: ClaimProgramUpdateWithoutProgramParticipationToProgramInput!
  create: ClaimProgramCreateWithoutProgramParticipationToProgramInput!
}

input ClaimProgramUpdateWithoutProgramParticipationToProgramInput {
  expeditionDate: NullableDateTimeFieldUpdateOperationsInput
  isReclaim: NullableBoolFieldUpdateOperationsInput
  isReclaimNoticeLetterDate: NullableDateTimeFieldUpdateOperationsInput
  submissionNote: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  additionalNote: NullableStringFieldUpdateOperationsInput
  startTreatment: NullableDateTimeFieldUpdateOperationsInput
  endTreatment: NullableDateTimeFieldUpdateOperationsInput
  kurisRodaOrWalkerStoreName: NullableStringFieldUpdateOperationsInput
  clinics: ClinicUpdateOneWithoutClaimProgramNestedInput
  claim: ClaimUpdateOneWithoutClaimProgramNestedInput
  documents: DocumentUpdateManyWithoutClaimProgrammNestedInput
  invoiceProofs: InvoiceProofUpdateManyWithoutClaimProgramNestedInput
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input ClinicUpdateOneWithoutClaimProgramNestedInput {
  create: ClinicCreateWithoutClaimProgramInput
  connectOrCreate: ClinicCreateOrConnectWithoutClaimProgramInput
  upsert: ClinicUpsertWithoutClaimProgramInput
  disconnect: ClinicWhereInput
  delete: ClinicWhereInput
  connect: ClinicWhereUniqueInput
  update: ClinicUpdateToOneWithWhereWithoutClaimProgramInput
}

input ClinicUpsertWithoutClaimProgramInput {
  update: ClinicUpdateWithoutClaimProgramInput!
  create: ClinicCreateWithoutClaimProgramInput!
  where: ClinicWhereInput
}

input ClinicUpdateWithoutClaimProgramInput {
  code: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ClinicUpdateToOneWithWhereWithoutClaimProgramInput {
  where: ClinicWhereInput
  data: ClinicUpdateWithoutClaimProgramInput!
}

input ClaimUpdateOneWithoutClaimProgramNestedInput {
  create: ClaimCreateWithoutClaimProgramInput
  connectOrCreate: ClaimCreateOrConnectWithoutClaimProgramInput
  upsert: ClaimUpsertWithoutClaimProgramInput
  disconnect: ClaimWhereInput
  delete: ClaimWhereInput
  connect: ClaimWhereUniqueInput
  update: ClaimUpdateToOneWithWhereWithoutClaimProgramInput
}

input ClaimUpsertWithoutClaimProgramInput {
  update: ClaimUpdateWithoutClaimProgramInput!
  create: ClaimCreateWithoutClaimProgramInput!
  where: ClaimWhereInput
}

input ClaimUpdateWithoutClaimProgramInput {
  channel: EnumClaimChannelFieldUpdateOperationsInput
  admedicaStatus: EnumAdmedicaStatusFieldUpdateOperationsInput
  company: StringFieldUpdateOperationsInput
  claimFinancials: ClaimFinancialUpdateOneRequiredWithoutClaimNestedInput
  tags: TagUpdateManyWithoutClaimsNestedInput
}

input EnumClaimChannelFieldUpdateOperationsInput {
  set: ClaimChannel
}

input EnumAdmedicaStatusFieldUpdateOperationsInput {
  set: AdmedicaStatus
}

input ClaimFinancialUpdateOneRequiredWithoutClaimNestedInput {
  create: ClaimFinancialCreateWithoutClaimInput
  connectOrCreate: ClaimFinancialCreateOrConnectWithoutClaimInput
  upsert: ClaimFinancialUpsertWithoutClaimInput
  connect: ClaimFinancialWhereUniqueInput
  update: ClaimFinancialUpdateToOneWithWhereWithoutClaimInput
}

input ClaimFinancialUpsertWithoutClaimInput {
  update: ClaimFinancialUpdateWithoutClaimInput!
  create: ClaimFinancialCreateWithoutClaimInput!
  where: ClaimFinancialWhereInput
}

input ClaimFinancialUpdateWithoutClaimInput {
  requestedAmount: FloatFieldUpdateOperationsInput
  paidAmount: NullableFloatFieldUpdateOperationsInput
  rejectedAmount: NullableFloatFieldUpdateOperationsInput
  branchPayee: BranchUpdateOneWithoutClaimFinancialNestedInput
}

input BranchUpdateOneWithoutClaimFinancialNestedInput {
  create: BranchCreateWithoutClaimFinancialInput
  connectOrCreate: BranchCreateOrConnectWithoutClaimFinancialInput
  upsert: BranchUpsertWithoutClaimFinancialInput
  disconnect: BranchWhereInput
  delete: BranchWhereInput
  connect: BranchWhereUniqueInput
  update: BranchUpdateToOneWithWhereWithoutClaimFinancialInput
}

input BranchUpsertWithoutClaimFinancialInput {
  update: BranchUpdateWithoutClaimFinancialInput!
  create: BranchCreateWithoutClaimFinancialInput!
  where: BranchWhereInput
}

input BranchUpdateWithoutClaimFinancialInput {
  name: StringFieldUpdateOperationsInput
  employment: EmploymentUpdateManyWithoutBranchNestedInput
}

input EmploymentUpdateManyWithoutBranchNestedInput {
  create: [EmploymentCreateWithoutBranchInput!]
  connectOrCreate: [EmploymentCreateOrConnectWithoutBranchInput!]
  upsert: [EmploymentUpsertWithWhereUniqueWithoutBranchInput!]
  createMany: EmploymentCreateManyBranchInputEnvelope
  set: [EmploymentWhereUniqueInput!]
  disconnect: [EmploymentWhereUniqueInput!]
  delete: [EmploymentWhereUniqueInput!]
  connect: [EmploymentWhereUniqueInput!]
  update: [EmploymentUpdateWithWhereUniqueWithoutBranchInput!]
  updateMany: [EmploymentUpdateManyWithWhereWithoutBranchInput!]
  deleteMany: [EmploymentScalarWhereInput!]
}

input EmploymentUpsertWithWhereUniqueWithoutBranchInput {
  where: EmploymentWhereUniqueInput!
  update: EmploymentUpdateWithoutBranchInput!
  create: EmploymentCreateWithoutBranchInput!
}

input EmploymentUpdateWithoutBranchInput {
  employmentPosition: EnumPositionFieldUpdateOperationsInput
  group: GroupUpdateOneWithoutEmploymentNestedInput
  region: RegionUpdateOneWithoutEmploymentNestedInput
}

input EmploymentUpdateWithWhereUniqueWithoutBranchInput {
  where: EmploymentWhereUniqueInput!
  data: EmploymentUpdateWithoutBranchInput!
}

input EmploymentUpdateManyWithWhereWithoutBranchInput {
  where: EmploymentScalarWhereInput!
  data: EmploymentUpdateManyMutationInput!
}

input EmploymentScalarWhereInput {
  AND: [EmploymentScalarWhereInput!]
  OR: [EmploymentScalarWhereInput!]
  NOT: [EmploymentScalarWhereInput!]
  id: IntFilter
  employmentPosition: EnumPositionFilter
  branchId: IntFilter
  groupId: IntNullableFilter
  regionId: IntNullableFilter
}

input EmploymentUpdateManyMutationInput {
  employmentPosition: EnumPositionFieldUpdateOperationsInput
}

input BranchUpdateToOneWithWhereWithoutClaimFinancialInput {
  where: BranchWhereInput
  data: BranchUpdateWithoutClaimFinancialInput!
}

input ClaimFinancialUpdateToOneWithWhereWithoutClaimInput {
  where: ClaimFinancialWhereInput
  data: ClaimFinancialUpdateWithoutClaimInput!
}

input TagUpdateManyWithoutClaimsNestedInput {
  create: [TagCreateWithoutClaimsInput!]
  connectOrCreate: [TagCreateOrConnectWithoutClaimsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutClaimsInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutClaimsInput!]
  updateMany: [TagUpdateManyWithWhereWithoutClaimsInput!]
  deleteMany: [TagScalarWhereInput!]
}

input TagUpsertWithWhereUniqueWithoutClaimsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutClaimsInput!
  create: TagCreateWithoutClaimsInput!
}

input TagUpdateWithoutClaimsInput {
  name: StringFieldUpdateOperationsInput
  color: EnumColorFieldUpdateOperationsInput
}

input EnumColorFieldUpdateOperationsInput {
  set: Color
}

input TagUpdateWithWhereUniqueWithoutClaimsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutClaimsInput!
}

input TagUpdateManyWithWhereWithoutClaimsInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyMutationInput!
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  color: EnumColorFilter
  isException: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input TagUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  color: EnumColorFieldUpdateOperationsInput
}

input ClaimUpdateToOneWithWhereWithoutClaimProgramInput {
  where: ClaimWhereInput
  data: ClaimUpdateWithoutClaimProgramInput!
}

input DocumentUpdateManyWithoutClaimProgrammNestedInput {
  create: [DocumentCreateWithoutClaimProgrammInput!]
  connectOrCreate: [DocumentCreateOrConnectWithoutClaimProgrammInput!]
  upsert: [DocumentUpsertWithWhereUniqueWithoutClaimProgrammInput!]
  createMany: DocumentCreateManyClaimProgrammInputEnvelope
  set: [DocumentWhereUniqueInput!]
  disconnect: [DocumentWhereUniqueInput!]
  delete: [DocumentWhereUniqueInput!]
  connect: [DocumentWhereUniqueInput!]
  update: [DocumentUpdateWithWhereUniqueWithoutClaimProgrammInput!]
  updateMany: [DocumentUpdateManyWithWhereWithoutClaimProgrammInput!]
  deleteMany: [DocumentScalarWhereInput!]
}

input DocumentUpsertWithWhereUniqueWithoutClaimProgrammInput {
  where: DocumentWhereUniqueInput!
  update: DocumentUpdateWithoutClaimProgrammInput!
  create: DocumentCreateWithoutClaimProgrammInput!
}

input DocumentUpdateWithoutClaimProgrammInput {
  uploadedFileUrl: NullableStringFieldUpdateOperationsInput
  type: EnumDocumentTypeFieldUpdateOperationsInput
}

input EnumDocumentTypeFieldUpdateOperationsInput {
  set: DocumentType
}

input DocumentUpdateWithWhereUniqueWithoutClaimProgrammInput {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateWithoutClaimProgrammInput!
}

input DocumentUpdateManyWithWhereWithoutClaimProgrammInput {
  where: DocumentScalarWhereInput!
  data: DocumentUpdateManyMutationInput!
}

input DocumentScalarWhereInput {
  AND: [DocumentScalarWhereInput!]
  OR: [DocumentScalarWhereInput!]
  NOT: [DocumentScalarWhereInput!]
  id: StringFilter
  uploadedFileUrl: StringNullableFilter
  pdfPath: StringNullableFilter
  docxPath: StringNullableFilter
  size: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  source: EnumDocumentSourceFilter
  type: EnumDocumentTypeFilter
  claimProgramId: IntNullableFilter
}

input DocumentUpdateManyMutationInput {
  uploadedFileUrl: NullableStringFieldUpdateOperationsInput
  type: EnumDocumentTypeFieldUpdateOperationsInput
}

input InvoiceProofUpdateManyWithoutClaimProgramNestedInput {
  create: [InvoiceProofCreateWithoutClaimProgramInput!]
  connectOrCreate: [InvoiceProofCreateOrConnectWithoutClaimProgramInput!]
  upsert: [InvoiceProofUpsertWithWhereUniqueWithoutClaimProgramInput!]
  createMany: InvoiceProofCreateManyClaimProgramInputEnvelope
  set: [InvoiceProofWhereUniqueInput!]
  disconnect: [InvoiceProofWhereUniqueInput!]
  delete: [InvoiceProofWhereUniqueInput!]
  connect: [InvoiceProofWhereUniqueInput!]
  update: [InvoiceProofUpdateWithWhereUniqueWithoutClaimProgramInput!]
  updateMany: [InvoiceProofUpdateManyWithWhereWithoutClaimProgramInput!]
  deleteMany: [InvoiceProofScalarWhereInput!]
}

input InvoiceProofUpsertWithWhereUniqueWithoutClaimProgramInput {
  where: InvoiceProofWhereUniqueInput!
  update: InvoiceProofUpdateWithoutClaimProgramInput!
  create: InvoiceProofCreateWithoutClaimProgramInput!
}

input InvoiceProofUpdateWithoutClaimProgramInput {
  amount: FloatFieldUpdateOperationsInput
}

input InvoiceProofUpdateWithWhereUniqueWithoutClaimProgramInput {
  where: InvoiceProofWhereUniqueInput!
  data: InvoiceProofUpdateWithoutClaimProgramInput!
}

input InvoiceProofUpdateManyWithWhereWithoutClaimProgramInput {
  where: InvoiceProofScalarWhereInput!
  data: InvoiceProofUpdateManyMutationInput!
}

input InvoiceProofScalarWhereInput {
  AND: [InvoiceProofScalarWhereInput!]
  OR: [InvoiceProofScalarWhereInput!]
  NOT: [InvoiceProofScalarWhereInput!]
  id: IntFilter
  issuedDate: DateTimeFilter
  amount: FloatFilter
  documentProofId: StringFilter
  claimProgramId: IntNullableFilter
}

input InvoiceProofUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
}

input ClaimProgramUpdateWithWhereUniqueWithoutProgramParticipationToProgramInput {
  where: ClaimProgramWhereUniqueInput!
  data: ClaimProgramUpdateWithoutProgramParticipationToProgramInput!
}

input ClaimProgramUpdateManyWithWhereWithoutProgramParticipationToProgramInput {
  where: ClaimProgramScalarWhereInput!
  data: ClaimProgramUpdateManyMutationInput!
}

input ClaimProgramScalarWhereInput {
  AND: [ClaimProgramScalarWhereInput!]
  OR: [ClaimProgramScalarWhereInput!]
  NOT: [ClaimProgramScalarWhereInput!]
  id: IntFilter
  expeditionDate: DateTimeNullableFilter
  isReclaim: BoolNullableFilter
  isReclaimNoticeLetterDate: DateTimeNullableFilter
  submissionNote: StringNullableFilter
  description: StringNullableFilter
  additionalNote: StringNullableFilter
  startTreatment: DateTimeNullableFilter
  endTreatment: DateTimeNullableFilter
  kurisRodaOrWalkerStoreName: StringNullableFilter
  diseaseId: IntNullableFilter
  clinicId: IntNullableFilter
  programParticipationToProgramsProgramParticipationId: IntFilter
  programParticipationToProgramsProgramId: IntFilter
}

input ClaimProgramUpdateManyMutationInput {
  expeditionDate: NullableDateTimeFieldUpdateOperationsInput
  isReclaim: NullableBoolFieldUpdateOperationsInput
  isReclaimNoticeLetterDate: NullableDateTimeFieldUpdateOperationsInput
  submissionNote: NullableStringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  additionalNote: NullableStringFieldUpdateOperationsInput
  startTreatment: NullableDateTimeFieldUpdateOperationsInput
  endTreatment: NullableDateTimeFieldUpdateOperationsInput
  kurisRodaOrWalkerStoreName: NullableStringFieldUpdateOperationsInput
}

input ProgramParticipationToProgramsUpdateWithWhereUniqueWithoutProgramInput {
  where: ProgramParticipationToProgramsWhereUniqueInput!
  data: ProgramParticipationToProgramsUpdateWithoutProgramInput!
}

input ProgramParticipationToProgramsUpdateManyWithWhereWithoutProgramInput {
  where: ProgramParticipationToProgramsScalarWhereInput!
  data: ProgramParticipationToProgramsUpdateManyMutationInput!
}

input ProgramParticipationToProgramsScalarWhereInput {
  AND: [ProgramParticipationToProgramsScalarWhereInput!]
  OR: [ProgramParticipationToProgramsScalarWhereInput!]
  NOT: [ProgramParticipationToProgramsScalarWhereInput!]
  description: StringNullableFilter
  isAvailable: BoolFilter
  allowanceCeilingRemaining: FloatFilter
  allowanceCeilingRemainingLastResetDate: DateTimeNullableFilter
  allowanceQuotaRemaining: IntNullableFilter
  allowanceQuotaRemainingLastResetDate: DateTimeNullableFilter
  updatedAt: DateTimeFilter
  programParticipationId: IntFilter
  programId: IntFilter
}

input ProgramParticipationToProgramsUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
}

input ProgramUpdateManyMutationInput {
  type: EnumProgramTypeFieldUpdateOperationsInput
  santunanHarianRawatInapPlan: NullableEnumSantunanHarianRawatInapPlanFieldUpdateOperationsInput
  tambahanBantuanRawatInapType: NullableEnumTambahanBantuanRawatInapTypeFieldUpdateOperationsInput
  maxAllowancePercentage: NullableIntFieldUpdateOperationsInput
  allowanceCeiling: FloatFieldUpdateOperationsInput
  allowanceCeilingPeriod: NullableEnumPeriodFieldUpdateOperationsInput
  allowanceQuota: NullableIntFieldUpdateOperationsInput
  allowanceQuotaPeriod: NullableEnumPeriodFieldUpdateOperationsInput
  claimPeriodMax: NullableIntFieldUpdateOperationsInput
  reclaimPeriodMax: NullableIntFieldUpdateOperationsInput
}

input BackupCreateInput {
  type: BackupType!
  executionType: ExecutionType!
}

input BackupCreateManyInput {
  id: Int
  type: BackupType!
  executionType: ExecutionType!
}

input BackupUpdateInput {
  type: EnumBackupTypeFieldUpdateOperationsInput
  executionType: EnumExecutionTypeFieldUpdateOperationsInput
}

input EnumBackupTypeFieldUpdateOperationsInput {
  set: BackupType
}

input EnumExecutionTypeFieldUpdateOperationsInput {
  set: ExecutionType
}

input BackupUpdateManyMutationInput {
  type: EnumBackupTypeFieldUpdateOperationsInput
  executionType: EnumExecutionTypeFieldUpdateOperationsInput
}

input LoginArgs {
  """Masukkan email"""
  email: String!

  """Masukkan password"""
  password: String!
}

input UserCreateInput {
  fullName: String!
  email: String!
  password: String
  profilePictureUrl: String
  role: RoleCreateNestedOneWithoutUsersInput
  participant: ParticipantCreateNestedOneWithoutUserInput
}

input UserUpdateInput {
  fullName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  profilePictureUrl: NullableStringFieldUpdateOperationsInput
  role: RoleUpdateOneRequiredWithoutUsersNestedInput
  participant: ParticipantUpdateOneWithoutUserNestedInput
}

input DocumentCreateInput {
  uploadedFileUrl: String
  type: DocumentType!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ClaimCreateInput {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  company: String!
  participant: ParticipantCreateNestedOneWithoutClaimsInput!
  claimFinancials: ClaimFinancialCreateNestedOneWithoutClaimInput!
  claimProgram: ClaimProgramCreateNestedOneWithoutClaimInput!
  tags: TagCreateNestedManyWithoutClaimsInput
}

input ClaimProgramCreateNestedOneWithoutClaimInput {
  create: ClaimProgramCreateWithoutClaimInput
  connectOrCreate: ClaimProgramCreateOrConnectWithoutClaimInput
  connect: ClaimProgramWhereUniqueInput
}

input ClaimProgramCreateWithoutClaimInput {
  isReclaim: Boolean
  isReclaimNoticeLetterDate: DateTime
  submissionNote: String
  description: String
  additionalNote: String
  startTreatment: DateTime
  endTreatment: DateTime
  kurisRodaOrWalkerStoreName: String
  disease: DiseaseCreateNestedOneWithoutClaimProgramInput
  clinics: ClinicCreateNestedOneWithoutClaimProgramInput
  programParticipationToProgram: ProgramParticipationToProgramsCreateNestedOneWithoutClaimProgramsInput!
  documents: DocumentCreateNestedManyWithoutClaimProgrammInput
  invoiceProofs: InvoiceProofCreateNestedManyWithoutClaimProgramInput
}

input ProgramParticipationToProgramsCreateNestedOneWithoutClaimProgramsInput {
  create: ProgramParticipationToProgramsCreateWithoutClaimProgramsInput
  connectOrCreate: ProgramParticipationToProgramsCreateOrConnectWithoutClaimProgramsInput
  connect: ProgramParticipationToProgramsWhereUniqueInput
}

input ProgramParticipationToProgramsCreateWithoutClaimProgramsInput {
  description: String
  programParticipation: ProgramParticipationCreateNestedOneWithoutProgramParticipationToProgramsInput!
}

input ProgramParticipationToProgramsCreateOrConnectWithoutClaimProgramsInput {
  where: ProgramParticipationToProgramsWhereUniqueInput!
  create: ProgramParticipationToProgramsCreateWithoutClaimProgramsInput!
}

input ClaimProgramCreateOrConnectWithoutClaimInput {
  where: ClaimProgramWhereUniqueInput!
  create: ClaimProgramCreateWithoutClaimInput!
}

input ClaimUpdateOneOfStatusArgs {
  id: String!
  status: ClaimStatusType!
}

input ClaimStatusCreateInput {
  description: String
  rejectionReason: String
  type: ClaimStatusType!
  changedBy: UserCreateNestedOneWithoutClaimActionsInput!
  claim: ClaimCreateNestedOneWithoutClaimStatusesInput!
  rejectionLetter: DocumentCreateNestedOneWithoutRejectionLetterOfInput
  guaranteeLetter: DocumentCreateNestedOneWithoutGuaranteeLetterOfInput
  transactionLetter: DocumentCreateNestedOneWithoutTransactionLetterOfInput
  bookKeepingOrder: DocumentCreateNestedOneWithoutBookKeepingOrderOfInput
}

input UserCreateNestedOneWithoutClaimActionsInput {
  create: UserCreateWithoutClaimActionsInput
  connectOrCreate: UserCreateOrConnectWithoutClaimActionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutClaimActionsInput {
  fullName: String!
  email: String!
  password: String
  profilePictureUrl: String
  role: RoleCreateNestedOneWithoutUsersInput
  participant: ParticipantCreateNestedOneWithoutUserInput
}

input UserCreateOrConnectWithoutClaimActionsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutClaimActionsInput!
}

input ClaimCreateNestedOneWithoutClaimStatusesInput {
  create: ClaimCreateWithoutClaimStatusesInput
  connectOrCreate: ClaimCreateOrConnectWithoutClaimStatusesInput
  connect: ClaimWhereUniqueInput
}

input ClaimCreateWithoutClaimStatusesInput {
  channel: ClaimChannel!
  admedicaStatus: AdmedicaStatus!
  company: String!
  participant: ParticipantCreateNestedOneWithoutClaimsInput!
  claimFinancials: ClaimFinancialCreateNestedOneWithoutClaimInput!
  claimProgram: ClaimProgramCreateNestedOneWithoutClaimInput!
  tags: TagCreateNestedManyWithoutClaimsInput
}

input ClaimCreateOrConnectWithoutClaimStatusesInput {
  where: ClaimWhereUniqueInput!
  create: ClaimCreateWithoutClaimStatusesInput!
}

input DocumentCreateNestedOneWithoutRejectionLetterOfInput {
  create: DocumentCreateWithoutRejectionLetterOfInput
  connectOrCreate: DocumentCreateOrConnectWithoutRejectionLetterOfInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateWithoutRejectionLetterOfInput {
  uploadedFileUrl: String
  type: DocumentType!
}

input DocumentCreateOrConnectWithoutRejectionLetterOfInput {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutRejectionLetterOfInput!
}

input DocumentCreateNestedOneWithoutGuaranteeLetterOfInput {
  create: DocumentCreateWithoutGuaranteeLetterOfInput
  connectOrCreate: DocumentCreateOrConnectWithoutGuaranteeLetterOfInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateWithoutGuaranteeLetterOfInput {
  uploadedFileUrl: String
  type: DocumentType!
}

input DocumentCreateOrConnectWithoutGuaranteeLetterOfInput {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutGuaranteeLetterOfInput!
}

input DocumentCreateNestedOneWithoutTransactionLetterOfInput {
  create: DocumentCreateWithoutTransactionLetterOfInput
  connectOrCreate: DocumentCreateOrConnectWithoutTransactionLetterOfInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateWithoutTransactionLetterOfInput {
  uploadedFileUrl: String
  type: DocumentType!
}

input DocumentCreateOrConnectWithoutTransactionLetterOfInput {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutTransactionLetterOfInput!
}

input DocumentCreateNestedOneWithoutBookKeepingOrderOfInput {
  create: DocumentCreateWithoutBookKeepingOrderOfInput
  connectOrCreate: DocumentCreateOrConnectWithoutBookKeepingOrderOfInput
  connect: DocumentWhereUniqueInput
}

input DocumentCreateWithoutBookKeepingOrderOfInput {
  uploadedFileUrl: String
  type: DocumentType!
}

input DocumentCreateOrConnectWithoutBookKeepingOrderOfInput {
  where: DocumentWhereUniqueInput!
  create: DocumentCreateWithoutBookKeepingOrderOfInput!
}

input ContactInfoUpdateInput {
  phones: phoneUpdateManyWithoutContactInfoNestedInput
  participant: ParticipantUpdateOneWithoutContactInfoNestedInput
  address: AddressUpdateOneRequiredWithoutContactInfoNestedInput
}

input ParticipantUpdateOneWithoutContactInfoNestedInput {
  create: ParticipantCreateWithoutContactInfoInput
  connectOrCreate: ParticipantCreateOrConnectWithoutContactInfoInput
  upsert: ParticipantUpsertWithoutContactInfoInput
  disconnect: ParticipantWhereInput
  delete: ParticipantWhereInput
  connect: ParticipantWhereUniqueInput
  update: ParticipantUpdateToOneWithWhereWithoutContactInfoInput
}

input ParticipantCreateWithoutContactInfoInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  user: UserCreateNestedOneWithoutParticipantInput!
  relation: ParticipantCreateNestedOneWithoutRelationsInput
  employment: EmploymentCreateNestedOneWithoutParticipantInput!
  bankAccount: BankAccountCreateNestedOneWithoutParticipantInput!
  programParticipation: ProgramParticipationCreateNestedOneWithoutParticipantInput!
  relations: ParticipantCreateNestedManyWithoutRelationInput
}

input ParticipantCreateOrConnectWithoutContactInfoInput {
  where: ParticipantWhereUniqueInput!
  create: ParticipantCreateWithoutContactInfoInput!
}

input ParticipantUpsertWithoutContactInfoInput {
  update: ParticipantUpdateWithoutContactInfoInput!
  create: ParticipantCreateWithoutContactInfoInput!
  where: ParticipantWhereInput
}

input ParticipantUpdateWithoutContactInfoInput {
  gender: EnumGenderFieldUpdateOperationsInput
  birthDate: DateTimeFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  status: EnumParticipantStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutParticipantNestedInput
  relation: ParticipantUpdateOneWithoutRelationsNestedInput
  employment: EmploymentUpdateOneRequiredWithoutParticipantNestedInput
  bankAccount: BankAccountUpdateOneRequiredWithoutParticipantNestedInput
  programParticipation: ProgramParticipationUpdateOneRequiredWithoutParticipantNestedInput
  relations: ParticipantUpdateManyWithoutRelationNestedInput
}

input ParticipantUpdateToOneWithWhereWithoutContactInfoInput {
  where: ParticipantWhereInput
  data: ParticipantUpdateWithoutContactInfoInput!
}

input ParticipantCreateInput {
  gender: Gender!
  birthDate: DateTime!
  isActive: Boolean!
  status: ParticipantStatus!
  user: UserCreateNestedOneWithoutParticipantInput!
  relation: ParticipantCreateNestedOneWithoutRelationsInput
  employment: EmploymentCreateNestedOneWithoutParticipantInput!
  bankAccount: BankAccountCreateNestedOneWithoutParticipantInput!
  contactInfo: ContactInfoCreateNestedOneWithoutParticipantInput!
  programParticipation: ProgramParticipationCreateNestedOneWithoutParticipantInput!
  relations: ParticipantCreateNestedManyWithoutRelationInput
}

input ParticipantUpdateInput {
  gender: EnumGenderFieldUpdateOperationsInput
  birthDate: DateTimeFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  status: EnumParticipantStatusFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutParticipantNestedInput
  relation: ParticipantUpdateOneWithoutRelationsNestedInput
  employment: EmploymentUpdateOneRequiredWithoutParticipantNestedInput
  bankAccount: BankAccountUpdateOneRequiredWithoutParticipantNestedInput
  contactInfo: ContactInfoUpdateOneRequiredWithoutParticipantNestedInput
  programParticipation: ProgramParticipationUpdateOneRequiredWithoutParticipantNestedInput
  relations: ParticipantUpdateManyWithoutRelationNestedInput
}

input RoleCreateInput {
  name: String!
  description: String
  roleType: RoleType
  higherLevelThan: RoleCreateNestedOneWithoutLowerLevelThanInput
  rolePermissions: RolePermissionCreateNestedManyWithoutRoleInput
  users: UserCreateNestedManyWithoutRoleInput
  lowerLevelThan: RoleCreateNestedManyWithoutHigherLevelThanInput
}

input RoleUpdateInput {
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  roleType: NullableEnumRoleTypeFieldUpdateOperationsInput
  higherLevelThan: RoleUpdateOneWithoutLowerLevelThanNestedInput
  rolePermissions: RolePermissionUpdateManyWithoutRoleNestedInput
  users: UserUpdateManyWithoutRoleNestedInput
  lowerLevelThan: RoleUpdateManyWithoutHigherLevelThanNestedInput
}

input TagCreateInput {
  name: String!
  color: Color!
}

input TagUpdateInput {
  name: StringFieldUpdateOperationsInput
  color: EnumColorFieldUpdateOperationsInput
}

input NotificationUpdateInput {
  isRead: BoolFieldUpdateOperationsInput
  isCleared: BoolFieldUpdateOperationsInput
}

input NotificationUpdateManyMutationInput {
  isRead: BoolFieldUpdateOperationsInput
  isCleared: BoolFieldUpdateOperationsInput
}

input AnnouncementCreateInput {
  title: String!
  content: String!
  imageUrl: String
  createdBy: UserCreateNestedOneWithoutAnnouncementCreatedInput!
}

input UserCreateNestedOneWithoutAnnouncementCreatedInput {
  create: UserCreateWithoutAnnouncementCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutAnnouncementCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAnnouncementCreatedInput {
  fullName: String!
  email: String!
  password: String
  profilePictureUrl: String
  role: RoleCreateNestedOneWithoutUsersInput
  participant: ParticipantCreateNestedOneWithoutUserInput
}

input UserCreateOrConnectWithoutAnnouncementCreatedInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutAnnouncementCreatedInput!
}